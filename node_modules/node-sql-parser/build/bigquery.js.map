{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/external \"big-integer\"","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c40","peg$c66","peg$c68","peg$c70","peg$c72","peg$c74","peg$c77","peg$c79","peg$c91","createBinaryExprChain","peg$c93","peg$c95","peg$c99","nk","peg$c102","peg$c104","peg$c106","peg$c108","peg$c110","peg$c112","peg$c120","peg$c122","peg$c125","peg$c127","peg$c129","peg$c135","reservedMap","peg$c139","peg$c140","peg$c141","peg$classExpectation","peg$c142","chars","peg$c144","peg$c145","peg$c146","peg$c148","peg$c149","peg$c150","peg$c153","peg$c154","peg$c155","peg$c156","peg$c157","peg$c158","peg$c159","peg$c161","peg$c177","ca","peg$c181","peg$c183","peg$c184","peg$c185","peg$c186","peg$c188","peg$c191","peg$c194","peg$c197","peg$c200","peg$c203","peg$c206","peg$c209","peg$c212","peg$c215","peg$c218","peg$c219","peg$c220","peg$c229","peg$c233","peg$c234","peg$c235","peg$c236","peg$c237","peg$c238","peg$c239","peg$c240","peg$c243","peg$c249","peg$c253","peg$c260","peg$c270","peg$c275","peg$c292","peg$c294","peg$c296","peg$c298","peg$c300","peg$c302","peg$c304","peg$c306","peg$c308","peg$c310","peg$c312","peg$c317","peg$c319","peg$c321","peg$c323","peg$c325","peg$c327","peg$c329","peg$c331","peg$c333","peg$c335","peg$c338","peg$c341","peg$c344","peg$c347","peg$c350","peg$c353","peg$c356","peg$c359","peg$c362","peg$c365","peg$c368","peg$c371","peg$c374","peg$c377","peg$c380","peg$c383","peg$c386","peg$c404","peg$c407","peg$c410","peg$c416","peg$c422","peg$c434","peg$c449","peg$c452","peg$c473","peg$c479","peg$c482","peg$c485","peg$c488","peg$c497","peg$c503","peg$c506","peg$c509","peg$c512","peg$c515","peg$c518","peg$c521","peg$c524","peg$c527","peg$c572","peg$c574","peg$c576","peg$c578","peg$c580","peg$c582","peg$c584","peg$c586","peg$c588","peg$c590","peg$c591","peg$c592","peg$c593","peg$c597","dataType","peg$c598","a","definition","anglebracket","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","ast","tableList","from","columnList","columnListTableAlias","peg$c1","peg$parsemultiple_stmt","s9","s8","peg$parseKW_WITH","peg$parsecte_definition","peg$parseCOMMA","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","substr","toLowerCase","peg$parseident_start","peg$parseKW_LIMIT","peg$parsenumber_or_param","peg$parseKW_OFFSET","i1","res","seperator","peg$c83","peg$parselimit_clause","cte","with","select","orderby","limit","parentheses","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","_next","union","peg$c15","s11","s13","s15","s17","s19","peg$parseKW_SELECT","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parseLPAREN","peg$parseexpr","peg$parseRPAREN","peg$parsealias_clause","keyword","as","peg$parsewith_offset","expr","with_offset","peg$parsetable_base","peg$parsetable_ref","unshift","forEach","tableInfo","table","tableAlias","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","isArray","info","add","db","as_struct_val","distinct","columns","for_sys_time_as_of","where","groupby","having","window","peg$parseselect_stmt_nake","parentheses_symbol","peg$parseident_name","stmt","peg$parseSTAR","peg$parsecolumns_list","expr_list","star","peg$parsecolumn_list_item","tbl","pro","peg$parseident","peg$parseDOT","peg$parseLBRAKE","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parsecolumn_offset_expr","peg$parseexpr_alias","JSON","stringify","peg$c137","peg$parsequoted_ident","peg$parsealias_ident","s10","s12","s14","peg$parsejoin_op","peg$parseKW_USING","op","using","peg$parseon_clause","on","peg$c48","alias","peg$c49","peg$parsetable_join","peg$parsetable_name","peg$c51","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","peg$parseKW_CROSS","project","dt","obj","peg$c56","peg$c57","peg$parseKW_ON","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","e","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c82","peg$parseparam","el","peg$c84","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseand_expr","peg$parse___","peg$parseKW_OR","peg$parseor_expr","array_path","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","map","peg$c86","peg$c87","peg$parsearray_expr","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","left","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$parseliteral_string","peg$c118","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c114","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","createBinaryExpr","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_COUNT","peg$parsestar_expr","peg$parsecount_arg","peg$parseover_partition","args","over","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$c172","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","bc","peg$c171","peg$parsefunc_call","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$parseinterval_expr","col","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c134","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_TIME","peg$parseKW_DATE","peg$parseKW_TIMESTAMP","peg$parsesingle_char","lf","rt","peg$c179","up","peg$c182","peg$parseliteral_datetime","peg$parsesingle_quote_char","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parseint","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c223","exp","peg$c224","peg$c225","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parseKW_DATETIME","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","peg$parsedata_type","field_name","field_type","peg$c596","operator","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","result","queryTableAlias","tableName","keys","columnInfo","split","Set","require","PARSER_NAME","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","symbol","upperType","indexOptArray","literalToSQL","shift","commentToSQL","toUpper","onPartitionsToSQL","filter","hasVal","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","exprToSQL","identifierToSql","constraintDefinitionToSQL","constraintDefinition","constraint","index","referenceDefinition","reference_definition","constraintSQL","columnReferenceDefinitionToSQL","tableToSQL","database","str","tablesToSQL","tables","unnestExpr","withOffset","commonOptionConnector","unnestToSQL","baseTable","clauses","joinExpr","tableOptionToSQL","tableOption","sql","columnRefToSQL","arrow","collate","isDual","commonTypeValue","columnDataType","suffix","scale","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrderToSQL","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","check","comment","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","autoIncreatementToSQL","columnOption","columnsToSQL","getDual","exprList","columnsStr","columnIdentifierToSql","columnToSQL","escapeMap","'","DEFAULT_OPT","parserOpt","action","opt","connector","createValueExpr","escape","len","char","escaped","getParserOpt","setParserOpt","topToSQL","percent","prefix","ident","replaceParams","params","replaceParamsInner","val","partitions","partition","arrayStructTypeToSQL","dataTypeUpper","field","triggerEventToSQL","events","event","kw","kwArgs","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","overToSQL","windowSQL","funcToSQL","overStr","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","recursive","withExprStr","selectToSQL","asStructVal","forSystem","forUpdate","for_update","top","windowInfo","withInfo","getExprListSQL","arrayStructValueToSQL","arrayPath","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","ifNotExists","if_not_exists","resource","aggr_func","fnName","assign","leftVar","rightVal","extract","castType","cast_type","source","binary_expr","rstr","isBetween","case","conditions","cond","cast","target","expression","symbolChar","column_ref","function","interval","intervalExpr","struct","namedWindowExprInfo","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","createDefinitionToSQL","indexSQL","setToSQL","sets","set","valuesToSQL","values","partitionToSQL","partitionArr","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","members","varName","unionToSQL","unary_expr","typeToSQLFn","like","temporary","createDefinition","create_definitions","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTableName","createTableToSQL","constraintKw","constraint_kw","deferrable","execute","for_each","when","createTriggerToSQL","extension","schema","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","delete","addition","update","insert","onDuplicateUpdate","on_duplicate_update","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","lock","unlock","fun","_orderby","_limit","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","Parser","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"6DACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+BC1ErD,IAAIC,EAAS,EAAQ,GAQrB,SAASC,EAAgBC,EAASC,EAAUC,EAAOC,GACjDC,KAAKJ,QAAWA,EAChBI,KAAKH,SAAWA,EAChBG,KAAKF,MAAWA,EAChBE,KAAKD,SAAWA,EAChBC,KAAK/B,KAAW,cAEuB,mBAA5BgC,MAAMC,mBACfD,MAAMC,kBAAkBF,KAAML,IAdlC,SAAsBQ,EAAOC,GAC3B,SAASC,IAASL,KAAKM,YAAcH,EACrCE,EAAKf,UAAYc,EAAOd,UACxBa,EAAMb,UAAY,IAAIe,EAexBE,CAAaZ,EAAiBM,OAE9BN,EAAgBa,aAAe,SAASX,EAAUC,GAChD,IAAIW,EAA2B,CACzBC,QAAS,SAASC,GAChB,MAAO,IAAOC,EAAcD,EAAYE,MAAQ,KAGlD,MAAS,SAASF,GAChB,IACIjD,EADAoD,EAAe,GAGnB,IAAKpD,EAAI,EAAGA,EAAIiD,EAAYI,MAAMC,OAAQtD,IACxCoD,GAAgBH,EAAYI,MAAMrD,aAAcuD,MAC5CC,EAAYP,EAAYI,MAAMrD,GAAG,IAAM,IAAMwD,EAAYP,EAAYI,MAAMrD,GAAG,IAC9EwD,EAAYP,EAAYI,MAAMrD,IAGpC,MAAO,KAAOiD,EAAYQ,SAAW,IAAM,IAAML,EAAe,KAGlEM,IAAK,SAAST,GACZ,MAAO,iBAGTU,IAAK,SAASV,GACZ,MAAO,gBAGTW,MAAO,SAASX,GACd,OAAOA,EAAYY,cAI3B,SAASC,EAAIC,GACX,OAAOA,EAAGC,WAAW,GAAGC,SAAS,IAAIC,cAGvC,SAAShB,EAAcnB,GACrB,OAAOA,EACJoC,QAAQ,MAAO,QACfA,QAAQ,KAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,gBAAyB,SAASJ,GAAM,MAAO,OAASD,EAAIC,MACpEI,QAAQ,yBAAyB,SAASJ,GAAM,MAAO,MAASD,EAAIC,MAGzE,SAASP,EAAYzB,GACnB,OAAOA,EACJoC,QAAQ,MAAO,QACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,gBAAyB,SAASJ,GAAM,MAAO,OAASD,EAAIC,MACpEI,QAAQ,yBAAyB,SAASJ,GAAM,MAAO,MAASD,EAAIC,MA6CzE,MAAO,YAtCP,SAA0B5B,GACxB,IACInC,EAAGoE,EANoBnB,EAKvBoB,EAAe,IAAId,MAAMpB,EAASmB,QAGtC,IAAKtD,EAAI,EAAGA,EAAImC,EAASmB,OAAQtD,IAC/BqE,EAAarE,IATYiD,EASad,EAASnC,GAR1C+C,EAAyBE,EAAYqB,MAAMrB,IAalD,GAFAoB,EAAaE,OAETF,EAAaf,OAAS,EAAG,CAC3B,IAAKtD,EAAI,EAAGoE,EAAI,EAAGpE,EAAIqE,EAAaf,OAAQtD,IACtCqE,EAAarE,EAAI,KAAOqE,EAAarE,KACvCqE,EAAaD,GAAKC,EAAarE,GAC/BoE,KAGJC,EAAaf,OAASc,EAGxB,OAAQC,EAAaf,QACnB,KAAK,EACH,OAAOe,EAAa,GAEtB,KAAK,EACH,OAAOA,EAAa,GAAK,OAASA,EAAa,GAEjD,QACE,OAAOA,EAAaG,MAAM,GAAI,GAAGC,KAAK,MAClC,QACAJ,EAAaA,EAAaf,OAAS,IAQxBoB,CAAiBvC,GAAY,QAJlD,SAAuBC,GACrB,OAAOA,EAAQ,IAAOc,EAAcd,GAAS,IAAO,eAGMuC,CAAcvC,GAAS,WAs+brFrC,EAAOD,QAAU,CACf8E,YAAa3C,EACb4C,MAr+bF,SAAmBC,EAAOC,GACxBA,OAAsB,IAAZA,EAAqBA,EAAU,GAEzC,IAsiCIC,EAtiCAC,EAAa,GAEbC,EAAyB,CAAEC,MAAOC,IAClCC,EAAyBD,GAkBzBE,EAASC,GAAuB,KAAK,GAErCC,EAASD,GAAuB,KAAK,GAyBrCE,EAAUF,GAAuB,aAAa,GAE9CG,EAAUH,GAAuB,UAAU,GA6B3CI,EAAU,SAASC,EAAMC,GACnB,OAAOC,GAAWF,EAAMC,IAqB9BE,EAAUR,GAAuB,OAAO,GAExCS,EAAUT,GAAuB,eAAe,GAEhDU,EAAUV,GAAuB,MAAM,GAEvCW,EAAUX,GAAuB,MAAM,GAcvCY,EAAUZ,GAAuB,WAAW,GA6C5Ca,EAAUb,GAAuB,UAAU,GAuH3Cc,EAAUd,GAAuB,SAAS,GAE1Ce,EAAUf,GAAuB,aAAa,GAE9CgB,EAAUhB,GAAuB,aAAa,GAE9CiB,EAAUjB,GAAuB,WAAW,GAE5CkB,EAAUlB,GAAuB,OAAO,GAKxCmB,EAAUnB,GAAuB,QAAQ,GAEzCoB,EAAUpB,GAAuB,aAAa,GAgE9CqB,EAAU,SAAShB,EAAMC,GACnB,OAAOgB,GAAsBjB,EAAMC,IAGzCiB,EAAUvB,GAAuB,KAAK,GAEtCwB,EAAUxB,GAAuB,KAAK,GAatCyB,EAAU,SAASC,GAAM,OAAOA,EAAG,GAAK,IAAMA,EAAG,IAKjDC,EAAW3B,GAAuB,MAAM,GAExC4B,EAAW5B,GAAuB,KAAK,GAEvC6B,EAAW7B,GAAuB,MAAM,GAExC8B,EAAW9B,GAAuB,MAAM,GAExC+B,EAAW/B,GAAuB,KAAK,GAEvCgC,EAAWhC,GAAuB,MAAM,GA0BxCiC,EAAWjC,GAAuB,KAAK,GAEvCkC,EAAWlC,GAAuB,KAAK,GAKvCmC,EAAWnC,GAAuB,KAAK,GAEvCoC,EAAWpC,GAAuB,KAAK,GAEvCqC,EAAWrC,GAAuB,KAAK,GAgCvCsC,EAAW,SAAStH,GAAQ,OAA2C,IAApCuH,GAAYvH,EAAK2D,gBASpD6D,EAAWxC,GAAuB,KAAM,GACxCyC,EAAW,QACXC,EAAWC,GAAqB,CAAC,MAAO,GAAM,GAC9CC,EAAW,SAASC,GAAS,OAAOA,EAAM3D,KAAK,KAE/C4D,EAAW9C,GAAuB,KAAK,GACvC+C,EAAW,QACXC,EAAWL,GAAqB,CAAC,MAAM,GAAM,GAE7CM,EAAWjD,GAAuB,KAAK,GACvCkD,EAAW,QACXC,EAAWR,GAAqB,CAAC,MAAM,GAAM,GAK7CS,EAAW,SAASxD,EAAO9B,GAAS,OAAO8B,EAAQ9B,EAAMoB,KAAK,KAC9DmE,EAAW,aACXC,GAAWX,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,MAAM,GAAO,GACtEY,GAAW,gBACXC,GAAWb,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,MAAM,GAAO,GAClFc,GAAW,iBACXC,GAAWf,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,IAAK,MAAM,GAAO,GAEvFgB,GAAW3D,GAAuB,KAAK,GA0EvC4D,GAAW,SAASC,GACd,MAAO,CACL9E,KAAM,SACNrD,MAAOmI,EAAG,GAAG3E,KAAK,MAW1B4E,GAAW9D,GAAuB,+BAA+B,GAOjE+D,GAAW,qBACXC,GAAWrB,GAAqB,CAAC,IAAM,KAAM,CAAC,KAAM,KAAS,MAAS,GAAM,GAC5EsB,GAAW,UACXC,GAAWvB,GAAqB,CAAC,IAAK,OAAO,GAAM,GAEnDwB,GAAWnE,GAAuB,OAAO,GAGzCoE,GAAWpE,GAAuB,OAAQ,GAG1CqE,GAAWrE,GAAuB,QAAQ,GAG1CsE,GAAWtE,GAAuB,OAAO,GAGzCuE,GAAWvE,GAAuB,OAAO,GAGzCwE,GAAWxE,GAAuB,OAAO,GAGzCyE,GAAWzE,GAAuB,OAAO,GAGzC0E,GAAW1E,GAAuB,OAAO,GAGzC2E,GAAW3E,GAAuB,OAAO,GAGzC4E,GAAW5E,GAAuB,OAAO,GAKzC6E,GAAW7E,GAAuB,MAAM,GACxC8E,GAAW,UACXC,GAAWpC,GAAqB,CAAC,KAAM,OAAO,GAAO,GAqCrDqC,GAAWhF,GAAuB,KAAK,GAIvCiF,GAAW,SACXC,GAAWvC,GAAqB,CAAC,CAAC,IAAK,OAAO,GAAO,GACrDwC,GAAW,eACXC,GAAWzC,GAAqB,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,OAAO,GAAO,GAC7E0C,GAAW,QACXC,GAAW3C,GAAqB,CAAC,IAAK,MAAM,GAAO,GACnD4C,GAAW,SACXC,GAAW7C,GAAqB,CAAC,IAAK,MAAM,GAAO,GAGnD8C,GAAWzF,GAAuB,QAAQ,GAM1C0F,IAJW1F,GAAuB,WAAW,GAElCA,GAAuB,YAAY,GAEnCA,GAAuB,QAAQ,IAI1C2F,IAFW3F,GAAuB,MAAM,GAE7BA,GAAuB,SAAS,IAO3C4F,IALW5F,GAAuB,QAAQ,GAG/BA,GAAuB,OAAO,GAE9BA,GAAuB,UAAU,IAU5C6F,IARW7F,GAAuB,iBAAiB,GAExCA,GAAuB,aAAa,GAEpCA,GAAuB,UAAU,GAEjCA,GAAuB,WAAW,GAElCA,GAAuB,aAAa,IAK/C8F,IAFW9F,GAAuB,QAAQ,GAE/BA,GAAuB,QAAQ,IAiB1C+F,IAfW/F,GAAuB,OAAO,GAE9BA,GAAuB,UAAU,GAEjCA,GAAuB,QAAQ,GAE/BA,GAAuB,SAAS,GAGhCA,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,GAGlCA,GAAuB,MAAM,IAExCgG,GAAWhG,GAAuB,QAAQ,GAE1CiG,GAAWjG,GAAuB,SAAS,GAE3CkG,GAAWlG,GAAuB,QAAQ,GAE1CmG,GAAWnG,GAAuB,SAAS,GAE3CoG,GAAWpG,GAAuB,SAAS,GAE3CqG,GAAWrG,GAAuB,QAAQ,GAE1CsG,GAAWtG,GAAuB,SAAS,GAE3CuG,GAAWvG,GAAuB,QAAQ,GAE1CwG,GAAWxG,GAAuB,SAAS,GAE3CyG,GAAWzG,GAAuB,SAAS,GAK3C0G,IAFW1G,GAAuB,UAAU,GAEjCA,GAAuB,SAAS,IAE3C2G,GAAW3G,GAAuB,SAAS,GAE3C4G,GAAW5G,GAAuB,QAAQ,GAE1C6G,GAAW7G,GAAuB,SAAS,GAE3C8G,GAAW9G,GAAuB,MAAM,GAExC+G,GAAW/G,GAAuB,SAAS,GAE3CgH,GAAWhH,GAAuB,UAAU,GAE5CiH,GAAWjH,GAAuB,UAAU,GAE5CkH,GAAWlH,GAAuB,SAAS,GAE3CmH,GAAWnH,GAAuB,UAAU,GAG5CoH,GAAWpH,GAAuB,OAAO,GAGzCqH,GAAWrH,GAAuB,QAAQ,GAG1CsH,GAAWtH,GAAuB,OAAO,GAGzCuH,GAAWvH,GAAuB,YAAY,GAG9CwH,GAAWxH,GAAuB,WAAW,GAG7CyH,GAAWzH,GAAuB,MAAM,GAGxC0H,GAAW1H,GAAuB,MAAM,GAGxC2H,GAAW3H,GAAuB,QAAQ,GAG1C4H,GAAW5H,GAAuB,UAAU,GAG5C6H,GAAW7H,GAAuB,OAAO,GAGzC8H,GAAW9H,GAAuB,OAAO,GAGzC+H,GAAW/H,GAAuB,MAAM,GAGxCgI,GAAWhI,GAAuB,SAAS,GAG3CiI,GAAWjI,GAAuB,OAAO,GAGzCkI,GAAWlI,GAAuB,OAAO,GAGzCmI,GAAWnI,GAAuB,OAAO,GAGzCoI,GAAWpI,GAAuB,OAAO,GAkBzCqI,IAfWrI,GAAuB,QAAQ,GAG/BA,GAAuB,QAAQ,GAE/BA,GAAuB,QAAQ,GAE/BA,GAAuB,QAAQ,GAE/BA,GAAuB,QAAQ,GAE/BA,GAAuB,OAAO,GAE9BA,GAAuB,QAAQ,GAE/BA,GAAuB,SAAS,IAG3CsI,GAAWtI,GAAuB,SAAS,GAG3CuI,GAAWvI,GAAuB,QAAQ,GAM1CwI,IAHWxI,GAAuB,QAAQ,GAG/BA,GAAuB,aAAa,IAM/CyI,IAHWzI,GAAuB,WAAW,GAGlCA,GAAuB,WAAW,IAY7C0I,IATW1I,GAAuB,WAAW,GAGlCA,GAAuB,UAAU,GAGjCA,GAAuB,YAAY,GAGnCA,GAAuB,SAAS,IAe3C2I,IAZW3I,GAAuB,YAAY,GAGnCA,GAAuB,WAAW,GAGlCA,GAAuB,QAAQ,GAG/BA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,IAG5C4I,GAAW5I,GAAuB,UAAU,GAqB5C6I,IAlBW7I,GAAuB,WAAW,GAGlCA,GAAuB,YAAY,GAGnCA,GAAuB,QAAQ,GAG/BA,GAAuB,cAAc,GAGrCA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,IAM7C8I,IAHW9I,GAAuB,UAAU,GAGjCA,GAAuB,QAAQ,IAG1C+I,GAAW/I,GAAuB,YAAY,GAG9CgJ,GAAWhJ,GAAuB,QAAQ,GAG1CiJ,GAAWjJ,GAAuB,aAAa,GAS/CkJ,IANWlJ,GAAuB,YAAY,GAGnCA,GAAuB,QAAQ,GAG/BA,GAAuB,gBAAgB,IAMlDmJ,IAHWnJ,GAAuB,WAAW,GAGlCA,GAAuB,YAAY,IAG9CoJ,GAAWpJ,GAAuB,QAAQ,GAG1CqJ,GAAWrJ,GAAuB,SAAS,GAG3CsJ,GAAWtJ,GAAuB,OAAO,GAGzCuJ,GAAWvJ,GAAuB,QAAQ,GAG1CwJ,GAAWxJ,GAAuB,UAAU,GAG5CyJ,GAAWzJ,GAAuB,UAAU,GAG5C0J,GAAW1J,GAAuB,gBAAgB,GAGlD2J,GAAW3J,GAAuB,qBAAqB,GA6CvD4J,IA1CW5J,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,GAGlCA,GAAuB,SAAS,GAGhCA,GAAuB,WAAW,GAGlCA,GAAuB,gBAAgB,GAGvCA,GAAuB,OAAO,GAG9BA,GAAuB,UAAU,GAGjCA,GAAuB,SAAS,GAGhCA,GAAuB,OAAO,GAG9BA,GAAuB,YAAY,GAGnCA,GAAuB,UAAU,GAGjCA,GAAuB,WAAW,GAGlCA,GAAuB,cAAc,GAGrCA,GAAuB,cAAc,GAGrCA,GAAuB,KAAK,IAEvC6J,GAAW7J,GAAuB,KAAK,GAEvC8J,GAAW9J,GAAuB,KAAK,GAEvC+J,GAAW/J,GAAuB,KAAK,GAEvCgK,GAAWhK,GAAuB,MAAM,GAExCiK,GAAWjK,GAAuB,MAAM,GAExCkK,GAAWlK,GAAuB,MAAM,GAExCmK,GAAWnK,GAAuB,MAAM,GAExCoK,GAAWpK,GAAuB,MAAM,GAExCqK,GAAWrK,GAAuB,KAAK,GACvCsK,GAwEK,CAAEvL,KAAM,OAvEbwL,GAAW,aACXC,GAAW7H,GAAqB,CAAC,IAAK,KAAM,KAAM,OAAO,GAAO,GAWhE8H,GAAW,SAAS9O,GAAK,MAAO,CAAE+O,SAAU/O,IAC5CgP,GAAW,SAAShP,EAAGiP,GACnB,MAAO,CACLF,SAAU/O,EACVkP,WAAYD,EACZE,cAAc,IAIpBC,GAAuB,EAEvBC,GAAuB,CAAC,CAAEC,KAAM,EAAGC,OAAQ,IAC3CC,GAAuB,EACvBC,GAAuB,GACvBC,GAAuB,EAI3B,GAAI,cAAe7L,EAAS,CAC1B,KAAMA,EAAQ8L,aAAa3L,GACzB,MAAM,IAAI3C,MAAM,mCAAqCwC,EAAQ8L,UAAY,MAG3ExL,EAAwBH,EAAuBH,EAAQ8L,WA2BzD,SAAStL,GAAuBpC,EAAM2N,GACpC,MAAO,CAAExM,KAAM,UAAWnB,KAAMA,EAAM2N,WAAYA,GAGpD,SAAS5I,GAAqB7E,EAAOI,EAAUqN,GAC7C,MAAO,CAAExM,KAAM,QAASjB,MAAOA,EAAOI,SAAUA,EAAUqN,WAAYA,GAexE,SAASC,GAAsBC,GAC7B,IAAwClP,EAApCmP,EAAUV,GAAoBS,GAElC,GAAIC,EACF,OAAOA,EAGP,IADAnP,EAAIkP,EAAM,GACFT,GAAoBzO,IAC1BA,IASF,IALAmP,EAAU,CACRT,MAFFS,EAAUV,GAAoBzO,IAEZ0O,KAChBC,OAAQQ,EAAQR,QAGX3O,EAAIkP,GACmB,KAAxBlM,EAAMd,WAAWlC,IACnBmP,EAAQT,OACRS,EAAQR,OAAS,GAEjBQ,EAAQR,SAGV3O,IAIF,OADAyO,GAAoBS,GAAOC,EACpBA,EAIX,SAASC,GAAoBC,EAAUC,GACrC,IAAIC,EAAkBN,GAAsBI,GACxCG,EAAkBP,GAAsBK,GAE5C,MAAO,CACLjM,MAAO,CACLoM,OAAQJ,EACRX,KAAQa,EAAgBb,KACxBC,OAAQY,EAAgBZ,QAE1B9M,IAAK,CACH4N,OAAQH,EACRZ,KAAQc,EAAcd,KACtBC,OAAQa,EAAcb,SAK5B,SAASe,GAASrP,GACZmO,GAAcI,KAEdJ,GAAcI,KAChBA,GAAiBJ,GACjBK,GAAsB,IAGxBA,GAAoBc,KAAKtP,IAO3B,SAASuP,GAAyBvP,EAAUC,EAAOC,GACjD,OAAO,IAAIJ,EACTA,EAAgBa,aAAaX,EAAUC,GACvCD,EACAC,EACAC,GAIJ,SAAS+C,KACP,IAAIuM,EAAQC,EAsBZ,OApBAD,EAAKrB,GACAuB,OACM5M,IACT2M,EAoBJ,WACE,IAAID,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKM,QACMnN,EAAY,CA6BrB,GA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKI,QACMpN,IACTiN,EAAKL,QACM5M,IACTkN,EAAKC,QACMnN,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEH8M,IAAO9M,EACT,KAAO8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKI,QACMpN,IACTiN,EAAKL,QACM5M,IACTkN,EAAKC,QACMnN,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,QAIT2M,EAAK3M,EAEH2M,IAAO3M,GACM0M,EACfG,EA/vCO,SAASlM,EAAMC,GAClB,MAAMyM,EAAM,CAAC1M,GAAQA,EAAK2M,KAAO3M,GACjC,IAAK,IAAI5F,EAAI,EAAGA,EAAI6F,EAAKvC,OAAQtD,IAC3B6F,EAAK7F,GAAG,IAA4B,IAAtB6F,EAAK7F,GAAG,GAAGsD,QAC7BgP,EAAIb,KAAK5L,EAAK7F,GAAG,IAAM6F,EAAK7F,GAAG,GAAGuS,KAAO1M,EAAK7F,GAAG,IAEnD,MAAO,CACLwS,UAAWjP,MAAMkP,KAAKD,IACtBE,WAAYC,GAAqBD,IACjCH,IAAKD,GAsvCNM,CAAOd,EAAIF,GAChBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EArGAkB,MACM5N,IACT2M,EAAKQ,MAEHR,IAAO3M,GACM0M,EAEfA,EADYC,IAGZtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAuFT,SAASS,KACP,IAAIT,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EA0DF,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAAQE,EAAQW,EAExCnB,EAAKrB,IACLwB,EAmWF,WACE,IAAIH,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIY,EAAID,EAIxC,GAFAnB,EAAKrB,IACLwB,EAAKkB,QACM/N,EAET,GADK4M,OACM5M,EAET,IADA8M,EAAKkB,QACMhO,EAAY,CA6BrB,IA5BA+M,EAAK,GACLC,EAAK3B,IACL4B,EAAKL,QACM5M,IACTkN,EAAKe,QACMjO,IACT8N,EAAKlB,QACM5M,IACT6N,EAAKG,QACMhO,EAETgN,EADAC,EAAK,CAACA,EAAIC,EAAIY,EAAID,IAexBxC,GAAc2B,EACdA,EAAKhN,GAEAgN,IAAOhN,GACZ+M,EAAGP,KAAKQ,GACRA,EAAK3B,IACL4B,EAAKL,QACM5M,IACTkN,EAAKe,QACMjO,IACT8N,EAAKlB,QACM5M,IACT6N,EAAKG,QACMhO,EAETgN,EADAC,EAAK,CAACA,EAAIC,EAAIY,EAAID,IAexBxC,GAAc2B,EACdA,EAAKhN,GAGL+M,IAAO/M,GACM0M,EACfG,EAAKnM,EAAQoM,EAAIC,GACjBL,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EA5bFwB,MACMlO,IACT6M,EAAK,MAEHA,IAAO7M,GACJ4M,OACM5M,IACT8M,EAAKqB,QACMnO,GACJ4M,OACM5M,IACTgN,EAAKoB,QACMpO,IACTgN,EAAK,MAEHA,IAAOhN,GACJ4M,OACM5M,IACTkN,EAgkGd,WACE,IAAIR,EAAIG,EAAQC,EAAQE,EAAIC,EAAIC,EAAIY,EAEpCpB,EAAKrB,IACLwB,EA03KF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAniSQ,UAoiSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/E,KAEpCqF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA55KF8B,MACMxO,GACJ4M,OACM5M,IACT8M,EAAK2B,QACMzO,GACJ4M,OACM5M,GACTgN,EAAK3B,IACL4B,EAAKgB,QACMjO,IACTiN,EAAKyB,MAEHzB,IAAOjN,IACTkN,EAAKN,QACM5M,IACT8N,EAAKW,QACMzO,EAETgN,EADAC,EAAK,CAACA,EAAIC,EAAIY,IAWlBzC,GAAc2B,EACdA,EAAKhN,GAEHgN,IAAOhN,IACTgN,EAAK,MAEHA,IAAOhN,GACM0M,EACfG,EA3pIE,SAAS8B,EAAI/N,GACjB,MAAMgO,EAAM,CAACD,GAEb,OADI/N,GAAMgO,EAAIpC,KAAK5L,EAAK,IACjB,CACLiO,UAAWjO,GAAQA,EAAK,IAAMA,EAAK,GAAG0N,eAAiB,GACvDtS,MAAO4S,GAspIFE,CAAQhC,EAAIE,GACjBN,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAhoGUqC,MACM/O,IACTkN,EAAK,MAEHA,IAAOlN,GACJ4M,OACM5M,IACT6N,EAAKT,QACMpN,IACT6N,EAAK,MAEHA,IAAO7N,GACM0M,EAt1CbsC,EAu1CUnC,EAv1CL/P,EAu1CSgQ,EAv1CNtR,EAu1CUwR,EAv1CPhS,EAu1CWkS,EAAxBL,EAt1CL,CACLU,UAAWjP,MAAMkP,KAAKD,IACtBE,WAAYC,GAAqBD,IACjCH,IAAK,CACHjO,KAAM,WACN4P,KAAMD,EACNE,OAAQpS,GAAKA,EAAEwQ,IACf6B,QAAS3T,EACT4T,MAAOpU,EACPqU,YAAavS,GAAKA,EAAEuS,cA80CZ3C,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,GA33CI,IAASgP,EAAKlS,EAAGtB,EAAGR,EA83C/B,OAAO0R,EApIF4C,MACMtP,IACT0M,EAAKrB,GACLwB,EAAKxB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBsB,EAzwCO,IA0wCPtB,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAASlM,IAEpCsM,IAAO3M,IACT8M,EAAKF,QACM5M,IACT+M,EAAKwC,QACMvP,IACTgN,EAAKJ,QACM5M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnB4B,EArxCD,IAsxCC5B,OAEA4B,EAAKjN,EACmB,IAApB2L,IAAyBY,GAAShM,IAEpC0M,IAAOjN,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtB5B,GAAcwB,EACdA,EAAK7M,KAebqL,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAjzCW,IAizCCA,EAhzCD,GACLwC,aAAa,IAizCrB3C,EAAKG,GAGAH,EAgFT,SAAS8C,KACP,IAAI9C,EAAIG,EAAQC,EAp3COhQ,EA07CvB,OApEA4P,EAAKrB,IACLwB,EA2+PF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAlqRQ,UAmqRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASzF,KAEpC+F,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA7gQF+C,MACMzP,GACJ4M,OACM5M,IACT8M,EAAK4C,QACM1P,IACT8M,EAAK6C,MAEH7C,IAAO9M,IACT8M,EAAK,MAEHA,IAAO9M,GACM0M,EAEfA,EADAG,GAp4CiB/P,EAo4CDgQ,GAn4CL,SAAShQ,EAAEwR,cAAkB,UAs4CxCjD,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GAh5CI,cAi5CLxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/L,IAEpCqM,IAAO7M,IAt5CD,WAu5CJH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9L,KAGtCoM,IAAO7M,GACJ4M,OACM5M,IACT8M,EAAK6C,QACM3P,GACM0M,EAEfA,EADAG,EAn6CI,SAAS+C,EAAG9S,GAClB,MAAO,GAAG8S,EAAEtB,iBAAiBxR,EAAEwR,gBAk6CxBuB,CAAQhD,EAAIC,KAWrBzB,GAAcqB,EACdA,EAAK1M,IAIF0M,EAGT,SAASyB,KACP,IAAIzB,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EAAKoD,QACM9P,IACT0M,EAAKrB,GACLwB,EAAKxB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBsB,EA79CO,IA89CPtB,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAASlM,IAEpCsM,IAAO3M,IACT8M,EAAKF,QACM5M,IACT+M,EAAK+C,QACM9P,IACTgN,EAAKJ,QACM5M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnB4B,EAz+CD,IA0+CC5B,OAEA4B,EAAKjN,EACmB,IAApB2L,IAAyBY,GAAShM,IAEpC0M,IAAOjN,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtB5B,GAAcwB,EACdA,EAAK7M,KAebqL,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAv+CW,IAu+CEA,EAt+CF,GACLwC,aAAa,IAu+CrB3C,EAAKG,GAGAH,EAGT,SAASoD,KACP,IAAIpD,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAK0C,QACMvP,EAAY,CAgCrB,IA/BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKwC,QACMxP,IACTgN,EAAK,MAEHA,IAAOhN,IACTiN,EAAKL,QACM5M,IACTkN,EAAKqC,QACMvP,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB7B,GAAcyB,EACdA,EAAK9M,KAGPqL,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKwC,QACMxP,IACTgN,EAAK,MAEHA,IAAOhN,IACTiN,EAAKL,QACM5M,IACTkN,EAAKqC,QACMvP,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAWtB7B,GAAcyB,EACdA,EAAK9M,KAGPqL,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EAEfA,EADAG,EAljDQ,SAASlM,EAAMC,GACnB,IAAIyM,EAAM1M,EACV,IAAK,IAAI5F,EAAI,EAAGA,EAAI6F,EAAKvC,OAAQtD,IAC/BsS,EAAI0C,MAAQnP,EAAK7F,GAAG,GACpBsS,EAAI2C,MAAQpP,EAAK7F,GAAG,GACpBsS,EAAMA,EAAI0C,MAEZ,MAAO,CACLxC,UAAWjP,MAAMkP,KAAKD,IACtBE,WAAYC,GAAqBD,IACjCH,IAAK3M,GAwiDNsP,CAAQpD,EAAIF,KAGjBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAAS6C,KACP,IAAI7C,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAyD5B,OAvDAP,EAuNF,WACE,IAAIA,EAAYI,EAAQE,EAAQE,EAAQW,EAASqC,EAAUC,EAAUC,EAAUC,EAAUC,EAEzF5D,EAAKrB,GAyrNP,WACE,IAAIqB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAx1PQ,WAy1PTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASrG,KAEpC2G,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA1tNF6D,KACMvQ,GACJ4M,OACM5M,IACT8M,EAyON,WACE,IAAIJ,EAAIG,EAAQC,EAEhBJ,EAAKrB,IACLwB,EAAK2D,QACMxQ,GACJ4M,OACM5M,IACT8M,EAAK2D,QACMzQ,IACT8M,EAk2OR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GArsRQ,UAssRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASxF,KAEpC8F,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAxtR6B,UA2tR7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAr4OIgE,IAEH5D,IAAO9M,GACM0M,EAl+DGiE,EAm+DD7D,EAAjBD,EAl+DO,GAk+DMA,EAl+DD,GAAGyB,iBAAiBqC,EAAErC,gBAm+DlC5B,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GA/+DK,IAAY2Q,EAk/DxB,OAAOjE,EAtQEkE,MACM5Q,IACT8M,EAAK,MAEHA,IAAO9M,GACJ4M,OACM5M,IACTgN,EAAK0C,QACM1P,IACTgN,EAAK2C,MAEH3C,IAAOhN,IACTgN,EAAK,MAEHA,IAAOhN,GACJ4M,OACM5M,IACTkN,EAAK2D,QACM7Q,GACJ4M,OACM5M,IACT6N,EAmyBlB,WACE,IAAInB,EAAYI,EAAgBI,EAAiBgD,EAAUC,EAE3DzD,EAAKrB,GACAyF,OACM9Q,GACJ4M,OACM5M,GAx/ED,WAy/EJH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BxB,EAAKjN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASpL,IAEpC2L,IAAO9M,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTkN,EAAK8D,QACMhR,IACTkN,EAAK,MAEHA,IAAOlN,GACJ4M,OACM5M,GACJiR,OACMjR,GACH4M,OACM5M,IACVkQ,EAAMgB,QACMlR,IACVkQ,EAAM,MAEJA,IAAQlQ,GACJ4M,OACM5M,IACVmQ,EAwF1B,WACE,IAAIzD,EAAoBM,EAExBN,EAAKrB,GACA0C,OACM/N,GACJ4M,OACM5M,GACJ0O,OACM1O,GACJ4M,OACM5M,IACTgN,EAAKkE,QACMlR,IACTgN,EAAK,MAEHA,IAAOhN,GACM0M,EAEfA,EAvnFG,CACLyE,QAAS,iBACTC,GAonFepE,KAGb3B,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAjIuB2E,MACMrR,IACVmQ,EAAM,MAEJA,IAAQnQ,GACK0M,EAEfA,EA7hFb,CACLrN,KAAM,SACNiS,KA0hF+BpE,EAzhF/BmC,aAAa,EACb+B,GAwhFmClB,EAvhFnCqB,YAuhFwCpB,KAGtB9E,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GACAyF,OACM9Q,GACJ4M,OACM5M,IACT8M,EA2LR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKrB,IACLwB,EAAK2E,QACMxR,EAAY,CAGrB,IAFA2M,EAAK,GACLG,EAAK2E,KACE3E,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAK2E,KAEH9E,IAAO3M,GACM0M,EA9wFE/L,EA+wFJkM,GA/wFUjM,EA+wFN+L,GA9wFR+E,QAAQ/Q,GACbC,EAAK+Q,QAAQC,IACX,MAAM,MAAEC,EAAK,GAAET,GAAOQ,EACtBE,GAAWD,GAASA,EAChBT,IAAIU,GAAWV,GAAMS,KA2wF/BnF,EADAG,EAxwFWjM,IA2wFXyK,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAvxFK,IAASW,EAAMC,EA0xF3B,OAAO8L,EApNIqF,MACM/R,GACM0M,EAEfA,EADaI,IAWjBzB,GAAcqB,EACdA,EAAK1M,IAIT,OAAO0M,EAh6BcsF,MACMhS,IACT6N,EAAK,MAEHA,IAAO7N,GACH4M,OACM5M,IACVkQ,EAoHtB,WACE,IAAIxD,EAAIG,EAAQC,EAAQE,EAAQE,EAAQW,EAExCnB,EAAKrB,GA74DO,QA84DRxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASzL,IAEpC+L,IAAO7M,GACJ4M,OACM5M,GAr5DD,gBAs5DJH,EAAMwO,OAAOhD,GAAa,IAAIiD,eAChCxB,EAAKjN,EAAMwO,OAAOhD,GAAa,IAC/BA,IAAe,KAEfyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASxL,IAEpC+L,IAAO9M,GACJ4M,OACM5M,GA75DL,OA85DAH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BtB,EAAKnN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEf2B,EAAKhN,EACmB,IAApB2L,IAAyBY,GAASvL,IAEpCgM,IAAOhN,GACJ4M,OACM5M,GAr6DT,OAs6DIH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BpB,EAAKrN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEf6B,EAAKlN,EACmB,IAApB2L,IAAyBY,GAAStL,IAEpCiM,IAAOlN,GACJ4M,OACM5M,IACT6N,EAAKmD,QACMhR,GACM0M,EAEfA,EADAG,EAh7DL,CACLsE,QAAS,wBACTG,KA86DuBzD,KAWjBxC,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA1MmBuF,MACMjS,IACVkQ,EAAM,MAEJA,IAAQlQ,GACJ4M,OACM5M,IACVmQ,EAixD1B,WACE,IAAIzD,EAAYI,EAEhBJ,EAAKrB,GA84LP,WACE,IAAIqB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA9yRQ,UA+yRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAStF,KAEpC4F,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA/6LFwF,KACMlS,GACJ4M,OACM5M,IACT8M,EAAKkE,QACMhR,GACM0M,EAEfA,EADaI,IAWjBzB,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA3yDuByF,MACMnS,IACVmQ,EAAM,MAEJA,IAAQnQ,GACJ4M,OACM5M,IACVoQ,EAuyD9B,WACE,IAAI1D,EAAIG,EAAgBG,EAExBN,EAAKrB,IACLwB,EA07LF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAp3RQ,UAq3RTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASpF,KAEpC0F,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA59LF0F,MACMpS,GACJ4M,OACM5M,GACJqS,OACMrS,GACJ4M,OACM5M,IACTgN,EAAKsF,QACMtS,GACM0M,EACfG,EAAaG,EA/7GYhR,MAg8GzB0Q,EAAKG,IAkBbxB,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA70D2B6F,MACMvS,IACVoQ,EAAM,MAEJA,IAAQpQ,GACJ4M,OACM5M,IACVqQ,EAy0DlC,WACE,IAAI3D,EAAYI,EAEhBJ,EAAKrB,GAigMP,WACE,IAAIqB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA79RQ,WA89RTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASjF,KAEpCuF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAliMF8F,KACMxS,GACJ4M,OACM5M,IACT8M,EAAKkE,QACMhR,GACM0M,EAEfA,EADaI,IAWjBzB,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAn2D+B+F,MACMzS,IACVqQ,EAAM,MAEJA,IAAQrQ,GACJ4M,OACM5M,IACVsQ,EA+1DtC,WACE,IAAI5D,EAAYI,EAEhBJ,EAAKrB,GAygMP,WACE,IAAIqB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAhgSQ,WAigSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAShF,KAEpCsF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA1iMFgG,KACM1S,GACJ4M,OACM5M,IACT8M,EAqBN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAK8F,QACM3S,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKyF,QACM3S,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKyF,QACM3S,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EACfG,EAAKnM,EAAQmM,EAAIF,GACjBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAlGEkG,MACM5S,GACM0M,EAEfA,EAhgHO,CACLyE,QAAS,SACT9R,KAAM,SACNiS,KA4/GWxE,KAWjBzB,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAz3DmCmG,MACM7S,IACVsQ,EAAM,MAEJA,IAAQtQ,GACK0M,EAt0DhCoG,EAu0D8BhG,EAv0D1BzR,EAu0D8B2R,EAv0D3B5R,EAu0D+B8R,EAv0D5B6F,EAu0DgClF,EAv0D7BmF,EAu0DiC9C,EAv0D7B+C,EAu0DkC9C,EAv0D/B+C,EAu0DoC9C,EAv0DjC+C,EAu0DsC9C,EAv0DnC+C,EAu0DwC9C,EAt0D5EhS,MAAM+U,QAAQN,IAAIA,EAAEpB,QAAQ2B,GAAQA,EAAKzB,OAAStE,GAAUgG,IAAI,WAAWD,EAAKE,OAAOF,EAAKzB,UAu0DjEnF,EAt0DvB,CACHrN,KAAM,SACNoU,cAAeX,EACfY,SAAUrY,EACVsY,QAASvY,EACToS,KAAMuF,EACNa,mBAAoBZ,EACpBa,MAAOZ,EACPa,QAASZ,EACTa,OAAQZ,EACRa,OAAOZ,KA8zDmB/H,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAn5DK,IAAS8S,EAAIzX,EAAGD,EAAG2X,EAAGC,EAAIC,EAAGC,EAAGC,EAAGC,EAs5D/C,OAAO1G,EA5WFuH,MACMjU,IACT0M,EAAKrB,GACLwB,EAAKxB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBsB,EAhnDO,IAinDPtB,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAASlM,IAEpCsM,IAAO3M,IACT8M,EAAKF,QACM5M,IACT+M,EAAKwC,QACMvP,IACTgN,EAAKJ,QACM5M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnB4B,EA5nDD,IA6nDC5B,OAEA4B,EAAKjN,EACmB,IAApB2L,IAAyBY,GAAShM,IAEpC0M,IAAOjN,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,EAAIC,EAAIC,IAGtB5B,GAAcwB,EACdA,EAAK7M,KAebqL,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAvmDW,IAumDEA,EAtmDF,GACLqH,oBAAoB,IAumD5BxH,EAAKG,GAGAH,EA+FT,SAASsB,KACP,IAAItB,EAAIG,EAAwBK,EA6DhC,OA3DAR,EAAKrB,IACLwB,EAAKsH,QACMnU,GACJ4M,OACM5M,GACJwQ,OACMxQ,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTkN,EAAKiB,QACMnO,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAEfA,EADAG,EAztDH,CAAEvR,KAytDcuR,EAztDRuH,KAytDYlH,KAmCjC7B,GAAcqB,EACdA,EAAK1M,GAGA0M,EAoTT,SAASmE,KACP,IAAInE,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EA9gEXyD,EAAGvV,EASHuF,EAAMC,EAglE3B,GAzEA8L,EAAKrB,IACLwB,EAAKwH,QACMrU,IACT2M,EAAKC,QACM5M,GA7lED,WA8lEJH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BxB,EAAKjN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAAS9L,IAEpCqM,IAAO9M,IA9hEH,YA+hEFH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BxB,EAAKjN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASrL,KAGtC4L,IAAO9M,IACT+M,EAAKH,QACM5M,IACTgN,EAAK+D,QACM/Q,IACTiN,EAAKL,QACM5M,IACTkN,EAAKoH,QACMtU,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAljEZiE,EAmjEU7D,EAnjEP1R,EAmjEW8R,EAljE7BO,GAAW8F,IAAI,sBAmjEH7G,EADAG,EAjjEL,CACL0H,UAAWnZ,EACXiU,aAAa,EACbmF,KAAM,IACNnV,KAAMsR,EAAErC,iBAwkEVjD,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,EAAY,CAgCrB,GA/BA0M,EAAKrB,IACLwB,EAAK6C,QACM1P,IACT6M,EAAKxB,IACLsB,EAAK0H,QACMrU,GACT8M,EAAKzB,GACLM,KACAoB,EAAKwB,KACL5C,KACIoB,IAAO/M,EACT8M,OAAK,GAELzB,GAAcyB,EACdA,EAAK9M,GAEH8M,IAAO9M,EAET6M,EADAF,EAAK,CAACA,EAAIG,IAGVzB,GAAcwB,EACdA,EAAK7M,KAGPqL,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACT6M,EAAKwH,OAGLxH,IAAO7M,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKuH,QACMzU,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKuH,QACMzU,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,IACT8M,EAAKF,QACM5M,IACT+M,EAAKkB,QACMjO,IACT+M,EAAK,MAEHA,IAAO/M,GACM0M,EAnrEJ/L,EAorEEkM,EAprEIjM,EAorEA+L,EAnrEnBc,GAAW8F,IAAI,sBAorEb7G,EADAG,EAlrEEjM,GAAQA,EAAKvC,OAAS,GACxBsC,EAAK,GAAK,CACR2Q,KAAM,CACJjS,KAAM,aACNwS,MAAO,KACPrG,OAAQ,KAEV4F,GAAI,MAECvQ,GAAWF,EAAK,GAAIC,IAEtBD,EAAK,KA0qEV0K,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKyH,QACMtU,IACT2M,EAAKC,QACM5M,IACT8M,EAAKmB,QACMjO,IACT8M,EAAK,MAEHA,IAAO9M,GACM0M,EAEfA,EADAG,EAAaA,IAGbxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,IAKX,OAAO0M,EAGT,SAAS4H,KACP,IAAI5H,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAK4H,QACMzU,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKuH,QACMzU,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKuH,QACMzU,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EAEfA,EADAG,EAAKnM,EAAQmM,EAAIF,KAGjBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EA+FT,SAAS+H,KACP,IAAI/H,EAAIG,EAAYE,EAAIC,EAAIC,EAAIC,EA93EXwH,EAAKC,EAm8E1B,OAnEAjI,EAAKrB,IACLwB,EAAK+H,QACM5U,GACJ4M,OACM5M,GACJ6U,OACM7U,GACT+M,EAAK1B,IACL2B,EAvGR,WACE,IAAIN,EAAIG,EAAgCgB,EAwFxC,OAtFAnB,EAAKrB,IACLwB,EAAK+H,QACM5U,GACJ4M,OACM5M,GACJ8U,OACM9U,GACJ4M,OACM5M,GACJ0O,OACM1O,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACT6N,EAAKkH,QACM/U,GACH4M,OACM5M,GACJiR,OACMjR,GACJ4M,OACM5M,GACJgV,OACMhV,GACK0M,EAEfA,EADAG,EAl0Eb,GAk0E0BA,YAAIgB,EAl0Eb7R,YAq3E5BqP,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKkI,MAGAlI,EAcIuI,MACMjV,IACTiN,EAAKL,QACM5M,IACTkN,EAAK2H,QACM7U,EAET+M,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAWlB7B,GAAc0B,EACdA,EAAK/M,GAEH+M,IAAO/M,IACT+M,EAAK,MAEHA,IAAO/M,IACTgN,EAAKJ,QACM5M,IACTiN,EAAKoH,QACMrU,GACM0M,EAp6ENgI,EAq6EI7H,EAr6EC8H,EAq6EG5H,EAp6ErBU,GAAW8F,IAAI,WAAWmB,WACtBC,IAAKD,EAAM,GAAGA,KAAOC,EAAI,MAo6EzBjI,EADAG,EAl6EG,CACLyE,KAAM,CACJjS,KAAM,aACNwS,MAAO6C,EACPlJ,OAAQ,KAEV4F,GAAI,QAu6EN/F,GAAcqB,EACdA,EAAK1M,KAWXqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAjfJ,WACE,IAAIA,EAAIG,EAAQC,EA4BhB,OA1BAJ,EAAKrB,IACLwB,EAAKmE,QACMhR,GACJ4M,OACM5M,IACT8M,EAAKoE,QACMlR,IACT8M,EAAK,MAEHA,IAAO9M,GACM0M,EAEfA,EADAG,EA//DS,CAAEyE,KA+/DEzE,EA//DOuE,GA+/DHtE,KAGjBzB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAodAwI,IAGAxI,EAGT,SAASwE,KACP,IAAIxE,EAAIG,EAAQC,EAoDhB,OAlDAJ,EAAKrB,IACLwB,EAAK2D,QACMxQ,GACJ4M,OACM5M,IACT8M,EAo0HN,WACE,IAAIJ,EAAIG,EAERH,EAAKrB,IACLwB,EAAKsH,QACMnU,GACMqL,IAz9LJ,SAAS/P,GACd,IAAwC,IAApCuH,GAAYvH,EAAK2D,eAAyB,MAAM,IAAI3B,MAAM,UAAW6X,KAAKC,UAAU9Z,GAAM,gDAC9F,OAAO,EAw9LR+Z,CAASxI,GAEP7M,OAEA,KAEIA,GACM0M,EAEfA,EADAG,EAAcA,IAGdxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKyI,QACMtV,IACM0M,EACfG,EAAcA,GAEhBH,EAAKG,GAGP,OAAOH,EAv2HE6I,MACMvV,GACM0M,EAEfA,EADAG,EAAaC,IAWjBzB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAK2D,QACMxQ,IACT6M,EAAK,MAEHA,IAAO7M,GACJ4M,OACM5M,IACT8M,EAAK8H,QACM5U,GACM0M,EAEfA,EADAG,EAAaC,IAWjBzB,GAAcqB,EACdA,EAAK1M,IAIF0M,EAoUT,SAAS+E,KACP,IAAI/E,EAAQC,EAAQI,EAiDpB,OA/CAL,EAAKrB,GACAuB,OACM5M,IACT2M,EAAKsB,QACMjO,GACJ4M,OACM5M,IACT+M,EAAKyE,QACMxR,GACM0M,EAEfA,EADaK,IAenB1B,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GACAuB,OACM5M,IACT2M,EAkBN,WACE,IAAID,EAAIG,EAAQC,EAAQE,EAAgBa,EAAI2H,EAAKtF,EAAKuF,EAAKtF,EAAKuF,EAAKtF,EAIrE,GAFA1D,EAAKrB,IACLwB,EAAK8I,QACM3V,EAET,GADK4M,OACM5M,EAET,IADA8M,EAAK0E,QACMxR,EAET,GADK4M,OACM5M,EAET,IADAgN,EAs+MV,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA3wRQ,UA4wRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASvF,KAEpC6F,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAxgNMkJ,MACM5V,EAET,GADK4M,OACM5M,EAET,GADK+Q,OACM/Q,EAET,GADK4M,OACM5M,EAET,IADA6N,EAAKsG,QACMnU,EAAY,CA6BrB,IA5BAwV,EAAM,GACNtF,EAAM7E,IACNoK,EAAM7I,QACM5M,IACVmQ,EAAMlC,QACMjO,IACV0V,EAAM9I,QACM5M,IACVoQ,EAAM+D,QACMnU,EAEVkQ,EADAuF,EAAM,CAACA,EAAKtF,EAAKuF,EAAKtF,IAe5B/E,GAAc6E,EACdA,EAAMlQ,GAEDkQ,IAAQlQ,GACbwV,EAAIhJ,KAAK0D,GACTA,EAAM7E,IACNoK,EAAM7I,QACM5M,IACVmQ,EAAMlC,QACMjO,IACV0V,EAAM9I,QACM5M,IACVoQ,EAAM+D,QACMnU,EAEVkQ,EADAuF,EAAM,CAACA,EAAKtF,EAAKuF,EAAKtF,IAe5B/E,GAAc6E,EACdA,EAAMlQ,GAGNwV,IAAQxV,IACVkQ,EAAMtD,QACM5M,IACVyV,EAAMxE,QACMjR,GACK0M,EA75FlBmJ,EA85FgBhJ,EA95FTlM,EA85FiBkN,EA95FXjN,EA85Fe4U,GA95FxBvZ,EA85FgB6Q,GA75F/BtN,KAAOqW,EACT5Z,EAAE6Z,MAAQjV,GAAWF,EAAMC,GA65FX8L,EADAG,EA35FT5Q,IAs6FKoP,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,EA98FK,IAAS6V,EAAI5Z,EAAG0E,EAAMC,EAg9F9B8L,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAK8I,QACM3V,GACJ4M,OACM5M,IACT8M,EAAK0E,QACMxR,GACJ4M,OACM5M,IACTgN,EAAK+I,QACM/V,IACTgN,EAAK,MAEHA,IAAOhN,GACM0M,EACfG,EA39FA,SAASgJ,EAAI5Z,EAAGqV,GAGpB,OAFArV,EAAEuD,KAAOqW,EACT5Z,EAAE+Z,GAAO1E,EACFrV,EAw9FEga,CAAQpJ,EAAIC,EAAIE,GACrBN,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAK8I,QACM3V,GACJ4M,OACM5M,IACT8M,EAAKiE,QACM/Q,GACJ4M,OACM5M,IACTgN,EAAKmB,QACMnO,GACJ4M,OACM5M,GACJiR,OACMjR,GACJ4M,OACM5M,IACT6N,EAAKqD,QACMlR,IACT6N,EAAK,MAEHA,IAAO7N,IACTwV,EAAM5I,QACM5M,IACVkQ,EAAM6F,QACM/V,IACVkQ,EAAM,MAEJA,IAAQlQ,GACK0M,EACfG,EA3gGd,SAASgJ,EAAIzB,EAAM8B,EAAO5E,GAEhC,OADA8C,EAAK/E,aAAc,EACZ,CACLiC,KAAM8C,EACNhD,GAAI8E,EACJ1W,KAAMqW,EACNG,GAAI1E,GAqgGmB6E,CAAQtJ,EAAIG,EAAIa,EAAIqC,GACzBxD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KA+BrBqL,GAAcqB,EACdA,EAAK1M,KAKX,OAAO0M,EAhRE0J,MACMpW,GACM0M,EAEfA,EADaC,IAOftB,GAAcqB,EACdA,EAAK1M,IAIF0M,EAoQT,SAAS8E,KACP,IAAI9E,EAAIG,EAAQC,EAAgBI,EAvjGXjR,EAAGia,EAsoGxB,OA7EAxJ,EAAKrB,IACLwB,EAAKwJ,QACMrW,GACJ4M,OACM5M,IACT8M,EAAKoE,QACMlR,IACT8M,EAAK,MAEHA,IAAO9M,GACM0M,EAnkGGwJ,EAokGDpJ,EACjBJ,EADAG,EAnkGiB,SADF5Q,EAokGF4Q,GAnkGLxN,MACJpD,EAAEmV,GAAK8E,EACAja,GAEA,CACLuX,GAAIvX,EAAEuX,GACN3B,MAAO5V,EAAE4V,MACTT,GAAI8E,KA+jGV7K,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKkE,QACM/Q,GACJ4M,OACM5M,IACT8M,EAAKqB,QACMnO,GACJ4M,OACM5M,GACJiR,OACMjR,GACJ4M,OACM5M,IACTkN,EAAKgE,QACMlR,IACTkN,EAAK,MAEHA,IAAOlN,GACM0M,EAEfA,EADAG,EA1lGJ,SAASuH,EAAM8B,GAEnB,OADA9B,EAAK/E,aAAc,EACZ,CACLiC,KAAM8C,EACNhD,GAAI8E,GAslGOI,CAAQxJ,EAAII,KAGjB7B,GAAcqB,EACdA,EAAK1M,KAuBjBqL,GAAcqB,EACdA,EAAK1M,IAIF0M,EAGT,SAASiJ,KACP,IAAIjJ,EAAIG,EAAQC,EAiJhB,OA/IAJ,EAAKrB,IACLwB,EAkwLF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA14QQ,SA24QTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASjG,KAEpCuG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EApyLF6J,MACMvW,GACJ4M,OACM5M,IACT8M,EAAK0J,QACMxW,IACT8M,EAAK,MAEHA,IAAO9M,GACJ4M,OACM5M,GACJyW,OACMzW,GACM0M,EAEfA,EADAG,EAxoGsB,cAmpG1BxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAiwLJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA76QQ,UA86QTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAShG,KAEpCsG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAnyLAgK,MACM1W,GACJ4M,OACM5M,IACT8M,EAAK0J,QACMxW,IACT8M,EAAK,MAEHA,IAAO9M,GACJ4M,OACM5M,GACJyW,OACMzW,GACM0M,EAEfA,EADAG,EA7qGoB,eAwrGxBxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAgwLN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAh9QQ,SAi9QTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/F,KAEpCqG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAlyLEiK,MACM3W,GACJ4M,OACM5M,IACT8M,EAAK0J,QACMxW,IACT8M,EAAK,MAEHA,IAAO9M,GACJ4M,OACM5M,GACJyW,OACMzW,GACM0M,EAEfA,EADAG,EAltGkB,cA6tGtBxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EA+vLR,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAn/QQ,UAo/QTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9F,KAEpCoG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAjyLIkK,MACM5W,IACT6M,EAkyLV,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAthRQ,UAuhRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS7F,KAEpCmG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAp0LMmK,IAEHhK,IAAO7M,GACJ4M,OACM5M,IACT8M,EAAK2J,QACMzW,GACM0M,EAEfA,EADAG,EAAaA,EAnvGa,GAAG5N,cAAR,UA8vGzBoM,GAAcqB,EACdA,EAAK1M,MAMN0M,EAGT,SAAS2J,KACP,IAAI3J,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EA4HhC,OA1HAR,EAAKrB,IACLwB,EAAK+H,QACM5U,GACT2M,EAAKtB,IACLyB,EAAKF,QACM5M,IACT+M,EAAK8H,QACM7U,IACTgN,EAAKJ,QACM5M,IACTiN,EAAK2H,QACM5U,EAET2M,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB5B,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACT8M,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAK6H,QACM7U,IACTiN,EAAKL,QACM5M,IACTkN,EAAK0H,QACM5U,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEH8M,IAAO9M,GACM0M,EAEfA,EADAG,EAt0GM,SAASiK,EAASC,EAAInW,GAC1B,MAAMoW,EAAM,CAAExD,GAAI,KAAM3B,MAAOiF,GAK/B,OAJa,OAATlW,IACFoW,EAAIxD,GAAK,GAAGsD,KAAWC,EAAG,KAC1BC,EAAInF,MAAQjR,EAAK,IAEZoW,EAg0GJC,CAAQpK,EAAIF,EAAIG,KAGrBzB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAK+H,QACM5U,GACT2M,EAAKtB,IACLyB,EAAKF,QACM5M,IACT+M,EAAK8H,QACM7U,IACTgN,EAAKJ,QACM5M,IACTiN,EAAK2H,QACM5U,EAET2M,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB5B,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,IACT2M,EAAK,MAEHA,IAAO3M,GACM0M,EAEfA,EADAG,EAh3GM,SAASkK,EAAInW,GACjB,MAAMoW,EAAM,CAAExD,GAAI,KAAM3B,MAAOkF,GAK/B,OAJa,OAATnW,IACFoW,EAAIxD,GAAKuD,EACTC,EAAInF,MAAQjR,EAAK,IAEZoW,EA02GJE,CAAQrK,EAAIF,KAGjBtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,IAIF0M,EAGT,SAASqJ,KACP,IAAIrJ,EAAYI,EAyBhB,OAvBAJ,EAAKrB,GAy8KP,WACE,IAAIqB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAv2QQ,OAw2QTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASlG,KAEpCwG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA1+KFyK,KACMnX,GACJ4M,OACM5M,IACT8M,EAAKkE,QACMhR,GACM0M,EAEfA,EADaI,IAWjBzB,GAAcqB,EACdA,EAAK1M,GAGA0M,EAmNT,SAASiG,KACP,IAAIjG,EAAIG,EAAgBG,EAqCxB,OAnCAN,EAAKrB,IACLwB,EAAKsH,QACMnU,GACJ4M,OACM5M,GACJwQ,OACMxQ,GACJ4M,OACM5M,IACTgN,EAAKoK,QACMpX,GACM0M,EAEfA,EADAG,EAzmHG,CACLvR,KAwmHeuR,EAvmHfwK,wBAumHmBrK,KAmBzB3B,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS0K,KACP,IAAI1K,EAAIG,EAAQC,EAiDhB,OA/CAJ,EAAKrB,IACLwB,EAAKsH,QACMnU,IACM0M,EACfG,EAAaA,IAEfH,EAAKG,KACM7M,IACT0M,EAAKrB,IACLwB,EAAKkE,QACM/Q,GACJ4M,OACM5M,IACT8M,EAqCR,WACE,IAAIJ,EAAIG,EAAQC,EAAQE,EAAQE,EAEhCR,EAAKrB,IACLwB,EAAK+H,QACM5U,IACT6M,EAAK,MAEHA,IAAO7M,GACJ4M,OACM5M,IACT8M,EAAKwK,QACMtX,IACT8M,EAAK,MAEHA,IAAO9M,GACJ4M,OACM5M,IACTgN,EAAKoB,QACMpO,IACTgN,EAAK,MAEHA,IAAOhN,GACJ4M,OACM5M,IACTkN,EAwCd,WACE,IAAIR,EAAIG,EAAYE,EAAIC,EAAIC,EAAIC,EAAYsI,EAAKtF,EAAKuF,EAAKtF,EAE3DzD,EAAKrB,GAxuHO,UAyuHRxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASnL,IAEpCyL,IAAO7M,GACJ4M,OACM5M,GACJuX,OACMvX,GAlvHH,cAmvHFH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BvB,EAAKlN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEf0B,EAAK/M,EACmB,IAApB2L,IAAyBY,GAASlL,IAEpC0L,IAAO/M,IACTgN,EAAKJ,QACM5M,GA1vHP,cA2vHEH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BrB,EAAKpN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEf4B,EAAKjN,EACmB,IAApB2L,IAAyBY,GAASjL,IAEpC2L,IAAOjN,IACTkN,EAAKN,QACM5M,GACJwX,OACMxX,GACJ4M,OACM5M,GAtwHf,YAuwHUH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BkH,EAAM3V,EAAMwO,OAAOhD,GAAa,GAChCA,IAAe,IAEfmK,EAAMxV,EACkB,IAApB2L,IAAyBY,GAAShL,IAEpCiU,IAAQxV,IACVkQ,EAAMtD,QACM5M,GA9wHpB,QA+wHcH,EAAMwO,OAAOhD,GAAa,IAC5BoK,EAhxHZ,MAixHYpK,IAAe,IAEfoK,EAAMzV,EACkB,IAApB2L,IAAyBY,GAAS/K,IAEpCiU,IAAQzV,GACK0M,EAEfA,EADAG,EArxHX,sDAwxHWxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAWXqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GAt0HK,SAu0HNxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9K,IAEpCoL,IAAO7M,GACJ4M,OACM5M,GACJuX,OACMvX,IACT+M,EAAKH,QACM5M,IACTgN,EAAK+H,QACM/U,IACTiN,EAAKL,QACM5M,GAj2HX,cAk2HMH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BpB,EAAKrN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEf6B,EAAKlN,EACmB,IAApB2L,IAAyBY,GAASjL,IAEpC4L,IAAOlN,GACJ4M,OACM5M,GACJwX,OACMxX,IACTwV,EAAM5I,QACM5M,IACVkQ,EAAM6E,QACM/U,IACVyV,EAAM7I,QACM5M,GAx2HxB,cAy2HkBH,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/B6B,EAAMtQ,EAAMwO,OAAOhD,GAAa,GAChCA,IAAe,IAEf8E,EAAMnQ,EACkB,IAApB2L,IAAyBY,GAAS7K,IAEpCyO,IAAQnQ,GACK0M,EA/2HnB+K,EAg3HqBvH,EAAjBrD,EA/2Hf,gBA+2H4BG,EA/2HVhR,uBAAuByb,EAAEzb,kBAg3H5B0Q,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAuBjBqL,GAAcqB,EACdA,EAAK1M,KAuBjBqL,GAAcqB,EACdA,EAAK1M,IAp6HG,IAAYyX,EAw6HxB,OAAO/K,EA5PUgL,MACM1X,IACTkN,EAAK,MAEHA,IAAOlN,GACM0M,EAEfA,EADAG,EA1sHD,CACLvR,KAysHmBuR,EAxsHnB8K,YAwsHuB7K,EAvsHvBqC,QAusH2BnC,EAtsH3B4K,oBAssH+B1K,KAGzB7B,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAnGImL,MACM7X,IACT8M,EAAK,MAEHA,IAAO9M,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAEfA,EADAG,EAtpHC,CACLiL,qBAqpHiBhL,EAppHjBuC,aAAa,KA+pHbhE,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,IAIF0M,EA2RT,SAAS4K,KACP,IAAI5K,EAAoBM,EAqCxB,OAnCAN,EAAKrB,GAg/IP,WACE,IAAIqB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAvgQQ,cAwgQTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASpG,KAEpC0G,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA1hQ6B,cA6hQ7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAlhJFqL,KACM/X,GACJ4M,OACM5M,GACJqS,OACMrS,GACJ4M,OACM5M,IACTgN,EAAK6D,QACM7Q,GACM0M,EAEfA,EADaM,IAmBrB3B,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS0B,KACP,IAAI1B,EAAoBM,EAqCxB,OAnCAN,EAAKrB,GAm7KP,WACE,IAAIqB,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA17RQ,UA27RTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASlF,KAEpCwF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAp9KFsL,KACMhY,GACJ4M,OACM5M,GACJqS,OACMrS,GACJ4M,OACM5M,IACTgN,EA6BV,WACE,IAAIN,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKoL,QACMjY,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAK+K,QACMjY,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAK+K,QACMjY,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EACfG,EAAKnM,EAAQmM,EAAIF,GACjBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EA1GMwL,MACMlY,GACM0M,EAEfA,EADaM,IAmBrB3B,GAAcqB,EACdA,EAAK1M,GAGA0M,EAmFT,SAASuL,KACP,IAAIvL,EAAIG,EAAQC,EA+BhB,OA7BAJ,EAAKrB,IACLwB,EAAKmE,QACMhR,GACJ4M,OACM5M,IACT8M,EAqhLN,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA5oSQ,SA6oSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS5E,KAEpCkF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA/pS6B,SAkqS7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAxjLEyL,MACMnY,IACT8M,EA6+KR,WACE,IAAIJ,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAzmSQ,QA0mSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS7E,KAEpCmF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA5nS6B,QA+nS7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAhhLI0L,IAEHtL,IAAO9M,IACT8M,EAAK,MAEHA,IAAO9M,GACM0M,EAEfA,EADAG,EA1lIM,SAAS4K,EAAGpc,GAClB,MAAM2b,EAAM,CAAE1F,KAAMmG,EAAGpY,KAAM,OAE7B,MADU,SAANhE,IAAc2b,EAAI3X,KAAO,QACtB2X,EAulIFqB,CAAQxL,EAAIC,KAGjBzB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS+B,KACP,IAAI/B,EAOJ,OALAA,EAAKqI,QACM/U,IACT0M,EAAK4L,MAGA5L,EAsET,SAAS4F,KACP,IAAI5F,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKmE,QACMhR,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAK8D,QACMhR,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAK8D,QACMhR,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EAEfA,EADAG,EA/uIQ,SAASlM,EAAMC,GACnB,MAAM2X,EAAK,CAAElZ,KAAM,aAEnB,OADAkZ,EAAGvc,MAAQ6E,GAAWF,EAAMC,GACrB2X,EA4uINC,CAAQ3L,EAAIF,KAGjBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAASsE,KACP,IAAItE,EAsBJ,OApBAA,EAuBF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAK4L,QACMzY,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKuL,QACMzY,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKuL,QACMzY,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EACfG,EAAKnM,EAAQmM,EAAIF,GACjBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EApGFgM,MACM1Y,IACT0M,EAmSJ,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKrB,IACLwB,EAAK8L,QACM3Y,IACT6M,EAAK4D,MAEH5D,IAAO7M,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTgN,EAAK6D,QACM7Q,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAEfA,EADAG,EA3hJD,CACL1B,WAFarO,EA4hJM+P,EAzhJnB0H,UAyhJuBvH,EAxhJvB3N,KAAM,SACN8R,QAASrU,GAAK,SACduS,aAAa,KAijJnBhE,GAAcqB,EACdA,EAAK1M,GAxjJK,IAASlD,EA2jJrB,OAAO4P,EAxVAkM,MACM5Y,IACT0M,EAyVN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKgM,QACM7Y,EAAY,CA6BrB,GA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAK8L,QACM9Y,IACTiN,EAAKL,QACM5M,IACTkN,EAAK2L,QACM7Y,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEH8M,IAAO9M,EACT,KAAO8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAK8L,QACM9Y,IACTiN,EAAKL,QACM5M,IACTkN,EAAK2L,QACM7Y,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,QAIT2M,EAAK3M,EAEH2M,IAAO3M,GACM0M,EACfG,EA1nJSjL,GA0nJIiL,EAAIF,GACjBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EA1aEqM,MACM/Y,IACT0M,EA2aR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAIxB,GAFAN,EAAKrB,IACLwB,EAAKmM,QACMhZ,EAAY,CAiBrB,GAhBA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAK6L,QACM7Y,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,GAEH8M,IAAO9M,EACT,KAAO8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAK6L,QACM7Y,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,QAIT2M,EAAK3M,EAEH2M,IAAO3M,GACM0M,EACfG,EAnrJSoM,GAmrJIpM,EAAIF,EAnrJiB,GAAG,IAorJrCD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EApeIwM,MACMlZ,IACT0M,EAqeV,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKsM,QACMnZ,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKqM,QACMpZ,IACTgN,EAAKqM,QACMrZ,IACTiN,EAAKL,QACM5M,IACTkN,EAAKiM,QACMnZ,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKqM,QACMpZ,IACTgN,EAAKqM,QACMrZ,IACTiN,EAAKL,QACM5M,IACTkN,EAAKiM,QACMnZ,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EACfG,EAAKlL,EAAQkL,EAAIF,GACjBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAljBM4M,MACMtZ,IACT0M,EAAK6C,QACMvP,IACT0M,EAoId,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAQE,EAEhCR,EAAKrB,IACLwB,EAAKiI,QACM9U,GACJ4M,OACM5M,IACT8M,EAAK+D,QACM7Q,IACT+M,EAAKH,QACM5M,IACTgN,EAAKgI,QACMhV,GACM0M,EAEfA,EADAG,EAz5IG,CACL0M,WAw5IezM,EAv5IfzN,KAAM,QACN8R,QAAS,GACT9B,aAAa,KAw6InBhE,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAK2M,QACMxZ,IACT6M,EAAK4M,MAEH5M,IAAO7M,IACT6M,EAAK,MAEHA,IAAO7M,GACJ8U,OACM9U,IACT8M,EAAKF,QACM5M,IACT+M,EA0kFV,WACE,IAAIL,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAK6M,QACM1Z,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKwM,QACM1Z,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKwM,QACM1Z,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EACfG,EAAKnM,EAAQmM,EAAIF,GACjBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAvpFMiN,MACM3Z,IACTgN,EAAKJ,QACM5M,GACJgV,OACMhV,GACM0M,EACfG,EA77IF,SAAS/P,EAAG1B,GAClB,MAAO,CACL+P,WAAYrO,EACZyc,WAAYne,EAAEwe,IAAI5e,IAAK,CAAGsW,KAAMtW,EAAGoW,GAAI,QACvC/R,KAAM,QACN8R,QAASrU,GAAK,QACduS,aAAa,GAu7IFwK,CAAQhN,EAAIE,GACjBL,EAAKG,IAsBfxB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAK2M,QACMxZ,IACT6M,EAAK4M,MAEH5M,IAAO7M,IACT6M,EAAK,MAEHA,IAAO7M,GACJ4M,OACM5M,IACT8M,EAAKgI,QACM9U,IACT8M,EAAKiE,MAEHjE,IAAO9M,IACT+M,EAAKH,QACM5M,IACTgN,EAAKgE,QACMhR,GACJ4M,OACM5M,IACTkN,EAAK8H,QACMhV,IACTkN,EAAK+D,MAEH/D,IAAOlN,GACM0M,EACfG,EA3+IN,SAAS/P,EAAG1B,GAClB,MAAO,CACL+P,WAAYrO,EACZyX,UAAWnZ,EACXiE,KAAM,QACN8R,QAASrU,GAAK,QACduS,aAAa,GAq+IEyK,CAAQjN,EAAIG,GACjBN,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAKX,OAAO0M,EAtRUqN,IAQVrN,EAmFT,SAAS+L,KACP,IAAI/L,EAAYI,EAqChB,OAnCAJ,EAAKrB,GACA0F,OACM/Q,GACJ4M,OACM5M,IACT8M,EAAK+D,QACM7Q,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAEfA,EADaI,IAmBrBzB,GAAcqB,EACdA,EAAK1M,GAGA0M,EAgbT,SAASyM,KACP,IAAIzM,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKmN,QACMha,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKqM,QACMpZ,IACTgN,EAAKwK,QACMxX,IACTiN,EAAKL,QACM5M,IACTkN,EAAK8M,QACMha,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKqM,QACMpZ,IACTgN,EAAKwK,QACMxX,IACTiN,EAAKL,QACM5M,IACTkN,EAAK8M,QACMha,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EAEfA,EADAG,EAAKlL,EAAQkL,EAAIF,KAGjBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAASsN,KACP,IAAItN,EAAIG,EAAIF,EAAIG,EAAIC,EAqEpB,OAnEAL,EAAKuN,QACMja,IACT0M,EA+HJ,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKrB,IACLwB,EAiDF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKrB,GACLwB,EAAKxB,IACLsB,EAAKuN,QACMla,IACT8M,EAAKF,QACM5M,IACT+M,EAAKoN,QACMna,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlB1B,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAAK9K,EAAQ8K,KAEfH,EAAKG,KACM7M,IACT0M,EAAKyN,MAGP,OAAOzN,EAnFF0N,MACMpa,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTgN,EAAKmB,QACMnO,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAt+JRmJ,EAu+JMhJ,GAv+JFuH,EAu+JMpH,GAt+JpBqC,aAAc,EAs+JXxC,EAr+JDoM,GAAgBpD,EAAIzB,GAs+JnB1H,EAAKG,IA0BjBxB,GAAcqB,EACdA,EAAK1M,GAngKK,IAAS6V,EAAIzB,EAsgKzB,OAAO1H,EAjLA2N,MACMra,IACT0M,EAAKrB,IACLwB,EAAKqN,QACMla,IACT6M,EAAKxB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBsB,EAx2JI,IAy2JJtB,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAAS1K,IAEpC8K,IAAO3M,GACT8M,EAAKzB,GACLM,KACsC,KAAlC9L,EAAMd,WAAWsM,KACnB0B,EAh3JE,IAi3JF1B,OAEA0B,EAAK/M,EACmB,IAApB2L,IAAyBY,GAASzK,IAExC6J,KACIoB,IAAO/M,EACT8M,OAAK,GAELzB,GAAcyB,EACdA,EAAK9M,GAEH8M,IAAO9M,EAET6M,EADAF,EAAK,CAACA,EAAIG,IAGVzB,GAAcwB,EACdA,EAAK7M,KAGPqL,GAAcwB,EACdA,EAAK7M,IAGL6M,IAAO7M,IACT2M,EAAKC,QACM5M,IACT8M,EAAKkN,QACMha,GACM0M,EAEfA,EADAG,EA54JKoM,GAAgB,MA44JRnM,KAWjBzB,GAAcqB,EACdA,EAAK1M,IAKJ0M,EAGT,SAASuN,KACP,IAAIvN,EAAIG,EAAQC,EAAIC,EAAIC,EA/5JHsN,EAAMC,EAs9J3B,OArDA7N,EAAKrB,IACLwB,EAAK2N,QACMxa,GACJ4M,OACM5M,GACT8M,EAAKzB,GACLM,KACAoB,EAAKyK,KACL7L,KACIoB,IAAO/M,EACT8M,OAAK,GAELzB,GAAcyB,EACdA,EAAK9M,GAEH8M,IAAO9M,IACT+M,EAAKH,QACM5M,IACTgN,EAgIV,WACE,IAAIN,GAEJA,EAiBF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAE5BP,EAAKrB,GACLwB,EAAK,GACLF,EAAKtB,IACLyB,EAAKF,QACM5M,IACT+M,EAAK0N,QACMza,IACTgN,EAAKJ,QACM5M,IACTiN,EAAKuN,QACMxa,EAET2M,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB5B,GAAcsB,EACdA,EAAK3M,GAEP,GAAI2M,IAAO3M,EACT,KAAO2M,IAAO3M,GACZ6M,EAAGL,KAAKG,GACRA,EAAKtB,IACLyB,EAAKF,QACM5M,IACT+M,EAAK0N,QACMza,IACTgN,EAAKJ,QACM5M,IACTiN,EAAKuN,QACMxa,EAET2M,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB5B,GAAcsB,EACdA,EAAK3M,QAIT6M,EAAK7M,EAEH6M,IAAO7M,IACM0M,EACfG,EAhoKa,CAAExN,KAAM,aAAcuB,KAgoKrBiM,IAIhB,OAFAH,EAAKG,EAvFA6N,MACM1a,IACT0M,EAwaJ,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKrB,IACLwB,EAAK8N,QACM3a,GACJ4M,OACM5M,IACT8M,EAAKiE,QACM/Q,GACJ4M,OACM5M,IACTgN,EAAKsF,QACMtS,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAEfA,EADAG,EAv8KC,CAAEgJ,GAu8KWhJ,EAv8KH+N,MAu8KO5N,KA2B9B3B,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAK8N,QACM3a,GACJ4M,OACM5M,IACT8M,EAAK+N,QACM7a,GACM0M,EACfG,EA5+KK,SAASgJ,EAAI4B,GAClB,MAAO,CAAE5B,GAAIA,EAAI+E,MAAOnD,GA2+KnBqD,CAASjO,EAAIC,GAClBJ,EAAKG,IAUTxB,GAAcqB,EACdA,EAAK1M,IAIT,OAAO0M,EAlfAqO,MACM/a,IACT0M,EAqON,WACE,IAAIA,EAAIG,EAAQC,EAAgBI,EAEhCR,EAAKrB,IACLwB,EAiDF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKrB,GACLwB,EAAKxB,IACLsB,EAAKuN,QACMla,IACT8M,EAAKF,QACM5M,IACT+M,EAAKwK,QACMvX,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlB1B,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAAK9K,EAAQ8K,KAEfH,EAAKG,KACM7M,IACT0M,EAAK6K,MAGP,OAAO7K,EAnFFsO,MACMhb,GACJ4M,OACM5M,IACT8M,EAAK0N,QACMxa,GACJ4M,OACM5M,GACJwX,OACMxX,GACJ4M,OACM5M,IACTkN,EAAKsN,QACMxa,GACM0M,EAEfA,EADAG,EAlxKC,CACLgJ,GAixKkBhJ,EAhxKlB+N,MAAO,CACLvb,KAAM,YACNrD,MAAO,CA8wKa8Q,EAAII,OA2BlC7B,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAvREuO,MACMjb,IACT0M,EA0JR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKrB,IACLwB,EAAKqO,QACMlb,IACT2M,EAAKC,QACM5M,IACT8M,EAAK0N,QACMxa,GACM0M,EAEfA,EADAG,EAvsKS,CAAEgJ,GAAI,KAAM+E,MAusKP9N,KAWlBzB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GACLwB,EAAKxB,IACLsB,EAAKuO,QACMlb,IACT8M,EAAKF,QACM5M,IACT+M,EAAKmN,QACMla,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlB1B,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACT2M,EAAKC,QACM5M,IACT8M,EAAK0N,QACMxa,GACM0M,EACfG,EAhvKK,SAAS+N,GACd,MAAO,CAAE/E,GAAI,SAAU+E,MAAOA,GA+uKzBO,CAASrO,GACdJ,EAAKG,IAUTxB,GAAcqB,EACdA,EAAK1M,IAIT,OAAO0M,EAhOI0O,MACMpb,IACT0M,EAqYV,WACE,IAAIA,EAAIG,EAAQC,EAEhBJ,EAAKrB,IACLwB,EA9EF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAEpBL,EAAKrB,GACLwB,EAAKxB,IACLsB,EAAKuN,QACMla,IACT8M,EAAKF,QACM5M,IACT+M,EAAKsO,QACMrb,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlB1B,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAAK9K,EAAQ8K,KAEfH,EAAKG,KACM7M,IACT0M,EAAK2O,MAGP,OAAO3O,EA4CF4O,MACMtb,GACJ4M,OACM5M,IACT8M,EAAKmN,QACMja,GACM0M,EAEfA,EADAG,EAr6KS,CAAEgJ,GAq6KGhJ,EAr6KK+N,MAq6KD9N,KAWtBzB,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA/ZM6O,IAMb,OAAO7O,EAjJM8O,MACMxb,IACTgN,EAAK,MAEHA,IAAOhN,GACM0M,EAx7JJ4N,EAy7JEzN,EACbH,EADAG,EAx7JS,QADQ0N,EAy7JAvN,GAx7JKsN,EACH,eAAZC,EAAGlb,KAA8BuC,GAAsB0Y,EAAMC,EAAG3Z,MAC7D6a,GAAiBlB,EAAG1E,GAAIyE,EAAMC,EAAGK,SAy7J3CvP,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKmO,QACM7a,IACT0M,EAAKgP,MAIFhP,EA4LT,SAAS+N,KACP,IAAI/N,EAgEJ,MAtsKa,OAwoKT7M,EAAMwO,OAAOhD,GAAa,IAC5BqB,EAzoKW,KA0oKXrB,IAAe,IAEfqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAStK,IAEpCyK,IAAO1M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBqB,EA/oKS,IAgpKTrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASrK,IAEpCwK,IAAO1M,IAnpKA,OAopKLH,EAAMwO,OAAOhD,GAAa,IAC5BqB,EArpKO,KAspKPrB,IAAe,IAEfqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASpK,IAEpCuK,IAAO1M,IAzpKF,OA0pKHH,EAAMwO,OAAOhD,GAAa,IAC5BqB,EA3pKK,KA4pKLrB,IAAe,IAEfqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASnK,IAEpCsK,IAAO1M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBqB,EAjqKG,IAkqKHrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASlK,IAEpCqK,IAAO1M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBqB,EAnsKA,IAosKArB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASzK,IAEpC4K,IAAO1M,IA7qKR,OA8qKGH,EAAMwO,OAAOhD,GAAa,IAC5BqB,EA/qKD,KAgrKCrB,IAAe,IAEfqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASjK,UAS7CoK,EA2MT,SAASiO,KACP,IAAIjO,EAAIG,EAAIF,EAAIG,EAAIC,EAiCpB,OA/BAL,EAAKrB,GACLwB,EAAKxB,IACLsB,EAAKuN,QACMla,IACT8M,EAAKF,QACM5M,IACT+M,EAAK4O,QACM3b,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAWlB1B,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAAK9K,EAAQ8K,KAEfH,EAAKG,KACM7M,IACT0M,EAAKiP,MAGAjP,EA6GT,SAAS8N,KACP,IAAI9N,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAK+O,QACM5b,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKgM,QACMhZ,IACTiN,EAAKL,QACM5M,IACTkN,EAAK0O,QACM5b,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKgM,QACMhZ,IACTiN,EAAKL,QACM5M,IACTkN,EAAK0O,QACM5b,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EAEfA,EADAG,EAAKlL,EAAQkL,EAAIF,KAGjBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAASsM,KACP,IAAItM,EAmBJ,OAjBsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAhlLW,IAilLXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAShK,IAEpCmK,IAAO1M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBqB,EAtlLS,IAulLTrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS/J,KAInCkK,EAGT,SAASkP,KACP,IAAIlP,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKgM,QACM7Y,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAK6O,QACM7b,IACTiN,EAAKL,QACM5M,IACTkN,EAAK2L,QACM7Y,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAK6O,QACM7b,IACTiN,EAAKL,QACM5M,IACTkN,EAAK2L,QACM7Y,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EAEfA,EADAG,EAhqLWjL,GAgqLGiL,EAAIF,KAGlBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAASmP,KACP,IAAInP,EA4BJ,OA1BsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAhrLW,IAirLXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS9J,IAEpCiK,IAAO1M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBqB,EAtrLS,IAurLTrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS7J,IAEpCgK,IAAO1M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBqB,EA5rLO,IA6rLPrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS5J,MAKrC+J,EAGT,SAASmM,KACP,IAAInM,EAAYI,EAnsLMgP,EAJArE,EAkyLtB,OAzFA/K,EAAKgN,QACM1Z,IACT0M,EA8sBJ,WACE,IAAIA,GAEJA,EA0KF,WACE,IAAIA,EAAIG,EAAgBG,EAAgBa,EAExCnB,EAAKrB,IACLwB,EA2zGF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA7gTQ,UA8gTTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASjE,KAEpCuE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAhiT6B,UAmiT7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA91GFqP,MACM/b,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTgN,EAwDV,WACE,IAAIN,EAAIG,EAAQC,EAEhBJ,EAAKrB,IACLwB,EAqCF,WACE,IAAIH,EAAIG,EAERH,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EA9rNW,IA+rNXxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9J,IAEpCoK,IAAO7M,IACM0M,EACfG,EA7lN+B,CAAExN,KAAM,OAAQrD,MAAO,MAimNxD,OAFA0Q,EAAKG,EApDAmP,MACMhc,IACM0M,EACfG,EAhjNgC,CAAEyE,KAgjNpBzE,KAEhBH,EAAKG,KACM7M,IACT0M,EAAKrB,IACLwB,EAAK8C,QACM3P,IACT6M,EAAK,MAEHA,IAAO7M,GACJ4M,OACM5M,IACT8M,EAAK4O,QACM1b,GACM0M,EAEfA,EADAG,EA9jN6B,CAAE6G,SA8jNjB7G,EA9jN8ByE,KA8jN1BxE,KAWtBzB,GAAcqB,EACdA,EAAK1M,IAIT,OAAO0M,EA9FMuP,MACMjc,GACJ4M,OACM5M,GACJiR,OACMjR,GACJ4M,OACM5M,IACT6N,EAAKqO,QACMlc,IACT6N,EAAK,MAEHA,IAAO7N,GACM0M,EAEfA,EADAG,EAtgNH,CACLxN,KAAM,YACN/D,KAogNsBuR,EAngNtBsP,KAmgN0BnP,EAlgN1BoP,KAkgN8BvO,KAGtBxC,GAAcqB,EACdA,EAAK1M,KA+BrBqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA3OF2P,MACMrc,IACT0M,EAMJ,WACE,IAAIA,EAAIG,EAAgBG,EAExBN,EAAKrB,IACLwB,EAiDF,WACE,IAAIH,GAEJA,EA2hHF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAtnTQ,QAunTTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9D,KAEpCoE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAzoT6B,QA4oT7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA9jHF4P,MACMtc,IACT0M,EA68GJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAhjTQ,QAijTTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAShE,KAEpCsE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAnkT6B,QAskT7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAh/GA6P,MACMvc,IACT0M,EAi/GN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAnlTQ,QAolTTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/D,KAEpCqE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAtmT6B,QAymT7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAphHE8P,MACMxc,IACT0M,EA2jHR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAzpTQ,QA0pTTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS7D,KAEpCmE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA5qT6B,QA+qT7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA9lHI+P,IAKX,OAAO/P,EA/DFgQ,MACM1c,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTgN,EAAKwN,QACMxa,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAEfA,EADAG,EAl3MC,CACLxN,KAAM,YACN/D,KAg3MkBuR,EA/2MlBsP,KAAM,CACJ7K,KA82MoBtE,MA2B9B3B,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAxDAiQ,IAGP,OAAOjQ,EAttBAkQ,MACM5c,IACT0M,EA0/BN,WACE,IAAIA,EAAIG,EAAgBG,EAAQE,EAAQW,EAExCnB,EAAKrB,IACLwB,EAsHF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAE5BP,EAAKrB,IACLwB,EAAK+H,QACM5U,GACT2M,EAAKtB,IACLyB,EAAKF,QACM5M,IACT+M,EAAK8H,QACM7U,IACTgN,EAAKJ,QACM5M,IACTiN,EAAK2H,QACM5U,EAET2M,EADAG,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB5B,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,IACT2M,EAAK,MAEHA,IAAO3M,GACM0M,EACfG,EAnvNS,SAASkK,EAAInW,GAClB,IAAItF,EAAOyb,EAIX,OAHa,OAATnW,IACFtF,EAAO,GAAGyb,KAAMnW,EAAK,MAEhBtF,EA8uNNuhB,CAAShQ,EAAIF,GAClBD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAvKFoQ,MACM9c,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTgN,EAAKsF,QACMtS,IACTgN,EAAK,MAEHA,IAAOhN,GACJ4M,OACM5M,IACTkN,EAAK+D,QACMjR,GACJ4M,OACM5M,IACT6N,EAAKqO,QACMlc,IACT6N,EAAK,MAEHA,IAAO7N,GACM0M,EAEfA,EADAG,EA/nNH,CACLxN,KAAM,WACN/D,KA6nNsBuR,EA5nNtBsP,KA4nN0BnP,GA5nNb,CAAE3N,KAAM,YAAarD,MAAO,IACzCogB,KA2nN8BvO,KAGtBxC,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,KAebqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAyGJ,WACE,IAAIH,GAEJA,EAymJF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA9+VQ,iBA++VTxL,EAAMwO,OAAOhD,GAAa,IAAIiD,eAChCzB,EAAKhN,EAAMwO,OAAOhD,GAAa,IAC/BA,IAAe,KAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/C,KAEpCqD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAjgW6B,iBAogW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA5oJFqQ,MACM/c,IACT0M,EA67JJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAzyWQ,iBA0yWTxL,EAAMwO,OAAOhD,GAAa,IAAIiD,eAChCzB,EAAKhN,EAAMwO,OAAOhD,GAAa,IAC/BA,IAAe,KAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASvC,KAEpC6C,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA5zW6B,iBA+zW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAh+JAsQ,MACMhd,IACT0M,EAAKuQ,MAIT,OAAOvQ,EApHAwQ,MACMld,GACJ4M,OACM5M,GACJ+Q,OACM/Q,GACJ4M,OACM5M,IACTgN,EAAKiE,QACMjR,GACJ4M,OACM5M,IACTkN,EAAKgP,QACMlc,IACTkN,EAAK,MAEHA,IAAOlN,GACM0M,EACfG,EAlrNH,SAASvR,EAAM6hB,GACpB,MAAO,CACL9d,KAAM,WACN/D,KAAMA,EACN6gB,KAAM,CAAE9c,KAAM,YAAarD,MAAO,IAClCogB,KAAMe,GA6qNKC,CAASvQ,EAAIK,GAClBR,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAuBjBqL,GAAcqB,EACdA,EAAK1M,IAIT,OAAO0M,EAjnCE2Q,MACMrd,IACT0M,EAsFR,WACE,IAAIA,EAAIG,EAAQC,EAAQE,EAExBN,EAAKrB,IACLwB,EAowLF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GApjWQ,aAqjWTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9C,KAEpCoD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAvkW6B,aA0kW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAvyLF4Q,MACMtd,GACJ4M,OACM5M,IACT8M,EAAKkE,QACMhR,GACJ4M,OACM5M,IACTgN,EAomOV,WACE,IAAIN,GAEJA,EAr0CF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAvlWQ,SAwlWTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS7C,KAEpCmD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA1mW6B,SA6mW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAkyCF6Q,MACMvd,IACT0M,EAjyCJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA1nWQ,UA2nWTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS5C,KAEpCkD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA7oW6B,UAgpW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA8vCA8Q,MACMxd,IACT0M,EA7vCN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA7pWQ,QA8pWTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS3C,KAEpCiD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAhrW6B,QAmrW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA0tCE+Q,MACMzd,IACT0M,EAztCR,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAhsWQ,SAisWTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS1C,KAEpCgD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAntW6B,SAstW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAsrCIgR,MACM1d,IACT0M,EArrCV,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAnuWQ,WAouWTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASzC,KAEpC+C,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAtvW6B,WAyvW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAkpCMiR,MACM3d,IACT0M,EAjpCZ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAtwWQ,WAuwWTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASxC,KAEpC8C,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAzxW6B,WA4xW7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA8mCQkR,IAOf,OAAOlR,EAxnOMmR,MACM7d,GACM0M,EACfG,EA3yLK,CACLxN,KAAM,WACNiS,KAyyLcxE,EAxyLdgR,KAwyLkB9Q,EAxyLVsB,eAyyLR5B,EAAKG,IAkBbxB,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA5HIqR,MACM/d,IACT0M,EAAKgP,QACM1b,IACT0M,EAAK4L,QACMtY,IACT0M,EAAKrB,GACA0F,OACM/Q,GACJ4M,OACM5M,IACT8M,EAAKkE,QACMhR,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,GAhuLf+K,EAiuLc3K,GAhuL1BuC,aAAc,EAiuLF3C,EAhuLP+K,IAkvLDpM,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GACA0F,OACM/Q,GACJ4M,OACM5M,IACT8M,EAAKwF,QACMtS,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,GA/vLjBoP,EAgwLgBhP,GA/vLvBuC,aAAc,EAgwLL3C,EA/vLPoP,IAixLDzQ,GAAcqB,EACdA,EAAK1M,KAUd0M,EA4CT,SAASgP,KACP,IAAIhP,EAAIG,EAAgBG,EAh0LF0H,EAAKsJ,EA82L3B,OA5CAtR,EAAKrB,IACLwB,EAAK+H,QACM5U,GACJ4M,OACM5M,GACJ6U,OACM7U,GACJ4M,OACM5M,IACTgN,EA0YV,WACE,IAAIN,EAAIG,EAERH,EAAKrB,IACLwB,EAAKoR,QACMje,IACM0M,EACfG,EAAcA,IAEhBH,EAAKG,KACM7M,IACT0M,EAAK4I,MAGP,OAAO5I,EAxZMwR,MACMle,GACM0M,EA70LHgI,EA80LE7H,EA90LGmR,EA80LChR,EA70LpBS,GAAW8F,IAAI,WAAWmB,MAAQsJ,KA80LhCtR,EADAG,EA50LK,CACLxN,KAAM,aACNwS,MAAO6C,EACPlJ,OAAQwS,KA41LhB3S,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKsR,QACMne,IACM0M,EACfG,EAj2LS,SAASmR,GAEd,OADAvQ,GAAW8F,IAAI,iBAAiByK,GACzB,CACL3e,KAAM,aACNwS,MAAO,KACPrG,OAAQwS,GA41LTI,CAASvR,IAEhBH,EAAKG,GAGAH,EAmFT,SAASkI,KACP,IAAIlI,EAAIG,EAkCR,OAhCAH,EAAKrB,IACLwB,EAAKsH,QACMnU,GACMqL,IACVzI,EAASiK,GAEP7M,OAEA,KAEIA,GACM0M,EAEfA,EADAG,EAAcA,IAGdxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKyI,QACMtV,IACM0M,EACfG,EAAcA,GAEhBH,EAAKG,GAGAH,EAyCT,SAAS4I,KACP,IAAI5I,EAUJ,OARAA,EAWF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EAxgMW,IAygMXxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASzJ,IAExC,GAAI+J,IAAO7M,EAAY,CASrB,GARA2M,EAAK,GACD5J,EAASsb,KAAKxe,EAAMye,OAAOjT,MAC7ByB,EAAKjN,EAAMye,OAAOjT,IAClBA,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASvJ,IAEpC8J,IAAO9M,EACT,KAAO8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACJ/J,EAASsb,KAAKxe,EAAMye,OAAOjT,MAC7ByB,EAAKjN,EAAMye,OAAOjT,IAClBA,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASvJ,SAI1C2J,EAAK3M,EAEH2M,IAAO3M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnByB,EAviMO,IAwiMPzB,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASzJ,IAEpCgK,IAAO9M,GACM0M,EACfG,EAAK3J,EAASyJ,GACdD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAtEF6R,MACMve,IACT0M,EAuEJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EAjkMW,IAkkMXxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASnJ,IAExC,GAAIyJ,IAAO7M,EAAY,CASrB,GARA2M,EAAK,GACDtJ,EAASgb,KAAKxe,EAAMye,OAAOjT,MAC7ByB,EAAKjN,EAAMye,OAAOjT,IAClBA,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASjJ,IAEpCwJ,IAAO9M,EACT,KAAO8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACJzJ,EAASgb,KAAKxe,EAAMye,OAAOjT,MAC7ByB,EAAKjN,EAAMye,OAAOjT,IAClBA,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASjJ,SAI1CqJ,EAAK3M,EAEH2M,IAAO3M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnByB,EAhmMO,IAimMPzB,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAASnJ,IAEpC0J,IAAO9M,GACM0M,EACfG,EAAK3J,EAASyJ,GACdD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAlIA8R,MACMxe,IACT0M,EAmIN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EA3nMW,IA4nMXxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAShJ,IAExC,GAAIsJ,IAAO7M,EAAY,CASrB,GARA2M,EAAK,GACDnJ,EAAS6a,KAAKxe,EAAMye,OAAOjT,MAC7ByB,EAAKjN,EAAMye,OAAOjT,IAClBA,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAAS9I,IAEpCqJ,IAAO9M,EACT,KAAO8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACJtJ,EAAS6a,KAAKxe,EAAMye,OAAOjT,MAC7ByB,EAAKjN,EAAMye,OAAOjT,IAClBA,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAAS9I,SAI1CkJ,EAAK3M,EAEH2M,IAAO3M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnByB,EA1pMO,IA2pMPzB,OAEAyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAAShJ,IAEpCuJ,IAAO9M,GACM0M,EACfG,EAAK3J,EAASyJ,GACdD,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EA9LE+R,IAIF/R,EA8MT,SAASyR,KACP,IAAIzR,EAAIG,EA4BR,OA1BAH,EAAKrB,IACLwB,EAAKoR,QACMje,GACMqL,IACVzI,EAASiK,GAEP7M,OAEA,KAEIA,GACM0M,EAEfA,EADAG,EAAcA,IAGdxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAK4I,MAGA5I,EAGT,SAASuR,KACP,IAAIvR,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKrB,IACLwB,EAAK0B,QACMvO,EAAY,CAGrB,IAFA2M,EAAK,GACLG,EAAK4R,KACE5R,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAK4R,KAEH/R,IAAO3M,GACM0M,EAEfA,EADAG,EAAKnJ,EAASmJ,EAAIF,KAGlBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAASyH,KACP,IAAIzH,EAAIG,EAAIF,EAAIG,EAIhB,GAFAJ,EAAKrB,IACLwB,EAAK0B,QACMvO,EAAY,CAGrB,IAFA2M,EAAK,GACLG,EAAK6R,KACE7R,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAK6R,KAEHhS,IAAO3M,GACM0M,EAEfA,EADAG,EAAKnJ,EAASmJ,EAAIF,KAGlBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAAS6B,KACP,IAAI7B,EAUJ,OARI/I,EAAS0a,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS3I,KAGjC8I,EAGT,SAASiS,KACP,IAAIjS,EAUJ,OARI7I,GAASwa,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASzI,KAGjC4I,EAGT,SAASgS,KACP,IAAIhS,EAUJ,OARI3I,GAASsa,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASvI,KAGjC0I,EAGT,SAAS4L,KACP,IAAI5L,EAAIG,EAAIF,EAAIG,EA8BhB,OA5BAJ,EAAKrB,GACLwB,EAAKxB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBsB,EA9zMW,IA+zMXtB,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAAStI,KAEpC0I,IAAO3M,IACT8M,EAAKqH,QACMnU,EAET6M,EADAF,EAAK,CAACA,EAAIG,IAOZzB,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACM0M,EACfG,EAh1Ma,CAAExN,KAAM,QAASrD,MAg1MhB6Q,EAh1MyB,KAk1MzCH,EAAKG,EAsFP,SAASqP,KACP,IAAIxP,EAAYI,EAAQE,EAAQE,EAwFhC,OAtFAR,EAAKrB,GACAuT,OACM5e,GACJ4M,OACM5M,IACT8M,EAAKsK,QACMpX,GACM0M,EAEfA,EAx6MO,CACLrN,KAAM,SACNgY,wBAq6MYvK,KAWlBzB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GACAuT,OACM5e,GACJ4M,OACM5M,IACT8M,EAAKiE,QACM/Q,GACJ4M,OACM5M,IACTgN,EAAKsK,QACMtX,GACJ4M,OACM5M,IACTkN,EAAKkB,QACMpO,IACTkN,EAAK,MAEHA,IAAOlN,GACJ4M,OACM5M,GACJiR,OACMjR,GACM0M,EAEfA,EAx8MP,CACLiL,YAs8M0B3K,EAr8M1BmC,QAq8M8BjC,KAWtB7B,GAAcqB,EACdA,EAAK1M,KAuBjBqL,GAAcqB,EACdA,EAAK1M,IAIF0M,EAgUT,SAASgN,KACP,IAAIhN,EAgBJ,OAdAA,EAAKmO,QACM7a,IACT0M,EAAKqI,QACM/U,IACT0M,EAyHN,WACE,IAAIA,EAAIG,EAERH,EAAKrB,IACLwB,EA65BF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAzqPQ,SA0qPTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASvG,KAEpC6G,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA/7BFmS,MACM7e,IACM0M,EACfG,EAr4Na,CAAExN,KAAM,OAAQrD,OAAO,KAu4NtC0Q,EAAKG,KACM7M,IACT0M,EAAKrB,IACLwB,EA+9BJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GA/uPQ,UAgvPTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAStG,KAEpC4G,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAjgCAoS,MACM9e,IACM0M,EACfG,EA14NW,CAAExN,KAAM,OAAQrD,OAAO,IA44NpC0Q,EAAKG,GAGP,OAAOH,EA7IEqS,MACM/e,IACT0M,EA2FR,WACE,IAAIA,EAAIG,EAERH,EAAKrB,IACLwB,EA00BF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,GAhkPQ,SAikPTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASxG,KAEpC8G,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EA52BFsS,MACMhf,IACM0M,EACfG,EAl3Na,CAAExN,KAAM,OAAQrD,MAAO,OAs3NtC,OAFA0Q,EAAKG,EApGMoS,MACMjf,IACT0M,EA6OV,WACE,IAAIA,EAAIG,EAAQC,EAAIC,EAAIC,EAAIC,EAAQa,EAEpCpB,EAAKrB,IACLwB,EAAKqS,QACMlf,IACT6M,EAAKsS,QACMnf,IACT6M,EAAKuS,MAGT,GAAIvS,IAAO7M,EAET,GADK4M,OACM5M,EAAY,CASrB,GARA8M,EAAKzB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnB0B,EA/lOO,IAgmOP1B,OAEA0B,EAAK/M,EACmB,IAApB2L,IAAyBY,GAASnJ,IAEpC2J,IAAO/M,EAAY,CAGrB,IAFAgN,EAAK,GACLC,EAAKoS,KACEpS,IAAOjN,GACZgN,EAAGR,KAAKS,GACRA,EAAKoS,KAEHrS,IAAOhN,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnB4B,EA9mOG,IA+mOH5B,OAEA4B,EAAKjN,EACmB,IAApB2L,IAAyBY,GAASnJ,IAEpC6J,IAAOjN,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,IAGd5B,GAAcyB,EACdA,EAAK9M,KAGPqL,GAAcyB,EACdA,EAAK9M,QAGPqL,GAAcyB,EACdA,EAAK9M,EAEH8M,IAAO9M,GACM0M,EAhiOOvI,EAiiOJ2I,EAAlBD,EAhiOS,CACLxN,KA+hOUwN,EA/hOCyB,cACXtS,MAAOmI,EAAG,GAAG3E,KAAK,KA+hOtBkN,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,OAGPqL,GAAcqB,EACdA,EAAK1M,EA7iOM,IAAemE,EA+iOxBuI,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKoQ,QACMjd,GACJ4M,OACM5M,IACT8M,EAAKiE,QACM/Q,IACT8M,EAAK,MAEHA,IAAO9M,IACT+M,EAAKH,QACM5M,IACTgN,EAAKiE,QACMjR,IACTgN,EAAK,MAEHA,IAAOhN,GACMqL,IAGb4B,GAFFA,EA5jOC,SAAS5N,EAAMigB,EAAIC,GAAM,GAAID,GAAMC,EAAI,OAAO,EA4jO1CC,CAAS3S,EAAIC,EAAIE,IAEfhN,OAEA,KAEIA,GACJ4M,OACM5M,GAnkOZ,gCAokOOH,EAAMwO,OAAOhD,GAAa,IAAIiD,eAChCR,EAAKjO,EAAMwO,OAAOhD,GAAa,IAC/BA,IAAe,KAEfyC,EAAK9N,EACmB,IAApB2L,IAAyBY,GAASnI,KAEpC0J,IAAO9N,IACT8N,EAAK,MAEHA,IAAO9N,GACM0M,EACfG,EA9kOL,SAASxN,EAAMigB,EAAIC,EAAIE,GAC5B,MAAO,CACLpgB,KAAM,SACNrD,OAAQyjB,EAAK,GAAGpgB,KAAQogB,IAAOpgB,GAAMiP,eA2kOxBoR,CAAS7S,EAAIC,EAAIE,EAAIc,GAC1BpB,EAAKG,IAELxB,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,KAOTqL,GAAcqB,EACdA,EAAK1M,IAIT,OAAO0M,EA7XMiT,IAMNjT,EAsIT,SAASmO,KACP,IAAInO,EAAIG,EAAIF,EAAIG,EAAIC,EAWpB,GATAL,EAAKrB,GACLwB,EAAKxB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBsB,EAp/NW,IAq/NXtB,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAASnJ,IAEpCuJ,IAAO3M,EAAY,CAGrB,IAFA8M,EAAK,GACLC,EAAKsS,KACEtS,IAAO/M,GACZ8M,EAAGN,KAAKO,GACRA,EAAKsS,KAEHvS,IAAO9M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnB0B,EAngOO,IAogOP1B,OAEA0B,EAAK/M,EACmB,IAApB2L,IAAyBY,GAASnJ,IAEpC2J,IAAO/M,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAGd1B,GAAcwB,EACdA,EAAK7M,KAGPqL,GAAcwB,EACdA,EAAK7M,QAGPqL,GAAcwB,EACdA,EAAK7M,EAOP,GALI6M,IAAO7M,IACM0M,EACfG,EAAK3I,GAAS2I,KAEhBH,EAAKG,KACM7M,EAAY,CAUrB,GATA0M,EAAKrB,GACLwB,EAAKxB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBsB,EAtiOS,IAuiOTtB,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAASzJ,IAEpC6J,IAAO3M,EAAY,CAGrB,IAFA8M,EAAK,GACLC,EAAK6S,KACE7S,IAAO/M,GACZ8M,EAAGN,KAAKO,GACRA,EAAK6S,KAEH9S,IAAO9M,GAC6B,KAAlCH,EAAMd,WAAWsM,KACnB0B,EArjOK,IAsjOL1B,OAEA0B,EAAK/M,EACmB,IAApB2L,IAAyBY,GAASzJ,IAEpCiK,IAAO/M,EAET6M,EADAF,EAAK,CAACA,EAAIG,EAAIC,IAGd1B,GAAcwB,EACdA,EAAK7M,KAGPqL,GAAcwB,EACdA,EAAK7M,QAGPqL,GAAcwB,EACdA,EAAK7M,EAEH6M,IAAO7M,IACM0M,EACfG,EAAK3I,GAAS2I,IAEhBH,EAAKG,EAGP,OAAOH,EAsJT,SAASkT,KACP,IAAIlT,EAaJ,OAXIrI,GAASga,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASjI,KAEpCoI,IAAO1M,IACT0M,EAAKmT,MAGAnT,EAGT,SAAS2S,KACP,IAAI3S,EAaJ,OAXInI,GAAS8Z,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS/H,KAEpCkI,IAAO1M,IACT0M,EAAKmT,MAGAnT,EAGT,SAASmT,KACP,IAAInT,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAjnOF8S,EAAIC,EAAIC,EAAIC,EAkzOlC,OA/LAvT,EAAKrB,GAhpOQ,QAipOTxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EAlpOW,MAmpOXxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9H,KAEpCoI,IAAO7M,IACM0M,EACfG,EAxpO+B,MA0pOjCH,EAAKG,KACM7M,IACT0M,EAAKrB,GA3pOM,QA4pOPxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EA7pOS,MA8pOTxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS7H,KAEpCmI,IAAO7M,IACM0M,EACfG,EAnqO6B,MAqqO/BH,EAAKG,KACM7M,IACT0M,EAAKrB,GAtqOI,SAuqOLxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EAxqOO,OAyqOPxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS5H,KAEpCkI,IAAO7M,IACM0M,EACfG,EA9qO2B,OAgrO7BH,EAAKG,KACM7M,IACT0M,EAAKrB,GAjrOE,QAkrOHxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EAnrOK,MAorOLxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS3H,KAEpCiI,IAAO7M,IACM0M,EACfG,EAzrOyB,MA2rO3BH,EAAKG,KACM7M,IACT0M,EAAKrB,GA5rOA,QA6rODxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EA9rOG,MA+rOHxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS1H,KAEpCgI,IAAO7M,IACM0M,EACfG,EApsOuB,OAssOzBH,EAAKG,KACM7M,IACT0M,EAAKrB,GAvsOF,QAwsOCxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EAzsOC,MA0sODxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASzH,KAEpC+H,IAAO7M,IACM0M,EACfG,EA/sOqB,OAitOvBH,EAAKG,KACM7M,IACT0M,EAAKrB,GAltOJ,QAmtOGxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EAptOD,MAqtOCxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASxH,KAEpC8H,IAAO7M,IACM0M,EACfG,EA1tOmB,OA4tOrBH,EAAKG,KACM7M,IACT0M,EAAKrB,GA7tON,QA8tOKxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EA/tOH,MAguOGxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASvH,KAEpC6H,IAAO7M,IACM0M,EACfG,EAruOiB,OAuuOnBH,EAAKG,KACM7M,IACT0M,EAAKrB,GAxuOR,QAyuOOxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EA1uOL,MA2uOKxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAStH,KAEpC4H,IAAO7M,IACM0M,EACfG,EAhvOe,OAkvOjBH,EAAKG,KACM7M,IACT0M,EAAKrB,GAnvOV,QAovOSxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EArvOP,MAsvOOxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASrH,KAEpC2H,IAAO7M,IACT2M,EAAKuT,QACMlgB,IACT8M,EAAKoT,QACMlgB,IACT+M,EAAKmT,QACMlgB,IACTgN,EAAKkT,QACMlgB,GACM0M,EAlwOrBoT,EAmwOoBnT,EAnwOhBoT,EAmwOoBjT,EAnwOhBkT,EAmwOoBjT,EAnwOhBkT,EAmwOoBjT,EAC1BN,EADAG,EAlwObsT,OAAOC,aAAaC,SAAS,KAAOP,EAAKC,EAAKC,EAAKC,MAqxO9C5U,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EAzxOT,KA0xOSxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASpH,KAEpC0H,IAAO7M,IACM0M,EACfG,EAzzOW,MA2zObH,EAAKG,YAYlBH,EAiBT,SAASqI,KACP,IAAIrI,EAAIG,EA7zOcrQ,EAu0OtB,OARAkQ,EAAKrB,IACLwB,EAUF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAEhBJ,EAAKrB,IACLwB,EAAKyT,QACMtgB,IACT2M,EAAK4T,QACMvgB,IACT8M,EAAK0T,QACMxgB,GACM0M,EAEfA,EADAG,EA/0OO,CACLxN,KAAM,SACNrD,MA60OY6Q,EAAIF,EAAIG,KAW1BzB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKyT,QACMtgB,IACT2M,EAAK4T,QACMvgB,GACM0M,EACfG,EA/1OO,SAAS4T,EAAMC,GACtB,MAAMC,EAASF,EAAOC,EACtB,OAAIE,GAASH,GAAc,CACzBphB,KAAM,SACNrD,MAAO2kB,GAEFE,WAAWF,GAy1ObG,CAASjU,EAAIF,GAClBD,EAAKG,IAMPxB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKyT,QACMtgB,IACT2M,EAAK6T,QACMxgB,GACM0M,EACfG,EAx2OK,SAAS4T,EAAMM,GAEtB,MAAO,CACL1hB,KAAM,SACNrD,MAHaykB,EAAOM,GAu2OfC,CAASnU,EAAIF,GAClBD,EAAKG,IAMPxB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,IACLwB,EAAKyT,QACMtgB,IACM0M,EACfG,EAh3OK,SAAS4T,GAChB,OAAIG,GAASH,GAAc,CACzBphB,KAAM,SACNrD,MAAOykB,GAEFI,WAAWJ,GA22OXQ,CAASpU,IAEhBH,EAAKG,KAKX,OAAOH,EAjFFwU,MACMlhB,IACM0M,EACfG,GAn0OoBrQ,EAm0ONqQ,IAl0OY,WAAXrQ,EAAE6C,KAA0B7C,EAC9B,CAAE6C,KAAM,SAAUrD,MAAOQ,IAm0OxCkQ,EAAKG,EA+EP,SAASyT,KACP,IAAI5T,EAAIG,EAAIF,EAyEZ,OAvEAD,EAAKyU,QACMnhB,IACT0M,EAAK0U,QACMphB,IACT0M,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EA/mPO,IAgnPPxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/J,IAEpCqK,IAAO7M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBwB,EAznPK,IA0nPLxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAShK,KAGtCsK,IAAO7M,IACT2M,EAAKwU,QACMnhB,GACM0M,EAEfA,EADAG,EA/4OmC,IA+4OjBF,IAOpBtB,GAAcqB,EACdA,EAAK1M,GAEH0M,IAAO1M,IACT0M,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EA/oPK,IAgpPLxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/J,IAEpCqK,IAAO7M,IAC6B,KAAlCH,EAAMd,WAAWsM,KACnBwB,EAzpPG,IA0pPHxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAShK,KAGtCsK,IAAO7M,IACT2M,EAAKyU,QACMphB,GACM0M,EAEfA,EADAG,EA96OgC,IA86OdF,IAOpBtB,GAAcqB,EACdA,EAAK1M,KAMN0M,EAGT,SAAS6T,KACP,IAAI7T,EAAIG,EAAIF,EAyBZ,OAvBAD,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EAn8OW,IAo8OXxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASjH,KAEpCuH,IAAO7M,IACT2M,EAAKwU,QACMnhB,GACM0M,EAEfA,EADAG,EA38OmC,IA28OrBF,IAOhBtB,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS8T,KACP,IAAI9T,EAAIG,EAAIF,EAmBZ,OAjBAD,EAAKrB,IACLwB,EAsEF,WACE,IAAIH,EAAIG,EAAIF,EAEZD,EAAKrB,GACD1F,GAAS0Y,KAAKxe,EAAMye,OAAOjT,MAC7BwB,EAAKhN,EAAMye,OAAOjT,IAClBA,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS3G,KAEpCiH,IAAO7M,GACL6F,GAASwY,KAAKxe,EAAMye,OAAOjT,MAC7BsB,EAAK9M,EAAMye,OAAOjT,IAClBA,OAEAsB,EAAK3M,EACmB,IAApB2L,IAAyBY,GAASzG,KAEpC6G,IAAO3M,IACT2M,EAAK,MAEHA,IAAO3M,GACM0M,EAEfA,EADAG,EAAcA,GAhjPoC,QAA7BwU,EAgjPH1U,GAhjPuC0U,EAAM,MAmjP/DhW,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAxjPM,IAAYqhB,EA2jPzB,OAAO3U,EAzGF4U,MACMthB,IACT2M,EAAKwU,QACMnhB,GACM0M,EAEfA,EADAG,EAAcA,EAAIF,IAOpBtB,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASyU,KACP,IAAIzU,EAAIG,EAAIF,EAKZ,GAHAD,EAAKrB,GACLwB,EAAK,IACLF,EAAKyU,QACMphB,EACT,KAAO2M,IAAO3M,GACZ6M,EAAGL,KAAKG,GACRA,EAAKyU,UAGPvU,EAAK7M,EAQP,OANI6M,IAAO7M,IACM0M,EACfG,EAAcA,EA9/O8BrN,KAAK,KAggPnDkN,EAAKG,EAKP,SAASuU,KACP,IAAI1U,EAUJ,OARInH,GAAS8Y,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS/G,KAGjCkH,EAGT,SAASwT,KACP,IAAIxT,EAUJ,OARIjH,GAAS4Y,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS7G,KAGjCgH,EAslBT,SAASoE,KACP,IAAIpE,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKrB,GA7kQQ,SA8kQTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASnG,KAEpCyG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAkHT,SAAS8D,KACP,IAAI9D,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKrB,GAr0RO,OAs0RRxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASvL,IAEpC6L,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAmVT,SAAS+J,KACP,IAAI/J,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKrB,GAzjRQ,SA0jRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS5F,KAEpCkG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS8J,KACP,IAAI9J,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKrB,GA5lRQ,UA6lRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS3F,KAEpCiG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASkS,KACP,IAAIlS,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKrB,GA/nRQ,SAgoRTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS1F,KAEpCgG,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA6LT,SAASqB,KACP,IAAIrB,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKrB,GAj1RQ,SAk1RTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASrF,KAEpC2F,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAwCT,SAAS2F,KACP,IAAI3F,EAAIG,EAAIF,EAAIG,EAiChB,OA/BAJ,EAAKrB,GAv5RQ,OAw5RTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASnF,KAEpCyF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAuJT,SAASgC,KACP,IAAIhC,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAtkSQ,WAukSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS9E,KAEpCoF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAzlS6B,WA4lS7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA+ET,SAASgD,KACP,IAAIhD,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA/qSQ,QAgrSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS3E,KAEpCiF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAlsS6B,QAqsS7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASiD,KACP,IAAIjD,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAltSQ,aAmtSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS1E,KAEpCgF,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAruS6B,aAwuS7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS6K,KACP,IAAI7K,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GArvSQ,YAsvSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASzE,KAEpC+E,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAxwS6B,YA2wS7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASiP,KACP,IAAIjP,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAxxSQ,OAyxSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASxE,KAEpC8E,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA3yS6B,OA8yS7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASwO,KACP,IAAIxO,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA3zSQ,OA4zSTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASvE,KAEpC6E,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA90S6B,OAi1S7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS2O,KACP,IAAI3O,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA91SQ,SA+1STxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAStE,KAEpC4E,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAj3S6B,SAo3S7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASyN,KACP,IAAIzN,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAj4SQ,WAk4STxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASrE,KAEpC2E,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAp5S6B,WAu5S7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASwN,KACP,IAAIxN,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAp6SQ,QAq6STxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASpE,KAEpC0E,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAv7S6B,QA07S7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS8K,KACP,IAAI9K,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAv8SQ,QAw8STxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASnE,KAEpCyE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA19S6B,QA69S7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS2M,KACP,IAAI3M,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA1+SQ,OA2+STxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASlE,KAEpCwE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA7/S6B,OAggT7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAqcT,SAAS+M,KACP,IAAI/M,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAj7TQ,UAk7TTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS5D,KAEpCkE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAp8T6B,UAu8T7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA6jBT,SAAS+D,KACP,IAAI/D,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAj+UQ,WAk+UTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASrD,KAEpC2D,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAp/U6B,WAu/U7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAmTT,SAASyS,KACP,IAAIzS,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA5xVQ,SA6xVTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASnD,KAEpCyD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA/yV6B,SAkzV7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAyCT,SAASwS,KACP,IAAIxS,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAl2VQ,SAm2VTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASjD,KAEpCuD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAr3V6B,SAw3V7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAAS0S,KACP,IAAI1S,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAr4VQ,cAs4VTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAShD,KAEpCsD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAx5V6B,cA25V7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA2cT,SAASuQ,KACP,IAAIvQ,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA50WQ,sBA60WTxL,EAAMwO,OAAOhD,GAAa,IAAIiD,eAChCzB,EAAKhN,EAAMwO,OAAOhD,GAAa,IAC/BA,IAAe,KAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAStC,KAEpC4C,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA/1W6B,sBAk2W7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAuhBT,SAASmI,KACP,IAAInI,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAjrYW,IAkrYXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASjH,KAGjCoH,EAGT,SAASuB,KACP,IAAIvB,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAx2XW,IAy2XXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASrC,KAGjCwC,EAGT,SAAS2H,KACP,IAAI3H,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EA77YW,IA87YXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS9J,IAGjCiK,EAGT,SAASqE,KACP,IAAIrE,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAr2ZS,IAs2ZTrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASlM,IAGjCqM,EAGT,SAASuE,KACP,IAAIvE,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAj3ZS,IAk3ZTrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAShM,IAGjCmM,EAGT,SAAS6U,KACP,IAAI7U,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EA1gZW,IA2gZXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASlK,IAGjCqK,EAGT,SAAS8U,KACP,IAAI9U,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EA9hZW,IA+hZXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASrK,IAGjCwK,EAGT,SAASoI,KACP,IAAIpI,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EA17XW,IA27XXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASpC,KAGjCuC,EAGT,SAASsI,KACP,IAAItI,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAt8XW,IAu8XXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASnC,KAGjCsC,EAGT,SAASU,KACP,IAAIV,EAUJ,OARsC,KAAlC7M,EAAMd,WAAWsM,KACnBqB,EAl9XW,IAm9XXrB,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASlC,KAGjCqC,EA+BT,SAASoM,KACP,IAAIpM,EAOJ,OALAA,EA/BF,WACE,IAAIA,EAUJ,MAr+Xa,OA69XT7M,EAAMwO,OAAOhD,GAAa,IAC5BqB,EA99XW,KA+9XXrB,IAAe,IAEfqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASjC,KAGjCoC,EAoBF+U,MACMzhB,IACT0M,EAnBJ,WACE,IAAIA,EAUJ,MAj/Xa,OAy+XT7M,EAAMwO,OAAOhD,GAAa,IAC5BqB,EA1+XW,KA2+XXrB,IAAe,IAEfqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAShC,KAGjCmC,EAQAgV,IAGAhV,EAGT,SAASE,KACP,IAAIF,EAAIG,EAOR,IALAH,EAAK,IACLG,EAAK8U,QACM3hB,IACT6M,EAAK+U,MAEA/U,IAAO7M,GACZ0M,EAAGF,KAAKK,IACRA,EAAK8U,QACM3hB,IACT6M,EAAK+U,MAIT,OAAOlV,EAGT,SAAS0M,KACP,IAAI1M,EAAIG,EAOR,GALAH,EAAK,IACLG,EAAK8U,QACM3hB,IACT6M,EAAK+U,MAEH/U,IAAO7M,EACT,KAAO6M,IAAO7M,GACZ0M,EAAGF,KAAKK,IACRA,EAAK8U,QACM3hB,IACT6M,EAAK+U,WAITlV,EAAK1M,EAGP,OAAO0M,EAGT,SAASkV,KACP,IAAIlV,EAUJ,OARAA,EAWF,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKrB,GAxjYQ,OAyjYTxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EA1jYW,KA2jYXxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS/B,KAExC,GAAIqC,IAAO7M,EAAY,CAgCrB,IA/BA2M,EAAK,GACLG,EAAKzB,GACL0B,EAAK1B,GACLM,KAlkYW,OAmkYP9L,EAAMwO,OAAOhD,GAAa,IAC5B2B,EApkYS,KAqkYT3B,IAAe,IAEf2B,EAAKhN,EACmB,IAApB2L,IAAyBY,GAAS9B,KAExCkB,KACIqB,IAAOhN,EACT+M,OAAK,GAEL1B,GAAc0B,EACdA,EAAK/M,GAEH+M,IAAO/M,IACTgN,EAAK6U,QACM7hB,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,GACL0B,EAAK1B,GACLM,KAlmYS,OAmmYL9L,EAAMwO,OAAOhD,GAAa,IAC5B2B,EApmYO,KAqmYP3B,IAAe,IAEf2B,EAAKhN,EACmB,IAApB2L,IAAyBY,GAAS9B,KAExCkB,KACIqB,IAAOhN,EACT+M,OAAK,GAEL1B,GAAc0B,EACdA,EAAK/M,GAEH+M,IAAO/M,IACTgN,EAAK6U,QACM7hB,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GA/nYA,OAgoYLH,EAAMwO,OAAOhD,GAAa,IAC5ByB,EAjoYO,KAkoYPzB,IAAe,IAEfyB,EAAK9M,EACmB,IAApB2L,IAAyBY,GAAS9B,KAEpCqC,IAAO9M,EAET0M,EADAG,EAAK,CAACA,EAAIF,EAAIG,IAGdzB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EA/GFoV,MACM9hB,IACT0M,EAgHJ,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKrB,GA3pYQ,OA4pYTxL,EAAMwO,OAAOhD,GAAa,IAC5BwB,EA7pYW,KA8pYXxB,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS7B,KAExC,GAAImC,IAAO7M,EAAY,CA0BrB,IAzBA2M,EAAK,GACLG,EAAKzB,GACL0B,EAAK1B,GACLM,KACAqB,EAAK+U,KACLpW,KACIqB,IAAOhN,EACT+M,OAAK,GAEL1B,GAAc0B,EACdA,EAAK/M,GAEH+M,IAAO/M,IACTgN,EAAK6U,QACM7hB,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,GACL0B,EAAK1B,GACLM,KACAqB,EAAK+U,KACLpW,KACIqB,IAAOhN,EACT+M,OAAK,GAEL1B,GAAc0B,EACdA,EAAK/M,GAEH+M,IAAO/M,IACTgN,EAAK6U,QACM7hB,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EA5LAsV,MACMhiB,IACT0M,EA6LN,WACE,IAAIA,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAExBN,EAAKrB,GACiC,KAAlCxL,EAAMd,WAAWsM,KACnBwB,EA1uYW,IA2uYXxB,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS5B,KAExC,GAAIkC,IAAO7M,EAAY,CA0BrB,IAzBA2M,EAAK,GACLG,EAAKzB,GACL0B,EAAK1B,GACLM,KACAqB,EAAK+U,KACLpW,KACIqB,IAAOhN,EACT+M,OAAK,GAEL1B,GAAc0B,EACdA,EAAK/M,GAEH+M,IAAO/M,IACTgN,EAAK6U,QACM7hB,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,GACL0B,EAAK1B,GACLM,KACAqB,EAAK+U,KACLpW,KACIqB,IAAOhN,EACT+M,OAAK,GAEL1B,GAAc0B,EACdA,EAAK/M,GAEH+M,IAAO/M,IACTgN,EAAK6U,QACM7hB,EAET8M,EADAC,EAAK,CAACA,EAAIC,IAOZ3B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,EAET0M,EADAG,EAAK,CAACA,EAAIF,IAGVtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAzQEuV,IAIFvV,EAwQT,SAASmV,KACP,IAAInV,EAUJ,OARI7M,EAAMxB,OAASgN,IACjBqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAAS3B,KAGjC8B,EA0BT,SAASiV,KACP,IAAIjV,EAUJ,OARI7B,GAASwT,KAAKxe,EAAMye,OAAOjT,MAC7BqB,EAAK7M,EAAMye,OAAOjT,IAClBA,OAEAqB,EAAK1M,EACmB,IAApB2L,IAAyBY,GAASzB,KAGjC4B,EAGT,SAASqV,KACP,IAAIrV,EAAIG,EAGR,IADAH,EA6BF,WACE,IAAIA,EAAIG,EAERH,EAAKrB,GACLM,KACI9L,EAAMxB,OAASgN,IACjBwB,EAAKhN,EAAMye,OAAOjT,IAClBA,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS3B,KAExCe,KACIkB,IAAO7M,EACT0M,OAAK,GAELrB,GAAcqB,EACdA,EAAK1M,GAGP,OAAO0M,EAjDFwV,MACMliB,EAST,GARA0M,EAAK,GACDtH,GAASiZ,KAAKxe,EAAMye,OAAOjT,MAC7BwB,EAAKhN,EAAMye,OAAOjT,IAClBA,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASlH,KAEpCwH,IAAO7M,EACT,KAAO6M,IAAO7M,GACZ0M,EAAGF,KAAKK,GACJzH,GAASiZ,KAAKxe,EAAMye,OAAOjT,MAC7BwB,EAAKhN,EAAMye,OAAOjT,IAClBA,OAEAwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASlH,UAI1CqH,EAAK1M,EAIT,OAAO0M,EA0BT,SAASyV,KACP,IAAIzV,EAAIG,EAAIF,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAIhC,GAFAR,EAAKrB,IACLwB,EAAKuV,QACMpiB,EAAY,CA6BrB,IA5BA2M,EAAK,GACLG,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKkV,QACMpiB,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAEA8M,IAAO9M,GACZ2M,EAAGH,KAAKM,GACRA,EAAKzB,IACL0B,EAAKH,QACM5M,IACTgN,EAAKiB,QACMjO,IACTiN,EAAKL,QACM5M,IACTkN,EAAKkV,QACMpiB,EAET8M,EADAC,EAAK,CAACA,EAAIC,EAAIC,EAAIC,IAexB7B,GAAcyB,EACdA,EAAK9M,GAGL2M,IAAO3M,GACM0M,EAEfA,EADAG,EAAKnM,EAAQmM,EAAIF,KAGjBtB,GAAcqB,EACdA,EAAK1M,QAGPqL,GAAcqB,EACdA,EAAK1M,EAGP,OAAO0M,EAGT,SAAS0V,KACP,IAAI1V,EAAIG,EAAIF,EAAIG,EAiDhB,OA/CAJ,EAAKrB,GACLwB,EAAKxB,IACLsB,EAAKwH,QACMnU,GACMqL,IAGbyB,GAFFA,GAj/YgE,IAAhCuV,GAi/YlB1V,EAj/Y+B1N,gBAm/YtCe,OAEA,KAEIA,GACM6M,EAEfA,EADAF,EAAcA,IAGdtB,GAAcwB,EACdA,EAAK7M,KAGPqL,GAAcwB,EACdA,EAAK7M,GAEH6M,IAAO7M,IACT6M,EAAK,MAEHA,IAAO7M,IACT2M,EAAKC,QACM5M,IACT8M,EAqBN,WACE,IAAIJ,GAEJA,EAAKiM,QACM3Y,IACT0M,EAAK8M,QACMxZ,IACT0M,EAgBN,WACE,IAAIA,EAAIG,EAERH,EAAKrB,IACLwB,EAhxEF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA97UQ,WA+7UTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAStD,KAEpC4D,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAj9U6B,WAo9U7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA6uEF4V,MACMtiB,IACM0M,EACfG,EAAK9B,GAAS8B,IAIhB,OAFAH,EAAKG,EAzBI0V,MACMviB,IACT0M,EA4BR,WACE,IAAIA,EAAIG,EAERH,EAAKrB,IACLwB,EApnFF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAnoUQ,YAooUTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASxD,KAEpC8D,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAtpU6B,YAypU7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAilFF8V,MACMxiB,IACT6M,EA99EJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA/wUQ,UAgxUTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASvD,KAEpC6D,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAlyU6B,UAqyU7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA27EA+V,MACMziB,IACT6M,EAl/DN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAttVQ,YAutVTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASpD,KAEpC0D,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAzuV6B,YA4uV7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA+8DEgW,IAGL7V,IAAO7M,IACM0M,EACfG,EAAK9B,GAAS8B,IAIhB,OAFAH,EAAKG,EA3CM8V,MACM3iB,IACT0M,EA8CV,WACE,IAAIA,EAAIG,EAERH,EAAKrB,IACLwB,EAAKsS,QACMnf,IACT6M,EAAKqS,QACMlf,IACT6M,EAAKuS,QACMpf,IACT6M,EAt5DR,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA/zVQ,aAg0VTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASlD,KAEpCwD,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAl1V6B,aAq1V7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAm3DIkW,IAIP/V,IAAO7M,IACM0M,EACfG,EAAK9B,GAAS8B,IAIhB,OAFAH,EAAKG,EAhEQgW,MACM7iB,IACT0M,EAmEZ,WACE,IAAIA,EAAIG,EAERH,EAAKrB,IACLwB,EA71FF,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAp9TQ,UAq9TTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS3D,KAEpCiE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAv+T6B,UA0+T7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA0zFFoW,MACM9iB,IACT6M,EAzzFJ,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GAv/TQ,SAw/TTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAAS1D,KAEpCgE,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EA1gU6B,SA6gU7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EAsxFAqW,MACM/iB,IACT6M,EA/uFN,WACE,IAAIH,EAAIG,EAAIF,EAAIG,EAkChB,OAhCAJ,EAAKrB,GA7jUQ,cA8jUTxL,EAAMwO,OAAOhD,GAAa,GAAGiD,eAC/BzB,EAAKhN,EAAMwO,OAAOhD,GAAa,GAC/BA,IAAe,IAEfwB,EAAK7M,EACmB,IAApB2L,IAAyBY,GAASzD,KAEpC+D,IAAO7M,GACT2M,EAAKtB,GACLM,KACAmB,EAAKyB,KACL5C,KACImB,IAAO9M,EACT2M,OAAK,GAELtB,GAAcsB,EACdA,EAAK3M,GAEH2M,IAAO3M,GACM0M,EAEfA,EADAG,EAhlU6B,cAmlU7BxB,GAAcqB,EACdA,EAAK1M,KAGPqL,GAAcqB,EACdA,EAAK1M,GAGA0M,EA4sFEsW,IAGLnW,IAAO7M,IACM0M,EACfG,EAAK9B,GAAS8B,IAIhB,OAFAH,EAAKG,EAlFUoW,IAOf,OAAOvW,EAzCEwW,MACMljB,GACM0M,EAEfA,EADAG,EAxgZO,SAASrQ,EAAGP,GACnB,MAAO,CACLknB,WAAY3mB,EACZ4mB,WAAYnnB,GAqgZTonB,CAASxW,EAAIC,KAWtBzB,GAAcqB,EACdA,EAAK1M,GAGA0M,EAuGT,SAAS8M,KACP,IAAI9M,EAAIG,EAAgBG,EAiDxB,OA/CAN,EAAKrB,IACLwB,EAAK4M,QACMzZ,GACJ4M,OACM5M,GACJuhB,OACMvhB,GACJ4M,OACM5M,IACTgN,EAAKmV,QACMniB,GACJ4M,OACM5M,GACJwhB,OACMxhB,GACM0M,EAEfA,EADAG,EAAK5B,GAAS4B,EAAIG,KA2B9B3B,GAAcqB,EACdA,EAAK1M,GAGA0M,EAGT,SAASiM,KACP,IAAIjM,EAAIG,EAAgBG,EAiDxB,OA/CAN,EAAKrB,IACLwB,EAAK4D,QACMzQ,GACJ4M,OACM5M,GACJuhB,OACMvhB,GACJ4M,OACM5M,IACTgN,EAAKmV,QACMniB,GACJ4M,OACM5M,GACJwhB,OACMxhB,GACM0M,EAEfA,EADAG,EAAK5B,GAAS4B,EAAIG,KA2B9B3B,GAAcqB,EACdA,EAAK1M,GAGA0M,EAIP,MAAM7J,GAAc,CAClB,OAAS,EACT,OAAS,EACT,KAAO,EACP,KAAO,EACP,KAAO,EACP,IAAM,EACN,KAAO,EAEP,SAAW,EACX,IAAM,EAEN,MAAQ,EACR,MAAQ,EACR,QAAU,EACV,OAAS,EACT,UAAY,EACZ,cAAgB,EAChB,cAAgB,EAChB,mBAAqB,EACrB,cAAgB,EAEhB,QAAU,EACV,MAAQ,EACR,UAAY,EACZ,MAAQ,EAER,MAAQ,EACR,KAAO,EACP,QAAU,EACV,SAAW,EAEX,OAAS,EACT,MAAQ,EACR,MAAQ,EACR,KAAO,EAEP,OAAS,EAET,QAAU,EAEV,IAAM,EACN,OAAS,EACT,QAAU,EACV,MAAQ,EACR,IAAM,EAEN,MAAQ,EACR,MAAQ,EAER,KAAO,EAEP,MAAQ,EACR,MAAQ,EACR,OAAS,EACT,cAAgB,EAEhB,KAAO,EACP,MAAQ,EAER,IAAM,EACN,IAAM,EACN,OAAS,EACT,OAAS,EAET,WAAa,EAEb,WAAa,EACb,QAAU,EACV,MAAQ,EACR,OAAS,EAET,QAAU,EACV,cAAgB,EAChB,KAAO,EACP,MAAQ,EACR,aAAe,EAEf,OAAS,EACT,MAAQ,EACR,MAAQ,EACR,UAAY,EACZ,MAAQ,EAER,OAAS,EACT,QAAU,EACV,OAAS,EAET,QAAU,EAEV,QAAU,EACV,MAAQ,EACR,MAAQ,EACR,OAAS,EACT,OAAS,EAET,QAAU,EACV,SAAW,EACX,OAAS,EACT,SAAW,EACX,cAAgB,GAGZwf,GAAa,CACjB,MAAQ,EACR,MAAQ,EACR,MAAQ,EACR,UAAY,EACZ,SAAW,EACX,OAAS,EACT,SAAW,EACX,QAAU,EACV,MAAQ,EACR,WAAa,EACb,OAAS,EACT,QAAU,GAGZ,SAASpJ,GAAgBpD,EAAI4B,GAC3B,MAAO,CACLpY,KAAM,aACNikB,SAAUzN,EACVvE,KAAMmG,GAIV,SAASgE,GAAiB5F,EAAIyE,EAAMM,GAClC,MAAO,CACLvb,KAAM,cACNikB,SAAUzN,EACVyE,KAAMA,EACNM,MAAOA,GAIX,SAASgG,GAAS2C,GAChB,MAAMC,EAAkBzmB,EAAO0mB,OAAOC,kBAEtC,QADY3mB,EAAOwmB,GACTC,GAIZ,SAAS3iB,GAAWF,EAAMC,GACxB,MAAM+iB,EAAS,CAAChjB,GAChB,IAAK,IAAI5F,EAAI,EAAGA,EAAI6F,EAAKvC,OAAQtD,IAC/B4oB,EAAOnX,KAAK5L,EAAK7F,GAAG,IAEtB,OAAO4oB,EAGT,SAAS/hB,GAAsBjB,EAAMC,GACnC,IAAI+iB,EAAShjB,EACb,IAAK,IAAI5F,EAAI,EAAGA,EAAI6F,EAAKvC,OAAQtD,IAC/B4oB,EAASlI,GAAiB7a,EAAK7F,GAAG,GAAI4oB,EAAQ/iB,EAAK7F,GAAG,IAExD,OAAO4oB,EAGT,SAASC,GAAgBC,GACvB,MAAM3N,EAAQpE,GAAW+R,GACzB,OAAI3N,IACA2N,GACG,MAGT,SAASnW,GAAqBD,GAC5B,MAAMkG,EAAU,GAEhB,IAAI,IAAInI,KAAUiC,EAAWqW,OAAQ,CACnC,MAAMC,EAAavY,EAAOwY,MAFT,MAGjB,IAAKD,EAAY,CACfpQ,EAAQnH,KAAKhB,GACb,MAEEuY,GAAcA,EAAW,KAAIA,EAAW,GAAKH,GAAgBG,EAAW,KAC5EpQ,EAAQnH,KAAKuX,EAAWvkB,KARP,OAUnB,OAAOmU,EA8BT,MAAMpG,GAAY,IAAI0W,IAChBxW,GAAa,IAAIwW,IACjBnS,GAAa,GAKrB,IAFA/R,EAAaK,OAEMJ,GAAcqL,KAAgBxL,EAAMxB,OACrD,OAAO0B,EAMP,MAJIA,IAAeC,GAAcqL,GAAcxL,EAAMxB,QACnDkO,GA93ZK,CAAElN,KAAM,QAi4ZToN,GACJf,GACAD,GAAiB5L,EAAMxB,OAASwB,EAAMye,OAAO7S,IAAkB,KAC/DA,GAAiB5L,EAAMxB,OACnB4N,GAAoBR,GAAgBA,GAAiB,GACrDQ,GAAoBR,GAAgBA,Q,8CCvmc9C3Q,EAAOD,QAAUqpB,QAAQ,gB,+sCCEV,I,MAAA,G,EAAA,G,EACZC,W,EAAevkB,Q,00BCOlB,SAASwkB,EAAeC,GACtB,IAAKA,EAAW,MAAO,GADU,IAEzBlT,EAAkBkT,EAAlBlT,QAAS9R,EAASglB,EAAThlB,KACjB,MAAO,CAAC8R,EAAQlS,cAAeI,EAAKJ,eAGtC,SAASqlB,EAAiBC,GACxB,GAAKA,EAAL,CADkC,IAE1BllB,EAAuBklB,EAAvBllB,KAAMiS,EAAiBiT,EAAjBjT,KAAMkT,EAAWD,EAAXC,OACdC,EAAYplB,EAAKJ,cACjBylB,EAAgB,GAEtB,OADAA,EAAclY,KAAKiY,GACXA,GACN,IAAK,iBACCD,GAAQE,EAAclY,KAAKgY,GAC/BE,EAAclY,KAAKmY,EAAarT,IAChC,MACF,IAAK,QACL,IAAK,OACHoT,EAAcrmB,OAAS,EACvBqmB,EAAclY,KAAd,MAAAkY,EAAa,EAASN,EAAeG,KACrC,MACF,IAAK,cACHG,EAAclY,KAAK8E,GACnB,MACF,IAAK,UACL,IAAK,YACH,MACF,IAAK,UACHoT,EAAcE,QACdF,EAAclY,KAAKqY,EAAaN,IAChC,MACF,IAAK,mBACHG,EAAclY,KAAKgY,EAAQM,EAAQxT,EAAKtV,OAAQ+oB,EAAkBzT,EAAK0E,KACvE,MACF,QACE0O,EAAclY,KAAKgY,EAAQG,EAAarT,IAG5C,OAAOoT,EAAcM,OAAOC,GAAQzlB,KAAK,MAG3C,SAAS0lB,EAAqBC,GAC5B,OAAKA,EACEA,EAAavL,IAAI0K,GADE,GAI5B,SAASc,EAAwBC,GAAiB,IAE7BC,EAIfD,EAJFE,gBACYlB,EAGVgB,EAHFG,WAH8C,EAM5CH,EAFFI,cAAeC,OAJ+B,MAIhB,GAJgB,EAK9Cva,EACEka,EADFla,WAEIH,EAAW,GAEjB,GADAA,EAASwB,KAAT,MAAAxB,EAAQ,EAASoZ,EAAeC,KAC5BlZ,GAAcA,EAAW9M,OAAQ,CACnC,IAAMsnB,EAA4C,UAA5Bb,EAAQQ,GAAR,WAA0CM,GAAUza,EAAW,IAA/D,gBAA4EA,EAAWyO,KAAI,SAAAoE,GAAG,OAAI6H,EAAgB7H,MAAMxe,KAAK,MAA7H,KACtBwL,EAASwB,KAAKmZ,GAGhB,OADA3a,EAASwB,KAAK0Y,EAAqBQ,GAAclmB,KAAK,MAC/CwL,E,0uBC/DT,SAAS8a,EAA0BC,GACjC,GAAKA,EAAL,CADuD,IAGrDC,EAKED,EALFC,WACiBV,EAIfS,EAJFR,gBACAU,EAGEF,EAHFE,MACA9U,EAEE4U,EAFF5U,QACsB+U,EACpBH,EADFI,qBAEIC,EAAgB,GAOtB,OANAA,EAAc5Z,KAAKsY,EAAQ3T,IAC3BiV,EAAc5Z,KAAKqZ,EAAgBG,IACnCI,EAAc5Z,KAAKsY,EAAQQ,IAC3Bc,EAAc5Z,KAAKqZ,EAAgBI,IACnCG,EAAc5Z,KAAd,MAAA4Z,EAAa,EAAShB,EAAwBW,KAC9CK,EAAc5Z,KAAd,MAAA4Z,EAAa,EAASC,EAA+BH,KAC9CE,EAAcpB,OAAOC,GAAQzlB,KAAK,MCrB3C,SAAS8mB,EAAW1U,GAAW,IACrBC,EAAwBD,EAAxBC,MAAO2B,EAAiB5B,EAAjB4B,GAAIpC,EAAaQ,EAAbR,GAAIE,EAASM,EAATN,KACjBiV,EAAWV,EAAgBrS,GAC3BqQ,EAAYhS,EAAQgU,EAAgBhU,GAAS+T,GAAUtU,GACvDkV,EAAMD,EAAW,GAAH,OAAMA,EAAN,YAAkB1C,GAAcA,EACpD,OAAIzS,EAAW,GAAP,OAAUoV,EAAV,eAAoBX,EAAgBzU,IACrCoV,EAaT,SAASC,EAAYC,GAEnB,GAAsB,WAAlB5B,EADa4B,EAATrnB,MACwB,OAZlC,SAAqBsnB,GAAY,IACvBtnB,EAA4CsnB,EAA5CtnB,KAAM+R,EAAsCuV,EAAtCvV,GAAIE,EAAkCqV,EAAlCrV,KAAmBsV,EAAeD,EAA5BpV,YAExB,MADe,CAACuT,EAAQzlB,GAAT,WAAoBiS,GAAQsU,GAAUtU,IAAS,IAA/C,KAAuDuV,EAAsB,KAAMhB,EAAiBzU,GAAKyV,EAAsB/B,EAAQ8B,GAAcA,EAAWzV,SAAU0U,EAAiBe,GAAcA,EAAWxV,KACrN4T,OAAOC,GAAQzlB,KAAK,KASKsnB,CAAYJ,GACnD,IAAMK,EAAYL,EAAO,GACnBM,EAAU,GAChB,GAAuB,SAAnBD,EAAU1nB,KAAiB,MAAO,OACtC2nB,EAAQxa,KAAK8Z,EAAWS,IACxB,IAAK,IAAIhsB,EAAI,EAAGA,EAAI2rB,EAAOroB,SAAUtD,EAAG,CACtC,IAAMksB,EAAWP,EAAO3rB,GAChBib,EAAoBiR,EAApBjR,GAAIF,EAAgBmR,EAAhBnR,MAAOtW,EAASynB,EAATznB,KACbgnB,EAAM,GACZA,EAAIha,KAAKhN,EAAO,IAAH,OAAOA,GAAS,KAC7BgnB,EAAIha,KAAK8Z,EAAWW,IACpBT,EAAIha,KAAKqa,EAAsB,KAAMjB,GAAW5P,IAC5CF,GAAO0Q,EAAIha,KAAJ,iBAAmBsJ,EAAM8D,IAAIiM,GAAiBrmB,KAAK,MAAnD,MACXwnB,EAAQxa,KAAKga,EAAIxB,OAAOC,GAAQzlB,KAAK,MAEvC,OAAOwnB,EAAQhC,OAAOC,GAAQzlB,KAAK,IAGrC,SAAS0nB,EAAiBC,GAAa,IAC7BhW,EAA2BgW,EAA3BhW,QAASqT,EAAkB2C,EAAlB3C,OAAQxoB,EAAUmrB,EAAVnrB,MACnBorB,EAAM,CAACjW,EAAQlS,eAGrB,OAFIulB,GAAQ4C,EAAI5a,KAAKgY,GACrB4C,EAAI5a,KAAKxQ,GACForB,EAAI5nB,KAAK,K,0uBChClB,SAAS6nB,EAAe/V,GAAM,IAE1BgW,EACEhW,EADFgW,MAAOlW,EACLE,EADKF,GAAImW,EACTjW,EADSiW,QAAS/b,EAClB8F,EADkB9F,OAAQgc,EAC1BlW,EAD0BkW,OAAQ3V,EAClCP,EADkCO,MAAOxC,EACzCiC,EADyCjC,YAAa3S,EACtD4U,EADsD5U,SAEtD8pB,EAAiB,MAAXhb,EAAiB,IAAMqa,EAAgBra,EAAQgc,GACrD3V,IAAO2U,EAAM,GAAH,OAAMX,EAAgBhU,GAAtB,YAAgC2U,IAC9C,IAAM7C,EAAS,CACb6C,EACAK,EAAsB,KAAMjB,GAAWxU,GACvCyV,EAAsBS,EAAO3C,EAAcjoB,IAEzC6qB,GAAS5D,EAAOnX,KAAKib,EAAgBF,GAAS/nB,KAAK,MACvD,IAAM4nB,EAAMzD,EAAOqB,OAAOC,GAAQzlB,KAAK,KACvC,OAAO6P,EAAc,IAAH,OAAO+X,EAAP,KAAgBA,EAGpC,SAASM,EAAevc,GAAY,MACUA,GAAc,GAAlDH,EAD0B,EAC1BA,SAAU3M,EADgB,EAChBA,OAAQspB,EADQ,EACRA,OAAQC,EADA,EACAA,MAC9BjE,EAAS3Y,EAKb,OAJI3M,IACFslB,GAAU,IAAJ,OAAQ,CAACtlB,EAAQupB,GAAO5C,OAAOC,GAAQzlB,KAAK,MAA5C,MAEJmoB,GAAUA,EAAOtpB,SAAQslB,GAAU,IAAJ,OAAQgE,EAAOnoB,KAAK,OAChDmkB,EAGT,SAAS0C,EAA+BH,GACtC,IAAM2B,EAAY,GAClB,IAAK3B,EAAqB,OAAO2B,EAF0B,IAIzD1c,EAME+a,EANF/a,WACAgG,EAKE+U,EALF/U,QACA2W,EAIE5B,EAJF4B,MACAjW,EAGEqU,EAHFrU,MACWkW,EAET7B,EAFF8B,UACWC,EACT/B,EADFgC,UAQF,OANAL,EAAUrb,KAAK2E,EAAQlS,eACvB4oB,EAAUrb,KAAKia,EAAY5U,IAC3BgW,EAAUrb,KAAV,WAAmBrB,EAAWyO,IAAIiM,GAAiBrmB,KAAK,MAAxD,MACAqoB,EAAUrb,KAAKsY,EAAQgD,IACvBD,EAAUrb,KAAV,MAAAqb,EAAS,EAASJ,EAAgBM,KAClCF,EAAUrb,KAAV,MAAAqb,EAAS,EAASJ,EAAgBQ,KAC3BJ,EAAU7C,OAAOC,GA4B1B,SAASkD,EAAiBC,GAAa,IAC7B5c,EAA2C4c,EAA3C5c,OAAQ+b,EAAmCa,EAAnCb,QAASc,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,QAASC,EAAUH,EAAVG,MAQzC,MAPe,CACb3C,GAAUpa,GACVqb,EAAsBU,GAAWA,EAAQloB,KAAMwmB,EAAiB0B,GAAWA,EAAQvrB,OACnFssB,EACAxD,EAAQyD,GACRzD,EAAQuD,IAEIrD,OAAOC,GAAQzlB,KAAK,KAGpC,SAASgpB,EAAsBC,GAC7B,IAAMjd,EAAS,GACTlQ,EAAO+rB,EAAeoB,EAAiBjd,QACvCR,EAAW0c,EAAee,EAAiBtd,YACjDK,EAAOgB,KAAKlR,GACZkQ,EAAOgB,KAAKxB,GACZ,IAAM0d,EA3CR,SAAsBvd,GACpB,IAAMud,EAAY,GAEhBC,EAMExd,EANFwd,SAAUC,EAMRzd,EANQyd,MAAOC,EAMf1d,EANe0d,QAAStB,EAMxBpc,EANwBoc,QAASuB,EAMjC3d,EANiC2d,QACtBC,EAKX5d,EALF6d,YACgBC,EAId9d,EAJF+d,eACmBC,EAGjBhe,EAHFie,kBACeC,EAEble,EAFFme,cACsBpD,EACpB/a,EADFgb,qBAIF,GADAuC,EAAUlc,KAAKsY,EAAQ6D,GAAYA,EAAS3sB,QACxC+sB,EAAY,KACN1pB,EAAgB0pB,EAAhB1pB,KAAMrD,EAAU+sB,EAAV/sB,MACd0sB,EAAUlc,KAAKnN,EAAKJ,cAAe2mB,GAAU5pB,IAQ/C,OANA0sB,EAAUlc,KAAKsZ,EAA0B8C,IACzCF,EAAUlc,KAAK+c,GAAsBN,GAAgBnE,EAAQqE,GAAgBtE,EAAagE,IAC1FH,EAAUlc,KAAV,MAAAkc,EAAS,EAASjB,EAAgBF,KAClCmB,EAAUlc,KAAV,MAAAkc,EAAS,EAASjB,EAAgB4B,KAClCX,EAAUlc,KAAV,MAAAkc,EAAS,EAASjB,EAAgBqB,KAClCJ,EAAUlc,KAAV,MAAAkc,EAAS,EAASrC,EAA+BH,KAC1CwC,EAAU1D,OAAOC,GAAQzlB,KAAK,KAqBnBgqB,CAAaf,GAE/B,OADAjd,EAAOgB,KAAKkc,GACLld,EAAOwZ,OAAOC,GAAQzlB,KAAK,KA0BpC,SAASiqB,EAAa9V,EAAS+S,GAC7B,IAAK/S,GAAuB,MAAZA,EAAiB,OAAOA,EACxC,IAAM6T,EAbR,SAAiBd,GACf,IAAMK,EAAYzoB,MAAM+U,QAAQqT,IAAWA,EAAO,GAClD,SAAIK,GAAgC,SAAnBA,EAAU1nB,MAWZqqB,CAAQhD,GACjB/C,EAAS,GACIgG,EAAyBhW,EAApCY,UAAqBC,EAAeb,EAAfa,KAAMnV,EAASsU,EAATtU,KACnCskB,EAAOnX,KAAKgI,EAAMsQ,EAAQzlB,IAC1B,IACMuqB,GADcD,GAAYhW,GACDiG,KAAI,SAAAoE,GAAG,OA9BxC,SAAqBxS,EAAQgc,GAAQ,IAC3BlW,EAAS9F,EAAT8F,KACJkW,IAAQlW,EAAKkW,OAASA,GAC1B,IAAIhB,EAAMZ,GAAUtU,GAMpB,OALkB,OAAd9F,EAAO4F,KACToV,EAAM,GAAH,OAAMA,EAAN,QACyCA,EAAxChb,EAAO4F,GAAG0W,MAAM,uBAA8B,GAAH,OAAMtB,GAAN,OAAYX,EAAgBra,EAAO4F,KACvE,GAAH,OAAMoV,GAAN,OAAYqD,EAAsBre,EAAO4F,MAE5CoV,EAqBmCsD,CAAY9L,EAAKwJ,MAAShoB,KAAK,MAEzE,OADAmkB,EAAOnX,KAAK,CAACnN,GAAQ,IAAKuqB,EAAYvqB,GAAQ,KAAK2lB,OAAOC,GAAQzlB,KAAK,KAChEmkB,EAAOqB,OAAOC,GAAQzlB,KAAK,K,qOC3IpC,IAAMuqB,EAAY,CAChB,KAAS,MACTC,IAAS,MACT,IAAS,MACT,KAAS,MACT,KAAS,MACT,KAAS,MACT,KAAS,MACT,IAAS,OAILC,EAAc,CAClB1D,SAAWpC,WACX9kB,KAAW,SAGT6qB,EAAYD,EAEhB,SAASpD,EAAsB1V,EAASgZ,EAAQC,GAC9C,GAAKA,EACL,OAAKjZ,EACL,UAAUA,EAAQlS,cAAlB,YAAmCkrB,EAAOC,IADrBD,EAAOC,GAI9B,SAASC,EAAUlZ,EAASqV,GAC1B,GAAKA,EACL,gBAAUrV,EAAQlS,cAAlB,YAAmCunB,GAOrC,SAAS8D,EAAgBtuB,GACvB,IAAMqD,EAAO,EAAOrD,GACpB,GAAIsC,MAAM+U,QAAQrX,GAAQ,MAAO,CAAEqD,KAAM,YAAarD,MAAOA,EAAM4d,IAAI0Q,IACvE,GAAc,OAAVtuB,EAAgB,MAAO,CAAEqD,KAAM,OAAQrD,MAAO,MAClD,OAAQqD,GACN,IAAK,UACH,MAAO,CAAEA,KAAM,OAAQrD,SACzB,IAAK,SACH,MAAO,CAAEqD,KAAM,SAAUrD,SAC3B,IAAK,SACH,MAAO,CAAEqD,KAAM,SAAUrD,SAC3B,QACE,MAAM,IAAIsB,MAAJ,gCAAmC+B,EAAnC,cAUZ,SAASoc,EAAiB6H,EAAUhJ,EAAMM,GACxC,IAAMtJ,EAAO,CAAEgS,WAAUjkB,KAAM,eAE/B,OADAiS,EAAKgJ,KAAOA,EAAKjb,KAAOib,EAAOgQ,EAAgBhQ,GAC9B,YAAbgJ,GAAuC,gBAAbA,GAC5BhS,EAAKsJ,MAAQ,CACXvb,KAAQ,YACRrD,MAAQ,CAACsuB,EAAgB1P,EAAM,IAAK0P,EAAgB1P,EAAM,MAErDtJ,IAETA,EAAKsJ,MAAQA,EAAMvb,KAAOub,EAAQ0P,EAAgB1P,GAC3CtJ,GA2BT,SAASiZ,EAAO/D,GAEd,IADA,IAAM5X,EAAM,GACH7T,EAAI,EAAGyvB,EAAMhE,EAAInoB,OAAQtD,EAAIyvB,IAAOzvB,EAAG,CAC9C,IAAI0vB,EAAOjE,EAAIzrB,GACT2vB,EAAUX,EAAUU,GACtBC,IAASD,EAAOC,GACpB9b,EAAIpC,KAAKie,GAEX,OAAO7b,EAAIpP,KAAK,IAGlB,SAASmrB,IACP,OAAOT,EAGT,SAASU,EAAaR,GACpBF,EAAYE,EAGd,SAASS,EAAST,GAChB,GAAKA,EAAL,CADqB,IAEbpuB,EAAmBouB,EAAnBpuB,MAAO8uB,EAAYV,EAAZU,QACTC,EAAS,OAAH,OAAU/uB,GACtB,OAAK8uB,EACL,UAAUC,EAAV,YAAoBD,EAAQ7rB,eADP8rB,GAIvB,SAASlB,EAAsBmB,GAAO,IAC5BzE,EAAaoE,IAAbpE,SACR,GAAKyE,EACL,OAAQzE,GAAYA,EAASjY,eAC3B,IAAK,aACL,IAAK,MACH,iBAAW0c,EAAX,KACF,IAAK,cACH,iBAAWA,EAAX,KACF,IAAK,QACL,IAAK,UACL,IAAK,WACL,QACE,iBAAYA,EAAZ,MAIN,SAASnF,EAAgBmF,EAAOxD,GAAQ,IAC9BjB,EAAaoE,IAAbpE,SACR,IAAe,IAAXiB,EAAiB,MAAO,IAAP,OAAWwD,EAAX,KACrB,GAAKA,EACL,OAAQzE,GAAYA,EAASjY,eAC3B,IAAK,QACL,IAAK,UACH,iBAAY0c,EAAZ,KACF,IAAK,aACH,iBAAWA,EAAX,KACF,IAAK,cACH,iBAAWA,EAAX,KACF,IAAK,WACL,IAAK,MACH,OAAOA,EACT,QACE,iBAAYA,EAAZ,MAIN,SAASrG,EAAa5mB,GACpB,GAAKA,EAAL,CAD6B,IAErBsB,EAA6BtB,EAA7BsB,KAAMgQ,EAAuBtR,EAAvBsR,YAAarT,EAAU+B,EAAV/B,MACvBwqB,EAAMxqB,EACV,OAAQqD,GACN,IAAK,SACHmnB,EAAM,IAAH,OAAO+D,EAAOvuB,GAAd,KACH,MACF,IAAK,sBACHwqB,EAAM,IAAH,OAAO+D,EAAOvuB,GAAd,KACH,MACF,IAAK,sBACHwqB,EAAM,IAAH,OAAOxqB,EAAP,KACH,MACF,IAAK,UACL,IAAK,OACHwqB,EAAMxqB,EAAQ,OAAS,QACvB,MACF,IAAK,OACHwqB,EAAM,OACN,MACF,IAAK,OACHA,EAAM,IACN,MACF,IAAK,QACHA,EAAM,IAAH,OAAOxqB,GACV,MACF,IAAK,SACHwqB,EAAMxqB,EAAMiD,cACZ,MACF,IAAK,OACL,IAAK,OACL,IAAK,YACHunB,EAAM,GAAH,OAAMnnB,EAAKJ,cAAX,aAA6BjD,EAA7B,KAKP,OAAOqT,EAAc,IAAH,OAAOmX,EAAP,KAAgBA,GAGpC,SAASyE,EAAc3d,EAAK4d,GAC1B,OA3HF,SAASC,EAAmB7d,EAAKwW,GAc/B,OAbAroB,OAAOqoB,KAAKxW,GACT0X,QAAO,SAAA1oB,GACN,IAAMN,EAAQsR,EAAIhR,GAClB,OAAOgC,MAAM+U,QAAQrX,IAA4B,WAAjB,EAAOA,IAAgC,OAAVA,KAE9D2V,SAAQ,SAAArV,GACP,IAAMgV,EAAOhE,EAAIhR,GACjB,GAAsB,WAAhB,EAAOgV,IAAmC,UAAdA,EAAKjS,KAAmB,OAAO8rB,EAAmB7Z,EAAMwS,GAC1F,QAAgC,IAArBA,EAAKxS,EAAKtV,OAAwB,MAAM,IAAIsB,MAAJ,kCAAqCgU,EAAKtV,MAA1C,WAEnD,OADAsR,EAAIhR,GAAOguB,EAAgBxG,EAAKxS,EAAKtV,QAC9B,QAGJsR,EA6GA6d,CAAmBhW,KAAKvV,MAAMuV,KAAKC,UAAU9H,IAAO4d,GAG7D,SAASzD,EAAgB2C,GACvB,IAAMzG,EAAS,GACf,IAAKyG,EAAK,OAAOzG,EAFW,IAGpBtkB,EAAgB+qB,EAAhB/qB,KAAMrD,EAAUouB,EAAVpuB,MAGd,OAFA2nB,EAAOnX,KAAKnN,EAAKJ,eACjB0kB,EAAOnX,KAAKxQ,EAAMiD,eACX0kB,EAGT,SAASmB,EAAQsG,GACf,GAAKA,EACL,OAAOA,EAAInsB,cAGb,SAASgmB,EAAOmG,GACd,OAAOA,EAGT,SAASrG,EAAkBzT,GAAM,IACvBjS,EAAqBiS,EAArBjS,KAAMgsB,EAAe/Z,EAAf+Z,WAUd,MATe,CACbvG,EAAQzlB,GADK,WAETgsB,EAAWzR,KAAI,SAAA0R,GAEjB,GAAwB,UADQA,EAAxBjsB,KAC0B,OAAOslB,EAAa2G,GAFxB,IAGtBprB,EAAuBorB,EAAvBprB,MAAOxB,EAAgB4sB,EAAhB5sB,IAAK8lB,EAAW8G,EAAX9G,OACpB,gBAAUG,EAAazkB,GAAvB,YAAiC4kB,EAAQN,GAAzC,YAAoDG,EAAajmB,OAChEc,KAAK,MAPK,MASDA,KAAK,KAGrB,SAAS+rB,EAAqBja,GAC5B,GAAKA,EAAL,CADkC,IAE1BtG,EAAuCsG,EAAvCtG,SAAUG,EAA6BmG,EAA7BnG,WAAYC,EAAiBkG,EAAjBlG,aACxBogB,EAAgB1G,EAAQ9Z,GAE9B,GAD6C,UAAlBwgB,GAA+C,WAAlBA,EAChC,OAAOA,EAC/B,IAAM7H,EAASxY,GAAcA,EAAWyO,KAAI,SAAA6R,GAK1C,MADoB,CADhBA,EADFtI,WAE8BoI,EAD5BE,EADqBrI,aAGN4B,OAAOC,GAAQzlB,KAAK,QACtCA,KAAK,MACR,OAAO4L,EAAe,GAAH,OAAMogB,EAAN,YAAuB7H,EAAvB,eAAsC6H,EAAtC,YAAuD7H,IAG5E,SAASkB,EAAagE,GACpB,GAAKA,EAAL,CACA,IAAMlF,EAAS,GACPxS,EAA2B0X,EAA3B1X,QAASqT,EAAkBqE,EAAlBrE,OAAQxoB,EAAU6sB,EAAV7sB,MAIzB,OAHA2nB,EAAOnX,KAAK2E,EAAQlS,eAChBulB,GAAQb,EAAOnX,KAAKgY,GACxBb,EAAOnX,KAAKmY,EAAa3oB,IAClB2nB,EAAOnkB,KAAK,MAGrB,SAASksB,EAAkBC,GACzB,OAAOA,EAAO/R,KAAI,SAAAgS,GAAS,IACRC,EAAaD,EAAtBza,QAAagL,EAASyP,EAATzP,KACfwH,EAAS,CAACmB,EAAQ+G,IACxB,GAAI1P,EAAM,KACS2P,EAAoB3P,EAA7BhL,QAAiBwC,EAAYwI,EAAZxI,QACzBgQ,EAAOnX,KAAKsY,EAAQgH,GAASnY,EAAQiG,IAAIyN,GAAgB7nB,KAAK,OAEhE,OAAOmkB,EAAOnkB,KAAK,QAClBA,KAAK,QAGV,SAASusB,EAAeC,GACtB,OAAKA,EAEE,CAAC,YADYA,EAAZrY,QACqBiG,IAAIyN,GAAgBrC,OAAOC,GAAQzlB,KAAK,OAAOA,KAAK,KAF1D,GAKzB,SAASysB,EAAuBH,GAC9B,OAAKA,EACE,CAAChH,EAAQgH,EAAO3a,SAAU2T,EAAQgH,EAAO3P,OAD5B,GAItB,SAASoN,GAAsB2C,GAC7B,IAAKA,GAAgD,iBAArBA,EAA+B,OAAOpH,EAAQoH,GAD/B,IAEvC/a,EAA0C+a,EAA1C/a,QAASgb,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,UAAW/c,EAAgB6c,EAAhB7c,YAC9BsU,EAASmB,EAAQ3T,GAErB,OADI9B,IAAasU,GAAU,IAAJ,OAAQgB,EAAawH,GAArB,aAA+BxH,EAAayH,GAA5C,MAChBzI,EAGT,SAAS0I,GAAqBC,GAC5B,GAAKA,EACL,OAAOA,EAAgB1S,IAAIuO,GAAkBnD,OAAOC,GAAQzlB,KAAK,M,+uBCrRnE,SAAS+sB,GAAkBC,GACzB,GAA4B,iBAAjBA,EAA2B,OAAOA,EADN,IAETC,EAAeD,EAArC1U,qBACR,iBAnBF,SAAkC2U,GAAY,IAE1CnxB,EAIEmxB,EAJFnxB,KACAqc,EAGE8U,EAHF9U,YACAxI,EAEEsd,EAFFtd,QACqBud,EACnBD,EADF7U,oBAQF,MANe,CACbtc,EACAqxB,GAAwBhV,EAAa,gBACrCgV,GAAwBxd,EAAS,YACjC2V,EAAQ4H,IAEI1H,OAAOC,GAAQzlB,KAAK,KAMvBotB,CAAyBH,GAApC,KAGF,SAASI,GAAqBC,GAAiB,IACrCxxB,EAAgDwxB,EAAhDxxB,KAA+BkxB,EAAiBM,EAA1CzV,wBACd,gBAAU/b,EAAV,eAAqBixB,GAAkBC,ICvBzC,SAASO,GAAU3Q,GACjB,GAAKA,EAAL,CADuB,IAGIoQ,EAIvBpQ,EAJF/E,wBACAlI,EAGEiN,EAHFjN,QACAwI,EAEEyE,EAFFzE,YAGF,GAAsB,WAAlBmN,EADA1I,EADF/c,MAE8B,CAC9B,IAAM2tB,EAAYT,GAAkBC,GACpC,qBAAeQ,GAEjB,IAAM1B,EAAYqB,GAAwBhV,EAAa,gBACjD4Q,EAAQoE,GAAwBxd,EAAS,YAC/C,sBAAgB,CAACmc,EAAW/C,GAAOvD,OAAOC,GAAQzlB,KAAK,KAAvD,MCYF,SAASytB,GAAU3b,GAAM,IACf6K,EAAe7K,EAAf6K,KAAM7gB,EAASgW,EAAThW,KACd,IAAK6gB,EAAM,OAAO7gB,EAFK,IAGf+T,EAAsBiC,EAAtBjC,YAAa+M,EAAS9K,EAAT8K,KACfoK,EAAM,GAAH,OAAMlrB,EAAN,YAAcsqB,GAAUzJ,GAAM3c,KAAK,MAAnC,KACH0tB,EAAUH,GAAU3Q,GAC1B,MAAO,CAAC/M,EAAc,IAAH,OAAOmX,EAAP,KAAgBA,EAAK0G,GAASlI,OAAOC,GAAQzlB,KAAK,K,+uBCjCvE,SAAS2tB,GAAuB/Y,GAC9B,OAAKA,EACE,CAAC0Q,EAAQ1Q,EAAK2W,QAASnF,GAAUxR,EAAKpY,OAAQ8oB,EAAQ1Q,EAAKuT,SADhD,GAepB,SAASyF,GAAWhe,GAClB,OAAKA,EACDA,EAAMie,OAZFA,GADgBjZ,EAaiBhF,GAZjCie,MAAO/gB,EAAW8H,EAAX9H,OACA,GAAH,UAAO6gB,GAAuB7gB,IAA9B,GAA0C6gB,GAAuBE,KAC/DrI,OAAOC,GAAQzlB,KAAK,MAGpC,SAA0B4P,GAAO,IACvBP,EAAqBO,EAArBP,UACR,OAAOwb,EAAU,QADYjb,EAAVpT,MACa4d,IAAIgM,IAAWpmB,KAArB,UAA2C,WAAdqP,EAAyB,IAAM,IAA5D,OAAiEiW,EAAQjW,GAAzE,OAMnBye,CAAiBle,GAFL,GAZrB,IAA0BgF,EAChBiZ,EAAO/gB,ECJjB,SAASihB,GAAUC,GACjB,GAAKA,GAAgC,IAApBA,EAASnvB,OAA1B,CACA,IAAMovB,EAAcD,EAAS,GAAGE,UAAY,aAAe,GACrDC,EAAcH,EAAS5T,KAAI,SAAA5K,GAAO,IAC9B1T,EAAwB0T,EAAxB1T,KAAM8Y,EAAkBpF,EAAlBoF,KAAMT,EAAY3E,EAAZ2E,QACdnI,EAASlN,MAAM+U,QAAQM,GAAd,WAA6BA,EAAQnU,KAAK,MAA1C,KAAqD,GACpE,gBAAUlE,GAAV,OAAiBkQ,EAAjB,gBAA+Boa,GAAUxR,GAAzC,QACC5U,KAAK,MAER,qBAAeiuB,GAAf,OAA6BE,ICQ/B,SAASC,GAAYxZ,GAAM,IAERyZ,EACbzZ,EADFX,cAA4BE,EAC1BS,EAD0BT,QAASD,EACnCU,EADmCV,SAAUlG,EAC7C4G,EAD6C5G,KAFxB,EAGrB4G,EADmDR,mBAAoBka,OAFlD,MAE8D,GAF9D,EAE8EC,EACnG3Z,EADuF4Z,WAAuBla,EAC9GM,EAD8GN,QAASC,EACvHK,EADuHL,OAAQ3E,EAC/HgF,EAD+HhF,MAAOtP,EACtIsU,EADsItU,QAASqP,EAC/IiF,EAD+IjF,QAA6BE,EAC5K+E,EADwJF,mBAAiC+Z,EACzL7Z,EADyL6Z,IAAaC,EACtM9Z,EAD8LJ,OAA0Bma,EACxN/Z,EAHqB,KAE6MP,EAClOO,EADkOP,MAEhOmT,EAAU,CAACuG,GAAUY,GAAW,SAAUrJ,EAAQ+I,IACxD7G,EAAQxa,KAAKqe,EAASoD,IAClB3vB,MAAM+U,QAAQvT,IAAUknB,EAAQxa,KAAK1M,EAAQN,KAAK,MACtDwnB,EAAQxa,KAAKkH,EAAU+V,EAAa9V,EAASnG,IAE7CwZ,EAAQxa,KAAKqa,EAAsB,OAAQJ,EAAajZ,IAT/B,MAUCsgB,GAAa,GAA/B3c,EAViB,EAUjBA,QAASG,EAVQ,EAURA,KACjB0V,EAAQxa,KAAKqa,EAAsB1V,EAASyU,GAAWtU,IACvD0V,EAAQxa,KAAKqa,EAAsB,QAASjB,GAAW/R,IACvDmT,EAAQxa,KAAK6d,EAAU,WAAY+D,GAAeta,GAAStU,KAAK,QAChEwnB,EAAQxa,KAAKqa,EAAsB,SAAUjB,GAAW7R,IACxDiT,EAAQxa,KAAKqa,EAAsB,SAAUjB,GAAWsI,IACxDlH,EAAQxa,KAAKmgB,GAAwBxd,EAAS,aAC9C6X,EAAQxa,KAAK4gB,GAAWhe,IACxB4X,EAAQxa,KAAKsY,EAAQiJ,IACrB,IAAM3G,EAAMJ,EAAQhC,OAAOC,GAAQzlB,KAAK,KACxC,OAAO6P,EAAc,IAAH,OAAO+X,EAAP,KAAgBA,E,uOC1BpC,SAASiH,GAAsB/c,GAAM,IAEtBqY,EAETrY,EAFFiD,UAGF,OAAQuQ,EADJxT,EADFjS,OAGA,IAAK,SACH,iBAAWoqB,EAAaE,GAAxB,KACF,IAAK,QACH,OArBN,SAA4BrY,GAAM,IAElBgd,EAGVhd,EAHFiI,WACWoQ,EAETrY,EAFFiD,UACAlF,EACEiC,EADFjC,YAEF,IAAKsa,EAAU,MAAO,IAAP,OAAWF,EAAa6E,GAAxB,KACf,GAAIhwB,MAAM+U,QAAQsW,GAAW,MAAO,IAAP,OAAWA,EAAS/P,KAAI,SAAAoE,GAAG,iBAAQyL,EAAazL,GAArB,QAA8BgH,OAAOC,GAAQzlB,KAAK,MAA7E,KAC7B,IAAMmkB,EAASiC,GAAU+D,GACzB,OAAOta,EAAc,IAAH,OAAOsU,EAAP,KAAmBA,EAY1B4K,CAAmBjd,GAC5B,QACE,MAAO,IAIb,SAASkd,GAAqBld,GAAM,IAC1BnG,EAAwBmG,EAAxBnG,WACFwY,EAAS,CAACmB,EADgBxT,EAAZH,UAOpB,OALIhG,GAAoC,WAAtB,GAAOA,KACvBwY,EAAOtlB,OAAS,EAChBslB,EAAOnX,KAAK+e,EAAqBpgB,KAEnCwY,EAAOnX,KAAK6hB,GAAsB/c,IAC3BqS,EAAOqB,OAAOC,GAAQzlB,KAAK,I,uOCzBpC,IAAMivB,GAAqB,CACzBC,MCAF,SAAwBpd,GAAM,IAE1B6Y,EACE7Y,EADF6Y,OAAyB7E,EACvBhU,EADMiU,gBAAgDoJ,EACtDrd,EADuCsd,cAA2Bzd,EAClEG,EADkEH,QAAS0d,EAC3Evd,EAD2Eud,SAE3EvzB,EAAO,GACP0P,EAAW,GACf,OAAQ6jB,GACN,IAAK,SACH7jB,EAAW,CAACwd,EAAsBlX,IAClC,MACF,IAAK,QACHtG,EAAWoa,EAAwB9T,GACnChW,EAAOgW,EAAKud,GACZ,MACF,IAAK,QACHvzB,EAAOuqB,EAAgBvU,EAAKud,IAC5B,MACF,IAAK,YACL,IAAK,OACHvzB,EAAO,KAAH,OAAQgW,EAAKud,IACjB,MACF,IAAK,aACHvzB,EAAOuqB,EAAgBvU,EAAKud,IAC5B7jB,EAAW,CAAC8Z,EAAQQ,IAAZ,UAAgCF,EAAwB9T,KAMpE,MADmB,CAACwT,EAAQqF,GAASrF,EAAQ3T,GAAU2T,EAAQ6J,GAAcrzB,EAAM0P,EAASga,OAAOC,GAAQzlB,KAAK,MAC9FwlB,OAAOC,GAAQzlB,KAAK,MD5BtCsvB,UEZF,SAAmBxd,GAAM,IAEf6K,EAAwB7K,EAAxB6K,KAAMC,EAAkB9K,EAAlB8K,KAAMjN,EAAYmC,EAAZnC,QAChBqX,EAAMZ,GAAUzJ,EAAK7K,MACnByd,EAASzd,EAAKhW,KACd4xB,EAAUH,GAAU3Q,GAG1B,OAFID,EAAKzI,WAAU8S,EAAM,YAAH,OAAeA,IACjCrX,IAASqX,EAAM,GAAH,OAAMA,EAAN,YAAamG,GAAwBxd,EAAS,cACvD,CAAC,GAAD,OAAI4f,EAAJ,YAAcvI,EAAd,KAAsB0G,GAASlI,OAAOC,GAAQzlB,KAAK,MFK1D,MAAcgvB,GACdQ,OGhBF,SAAqB1d,GAAM,IAEjBgJ,EAAiChJ,EAAjCgJ,KAAMM,EAA2BtJ,EAA3BsJ,MAAO4J,EAAoBlT,EAApBkT,OAAQrT,EAAYG,EAAZH,QAC7BmJ,EAAKnJ,QAAUA,EACf,IAAM8d,EAAUrJ,GAAUtL,GACpB4U,EAAWtJ,GAAUhL,GAC3B,gBAAUqU,EAAV,YAAqBzK,EAArB,YAA+B0K,IHW/BC,QLIF,SAAyB/a,GAAM,IACrB+H,EAAe/H,EAAf+H,KAAM9c,EAAS+U,EAAT/U,KACNosB,EAAuCtP,EAAvCsP,MAAkB2D,EAAqBjT,EAAhCkT,UAAqBC,EAAWnT,EAAXmT,OAC9B3L,EAAS,CAAC,GAAD,OAAImB,EAAQzlB,GAAZ,YAAqBylB,EAAQ2G,IAAU,OAAQ3G,EAAQsK,GAAWxJ,GAAU0J,IAC3F,gBAAU3L,EAAOqB,OAAOC,GAAQzlB,KAAK,KAArC,MKPA+vB,YIlBF,SAAqBje,GAAM,IACnBgS,EAAahS,EAAbgS,SACFkM,EAAO5J,GAAUtU,EAAKsJ,OACtB6U,GAAY,EAChB,GAAInxB,MAAM+U,QAAQmc,GAAO,CACvB,OAAQlM,GACN,IAAK,IACHA,EAAW,KACX,MACF,IAAK,KACHA,EAAW,SACX,MACF,IAAK,UACL,IAAK,cACHmM,GAAY,EACZD,EAAO,GAAH,OAAMA,EAAK,GAAX,gBAAqBA,EAAK,IAK7BC,IAAWD,EAAO,IAAH,OAAOA,EAAKhwB,KAAK,MAAjB,MAEtB,IAAMgnB,EAAM,GAAH,OAAMZ,GAAUtU,EAAKgJ,MAArB,YAA8BgJ,EAA9B,YAA0CkM,GACnD,OAAOle,EAAKjC,YAAL,WAAuBmX,EAAvB,KAAgCA,GJJvCkJ,KKnBF,SAAmBpe,GACjB,IAAM1C,EAAM,CAAC,QACP+gB,EAAare,EAAK6K,KAEpB7K,EAAKA,MAAM1C,EAAIpC,KAAKoZ,GAAUtU,EAAKA,OAEvC,IAAK,IAAIvW,EAAI,EAAGyvB,EAAMmF,EAAWtxB,OAAQtD,EAAIyvB,IAAOzvB,EAClD6T,EAAIpC,KAAKmjB,EAAW50B,GAAGsE,KAAKJ,eACxB0wB,EAAW50B,GAAG60B,OAChBhhB,EAAIpC,KAAKoZ,GAAU+J,EAAW50B,GAAG60B,OACjChhB,EAAIpC,KAAK,SAEXoC,EAAIpC,KAAKoZ,GAAU+J,EAAW50B,GAAG4oB,SAKnC,OAFA/U,EAAIpC,KAAK,OAEFoC,EAAIpP,KAAK,MLGhBqwB,KLlBF,SAAmBve,GAAM,IACfwe,EAAqCxe,EAArCwe,OAAcC,EAAuBze,EAA7BA,KAAkBkT,EAAWlT,EAAXkT,OAC1BnmB,EAAyCyxB,EAAzCzxB,OAAQ2M,EAAiC8kB,EAAjC9kB,SAAUqE,EAAuBygB,EAAvBzgB,YAAauY,EAAUkI,EAAVlI,MACnCpB,EAAM,GACNnoB,IACFmoB,EAAMoB,EAAQ,GAAH,OAAMvpB,EAAN,aAAiBupB,GAAUvpB,GAEpCgR,IAAamX,EAAM,IAAH,OAAOA,EAAP,MACpB,IAAIuE,EAASnF,GAAUmK,GACnBC,EAAa,KACbrI,EAAS,GAMb,MALe,OAAXnD,IACFuG,EAAS,QAAH,OAAWA,GACjBpD,EAAS,IACTqI,EAAa,IAAH,OAAOxL,EAAOvlB,cAAd,MAEZ,UAAU8rB,GAAV,OAAmBiF,GAAnB,OAAgChlB,GAAhC,OAA2Cwb,GAA3C,OAAiDmB,IKGjDsI,WAAc5I,EACd6I,SAAcjD,GACdkD,SMtBF,SAAuBC,GAAc,IAC3B9e,EAAe8e,EAAf9e,KAAMwM,EAASsS,EAATtS,KAEd,MADe,CAAC,WAAY8H,GAAUtU,GAAOwT,EAAQhH,IACvCkH,OAAOC,GAAQzlB,KAAK,MNoBlC6wB,OAAc7B,GACd,OPGF,SAAkC8B,GAEhC,OADiBA,EAAThf,KACIsI,IAAIiT,IAAsBrtB,KAAK,QOS7C,SAASomB,GAAU2K,GACjB,IAAMjf,EAAOif,EACb,GAAIA,EAAWjjB,IAAK,KACVA,EAAQgE,EAARhE,IACRkjB,QAAQC,eAAenf,EAAMhE,GAC7B,cAAkB7R,OAAOqoB,KAAKxW,GAA9B,eAAoC,CAA/B,IAAMhR,EAAG,KACZgV,EAAKhV,GAAOgR,EAAIhR,IAGpB,OAAOmyB,GAAmBnd,EAAKjS,MAAQovB,GAAmBnd,EAAKjS,MAAMiS,GAAQqT,EAAarT,GAQ5F,SAAS8c,GAAezE,GACtB,OAAKA,EACEA,EAAS/P,IAAIgM,IADE,GAgBxB,SAAS+G,GAAwBrb,EAAMyZ,GACrC,IAAKzsB,MAAM+U,QAAQ/B,GAAO,MAAO,GACjC,IAAIof,EAAc,GACZC,EAAc7L,EAAQiG,GAC5B,OAAQ4F,GACN,IAAK,WACHD,EAAcpf,EAAKsI,KAAI,SAAAtG,GAAI,gBAAOsS,GAAUtS,EAAKhC,MAAtB,YAA+BgC,EAAKjU,SAC/D,MACF,IAAK,eAGL,QACEqxB,EAAcpf,EAAKsI,KAAI,SAAAtG,GAAI,gBAAO+T,EAAe/T,EAAKhC,UAG1D,OAAO+Y,EAAUsG,EAAaD,EAAYlxB,KAAK,O,+uBOjFjD,SAASoxB,GAAsBzlB,GAC7B,IAAKA,EAAY,MAAO,GADiB,InBiEbka,EACtBwL,EAEJ1f,EACA8U,EmBnEM4I,EAAa1jB,EAAb0jB,SACR,OAAQA,GACN,IAAK,SACH,OAAOrG,EAAsBrd,GAC/B,IAAK,QACH,OnB2DE0lB,EAAW,GAEf1f,GAH0BkU,EmB1DIla,GnB6D9BgG,QACA8U,EACEZ,EADFY,MAEF4K,EAASrkB,KAAKsY,EAAQ3T,IACtB0f,EAASrkB,KAAKyZ,GACd4K,EAASrkB,KAAT,MAAAqkB,EAAQ,EAASzL,EAAwBC,KAClCwL,EAAS7L,OAAOC,GAAQzlB,KAAK,KmBlElC,IAAK,aACH,OAAOsmB,EAA0B3a,GACnC,QACE,MAAM,IAAI7N,MAAJ,4BAA+BuxB,EAA/B,W,qhCCXZ,SAASiC,GAASC,GAChB,IAAKA,GAAwB,IAAhBA,EAAK1yB,OAAc,MAAO,GACvC,IAFsB,EAEhB2oB,EAAU,GAFM,KAGJ+J,GAHI,IAGtB,2BAAwB,KAAbC,EAAa,QAClBxK,EAAM,GACF3U,EAAyBmf,EAAzBnf,MAAOrG,EAAkBwlB,EAAlBxlB,OAAQxP,EAAUg1B,EAAVh1B,MACvBwqB,EAAM,CAAC3U,EAAOrG,GAAQwZ,OAAOC,GAAQrL,KAAI,SAAAtG,GAAI,OAAIuS,EAAgBvS,MAAO9T,KAAK,KACzExD,IAAOwqB,EAAM,GAAH,OAAMA,EAAN,cAAeZ,GAAU5pB,KACvCgrB,EAAQxa,KAAKga,IARO,8BAUtB,OAAOQ,EAAQxnB,KAAK,MCTtB,SAASyxB,GAAYC,GACnB,GAAoB,WAAhBA,EAAO7xB,KAAmB,OAAOuuB,GAAYsD,GACjD,IAAMlK,EAAUkK,EAAOtX,IAAIgM,IAC3B,iBAAWoB,EAAQxnB,KAAK,OAAxB,KAGF,SAAS2xB,GAAe7F,GACtB,IAAKA,EAAW,MAAO,GACvB,IAAM8F,EAAe,CAAC,YAAa,KACnC,GAAI9yB,MAAM+U,QAAQiY,GAChB8F,EAAa5kB,KAAK8e,EAAU1R,IAAIiM,GAAiBrmB,KAAK,WACjD,KACGxD,EAAUsvB,EAAVtvB,MACRo1B,EAAa5kB,KAAKxQ,EAAM4d,IAAIgM,IAAWpmB,KAAK,OAG9C,OADA4xB,EAAa5kB,KAAK,KACX4kB,EAAapM,OAAOC,GAAQzlB,KAAK,I,w2CCpB1C,SAAS6xB,GAAejd,GAAM,IACpB/U,EAAwB+U,EAAxB/U,KAAM8R,EAAkBiD,EAAlBjD,QAAS7V,EAAS8Y,EAAT9Y,KACjB0rB,EAAU,CAAClC,EAAQzlB,GAAOylB,EAAQ3T,IACxC,OAAQA,GACN,IAAK,QACH6V,EAAQxa,KAAKia,EAAYnrB,IACzB,MACF,IAAK,YACH0rB,EAAQxa,KAAKqZ,EAAgBvqB,IAKjC,OAAO0rB,EAAQhC,OAAOC,GAAQzlB,KAAK,KA+CrC,SAAS8xB,GAAgBld,GAAM,IACrB/U,EAA0B+U,EAA1B/U,KAAM8R,EAAoBiD,EAApBjD,QAASuV,EAAWtS,EAAXsS,OACjB/C,EAAS,CAACtkB,EAAKJ,cAAe6lB,EAAQ3T,IAC5C,GAA2B,WAAvB9R,EAAKJ,cAA4B,OAAO0kB,EAAOnkB,KAAK,KACxD,IAJ6B,EAIvB+xB,EAAY,GAJW,KAKL7K,GALK,yBAKlB9U,EALkB,QAMnBC,EAA+BD,EAA/BC,MAAkB2f,EAAa5f,EAAxB6f,UACTC,EAAgB,CAACpL,EAAWzU,IAClC,GAAI2f,EAAU,CAEZE,EAAcllB,KADM,CAAC,SAAU,OAAQ,UACRoN,KAAI,SAAAtd,GAAG,OAAIwoB,EAAQ0M,EAASl1B,OAAO0oB,OAAOC,GAAQzlB,KAAK,MAExF+xB,EAAU/kB,KAAKklB,EAAclyB,KAAK,OAPpC,2BAAgC,IALH,8BAe7B,OADAmkB,EAAOnX,KAAP,MAAAmX,EAAM,CAAM4N,EAAU/xB,KAAK,OAArB,UAzBR,SAAgB4U,GAAM,IACDud,EAAqBvd,EAAhCwd,UAAqBC,EAAWzd,EAAXyd,OACvBC,EAAW,GACjB,GAAIH,EAAU,KACJz1B,EAASy1B,EAATz1B,KACR41B,EAAStlB,KAAKtQ,EAAK+C,eAGrB,OADI4yB,GAAQC,EAAStlB,KAAKqlB,EAAO5yB,eAC1B6yB,EAiB8BC,CAAO3d,MACrCuP,EAAOqB,OAAOC,GAAQzlB,KAAK,KV1CpCivB,GAAkB,IATlB,SAAkBnd,GAAM,MAC2BA,EAAzCyZ,cADc,MACL,IADK,EACAzvB,EAA2BgW,EAA3BhW,KAAM02B,EAAqB1gB,EAArB0gB,QAAS7gB,EAAYG,EAAZH,QAC/Bia,EAAM,GACRja,GAASia,EAAI5e,KAAK2E,GACtB,IAAM8gB,EAAUD,GAAWA,EAAQ3zB,OAAS,EAA5B,UAAmC/C,EAAnC,YAA2C02B,EAAQxyB,KAAK,MAASlE,EAEjF,OADA8vB,EAAI5e,KAAJ,UAAYue,GAAU,IAAtB,OAA2BkH,IACpB7G,EAAI5rB,KAAK,MA2BlBivB,GAAmBla,UAAY,SAAAjD,GAC7B,IAAMkV,EAAM4H,GAAe9c,EAAKtV,OAChC,OAAOsV,EAAKjC,YAAL,WAAuBmX,EAAvB,KAAgCA,GAGzCiI,GAAmBvf,OAAS,SAAAoC,GAC1B,IAAMkV,EAA4B,WAAtB,GAAOlV,EAAKvB,OAAqBmiB,GAAW5gB,GAAQsc,GAAYtc,GAC5E,OAAOA,EAAKjC,YAAL,WAAuBmX,EAAvB,KAAgCA,GAGzCiI,GAAmB0D,WApBnB,SAAoB7gB,GAClB,IAAMkV,EAAM,GAAH,OAAMlV,EAAKgS,SAAX,YAAuBsC,GAAUtU,EAAKA,OAC/C,OAAOA,EAAKjC,YAAL,WAAuBmX,EAAvB,KAAgCA,GWnCzC,IAAM4L,GAAc,CAClB1D,MVfF,SAAoBta,GAAM,IAChB/U,EAA2B+U,EAA3B/U,KAAMwS,EAAqBuC,EAArBvC,MADU,EACWuC,EAAd9C,YADG,MACI,GADJ,EAMxB,MADe,CAHAwT,EAAQzlB,GAGC,QAFNonB,EAAY5U,GACbP,EAAKsI,IAAIgM,IAC2BpmB,KAAK,OAC5CwlB,OAAOC,GAAQzlB,KAAK,MUUlCnD,OJ2FF,SAAqB+X,GAAM,IACjBjD,EAAYiD,EAAZjD,QACJiW,EAAM,GACV,OAAQjW,EAAQ7C,eACd,IAAK,QACH8Y,EA9FN,SAA0BhT,GAAM,IAE5B/U,EAME+U,EANF/U,KAAM8R,EAMJiD,EANIjD,QAASU,EAMbuC,EANavC,MAAOwgB,EAMpBje,EANoBie,KAAMjhB,EAM1BgD,EAN0BhD,GAAIkhB,EAM9Ble,EAN8Bke,UACjB3D,EAKbva,EALFwa,cACoB2D,EAIlBne,EAJFoe,mBACeC,EAGbre,EAHFse,cACgBC,EAEdve,EAFFwe,eACYC,EACVze,EADF0e,WAEI1L,EAAM,CAACtC,EAAQzlB,GAAOylB,EAAQwN,GAAYxN,EAAQ3T,GAAU2T,EAAQ6J,GAAclI,EAAY5U,IACpG,GAAIwgB,EAAM,KACMU,EAA+BV,EAArChzB,KACF2zB,EAAgBvM,EADuB4L,EAArBxgB,OAGxB,OADAuV,EAAI5a,KAAKsY,EAAQiO,GAAWC,GACrB5L,EAAIpC,OAAOC,GAAQzlB,KAAK,KAUjC,OARI+yB,GACFnL,EAAI5a,KAAJ,WAAa+lB,EAAiB3Y,IAAIgX,IAAuBpxB,KAAK,MAA9D,MAEEizB,GACFrL,EAAI5a,KAAKimB,EAAa7Y,IAAIsN,GAAkB1nB,KAAK,MAEnD4nB,EAAI5a,KAAKsY,EAAQ6N,GAAgB7N,EAAQ1T,IACrCyhB,GAAWzL,EAAI5a,KAAK0lB,GAAWW,IAC5BzL,EAAIpC,OAAOC,GAAQzlB,KAAK,KAsErByzB,CAAiB7e,GACvB,MACF,IAAK,UACHgT,EAtEN,SAA4BhT,GAAM,IAE9B4R,EAQE5R,EARF4R,WAA2BkN,EAQzB9e,EARU+e,cACZC,EAOEhf,EAPFgf,WACAzH,EAMEvX,EANFuX,OAAQ0H,EAMNjf,EANMif,QACE1hB,EAKRyC,EALFkf,SAAmB9lB,EAKjB4G,EALiB5G,KACnBpQ,EAIEgX,EAJFhX,SACA+T,EAGEiD,EAHFjD,QACA9R,EAEE+U,EAFF/U,KAAMwS,EAEJuC,EAFIvC,MACN0hB,EACEnf,EADFmf,KAEInM,EAAM,CAACtC,EAAQzlB,GAAOylB,EAAQoO,GAAepO,EAAQ3T,GAAU0U,EAAgBG,GAAalB,EAAQ1nB,IACpGwuB,EAAQF,EAAkBC,GAMhC,OALAvE,EAAI5a,KAAKof,EAAO,KAAMtF,EAAWzU,IAC7BrE,GAAM4Z,EAAI5a,KAAK,OAAQ8Z,EAAW9Y,IACtC4Z,EAAI5a,KAAJ,MAAA4a,EAAG,GAAS6E,EAAuBmH,IAAhC,UAAgDnH,EAAuBta,MACtE4hB,GAAMnM,EAAI5a,KAAKsY,EAAQyO,EAAKl0B,MAAOumB,GAAU2N,EAAK3D,OACtDxI,EAAI5a,KAAKsY,EAAQuO,EAAQliB,SAAU8b,GAAUoG,EAAQ/hB,OAC9C8V,EAAIpC,OAAOC,GAAQzlB,KAAK,KAoDrBg0B,CAAmBpf,GACzB,MACF,IAAK,YACHgT,EApDN,SAA8BhT,GAAM,IAEhCqf,EAEErf,EAFFqf,UAAWjmB,EAET4G,EAFS5G,KAAqBmhB,EAE9Bva,EAFewa,cACjBzd,EACEiD,EADFjD,QAASuiB,EACPtf,EADOsf,OAAQr0B,EACf+U,EADe/U,KAAYs0B,EAC3Bvf,EAJ8B,KAGOwf,EACrCxf,EADqCwf,QAYzC,MAVY,CACV9O,EAAQzlB,GACRylB,EAAQ3T,GACR2T,EAAQ6J,GACRhK,EAAa8O,GACb3O,EAAQ6O,GACR9M,EAAsB,SAAUlC,EAAc+O,GAC9C7M,EAAsB,UAAWlC,EAAciP,GAC/C/M,EAAsB,OAAQlC,EAAcnX,IAEnCwX,OAAOC,GAAQzlB,KAAK,KAqCrBq0B,CAAqBzf,GAC3B,MACF,IAAK,QACHgT,EArCN,SAA0BhT,GAAM,IAE5B0f,EAGE1f,EAHF0f,aAA6BC,EAG3B3f,EAHY4f,cAA2B7iB,EAGvCiD,EAHuCjD,QAAS8iB,EAGhD7f,EAHgD6f,QAAwBC,EAGxE9f,EAHyD+f,cAC/C9P,EAEVjQ,EAFFoR,WAAoC4O,EAElChgB,EAFqBigB,YAAyBpO,EAE9C7R,EAF8C6R,MAAOjQ,EAErD5B,EAFqD4B,GAAWse,EAEhElgB,EAFyDmgB,MAAa1iB,EAEtEuC,EAFsEvC,MAAO2iB,EAE7EpgB,EAF6EogB,WAAYn1B,EAEzF+U,EAFyF/U,KAAMwU,EAE/FO,EAF+FP,MAC3F2Z,EACJpZ,EAL0B,KAIOqgB,EACjCrgB,EADcsgB,kBAEZC,EAAenH,GAAY,SAAJ,OAAatI,EAAqBsI,GAAUhuB,KAAK,MAAjD,KACvBo1B,EAAiBX,GAAW,GAAJ,OAAOnP,EAAQmP,EAAQ9iB,SAAvB,aAAoC8iB,EAAQtgB,QAAQiG,KAAI,SAAAoE,GAAG,OAAI6H,EAAgB7H,MAAMxe,KAAK,MAA1F,KACxB4nB,EAAM,CACVtC,EAAQzlB,GAAOylB,EAAQT,GAAYS,EAAQ3T,GAAU2T,EAAQgP,GAC7DjO,EAAgBI,GAAQnB,EAAQwP,GAAOhO,EAAWzU,IAF3C,UAEsDuS,EAAegQ,IAFrE,YAGH/H,GAAqB6H,GAHlB,KAGoCU,EAC3C/N,EAAsB,aAAclC,EAAc6P,KAQpD,OANIC,EACFrN,EAAI5a,KAAKmoB,EAAc9N,EAAsB,QAASjB,GAAW/R,IAEjEuT,EAAI5a,KAAKqa,EAAsB,QAASjB,GAAW/R,GAAQ8gB,GAE7DvN,EAAI5a,KAAKqa,EAAsB,KAAMjB,GAAW5P,GAAK6Q,EAAsB,gBAAiBlC,EAAcoP,IACnG3M,EAAIpC,OAAOC,GAAQzlB,KAAK,KAiBrBq1B,CAAiBzgB,GACvB,MACF,QACE,MAAM,IAAI9W,MAAJ,iCAAoC6T,IAE9C,OAAOiW,GI7GPlY,OAAW0e,GACXkH,OClBF,SAAqB1gB,GACnB,IAAM4S,EAAU,CAAC,UACTrT,EAAgDS,EAAhDT,QAASnG,EAAuC4G,EAAvC5G,KAAMqE,EAAiCuC,EAAjCvC,MAAOgC,EAA0BO,EAA1BP,MAAO1E,EAAmBiF,EAAnBjF,QAASC,EAAUgF,EAAVhF,MACxC2U,EAAa0F,EAAa9V,EAASnG,GASzC,OARAwZ,EAAQxa,KAAKuX,GACTzlB,MAAM+U,QAAQxB,KACO,IAAjBA,EAAMxT,SAAsC,IAAtBwT,EAAM,GAAGkjB,UAAoB/N,EAAQxa,KAAKia,EAAY5U,KAEpFmV,EAAQxa,KAAKqa,EAAsB,OAAQJ,EAAajZ,IACxDwZ,EAAQxa,KAAKqa,EAAsB,QAASjB,GAAW/R,IACvDmT,EAAQxa,KAAKmgB,GAAwBxd,EAAS,aAC9C6X,EAAQxa,KAAK4gB,GAAWhe,IACjB4X,EAAQhC,OAAOC,GAAQzlB,KAAK,MDOnCw1B,OHHF,SAAqB5gB,GAAM,IACjBvC,EAAiDuC,EAAjDvC,MAAOmf,EAA0C5c,EAA1C4c,IAAKnd,EAAqCO,EAArCP,MAAO1E,EAA8BiF,EAA9BjF,QAASC,EAAqBgF,EAArBhF,MAAO4c,EAAc5X,EAAd4X,UAU3C,MATgB,CACd,SACAvF,EAAY5U,GACZgV,EAAsB,MAAOiK,GAAUE,GACvCnK,EAAsB,QAASjB,GAAW/R,GAC1C8Y,GAAwBxd,EAAS,YACjCie,GAAWhe,GACX2c,EAAeC,IAEFhH,OAAOC,GAAQzlB,KAAK,MGPnCy1B,OFGF,SAAqB7gB,GAAM,IAEvBvC,EASEuC,EATFvC,MAFuB,EAWrBuC,EARF2W,cAHuB,MAGd,OAHc,EAIvBpX,EAOES,EAPFT,QACAud,EAME9c,EANF8c,OACArd,EAKEO,EALFP,MACqBqhB,EAInB9gB,EAJF+gB,oBACA7J,EAGElX,EAHFkX,UACAU,EAEE5X,EAFF4X,UACAgF,EACE5c,EADF4c,IAEIhK,EAAU,CAAC,SAAUlC,EAAQiG,GAAStE,EAAY5U,GAAQsf,GAAe7F,IAO/E,OANIhtB,MAAM+U,QAAQM,IAAUqT,EAAQxa,KAAR,WAAiBmH,EAAQiG,IAAIiM,GAAiBrmB,KAAK,MAAnD,MAC5BwnB,EAAQxa,KAAKqa,EAAsBvoB,MAAM+U,QAAQ6d,GAAU,SAAW,GAAID,GAAaC,IACvFlK,EAAQxa,KAAKqa,EAAsB,MAAOiK,GAAUE,IACpDhK,EAAQxa,KAAKqa,EAAsB,QAASjB,GAAW/R,IACvDmT,EAAQxa,KAAKuf,EAAeC,IAC5BhF,EAAQxa,KAAKqa,EAAsBqO,GAAqBA,EAAkB/jB,QAAS2f,GAAUoE,GAAqBA,EAAkBlE,MAC7HhK,EAAQhC,OAAOC,GAAQzlB,KAAK,MErBnC41B,KAAW/D,GACXgE,SAAWhE,GACXiE,QDuDF,SAAsBlhB,GAAM,IAClB/U,EAAkB+U,EAAlB/U,KAAMi2B,EAAYlhB,EAAZkhB,QACR3R,EAAS,CAACmB,EAAQzlB,IAClBiU,EAAOgiB,EAAQ1b,KAAI,SAAA2b,GAAO,IACtBC,EAA8CD,EAA9CC,GAAIl6B,EAA0Ci6B,EAA1Cj6B,KAAM8V,EAAoCmkB,EAApCnkB,GAAI2Z,EAAgCwK,EAAhCxK,OAAQ5f,EAAwBoqB,EAAxBpqB,WAAYgG,EAAYokB,EAAZpkB,QACpCskB,EAAc,CAAC,GAAD,OAAID,GAAJ,OAASl6B,GAAQwpB,EAAQ1T,IAC7C,OAAQD,GACN,IAAK,WACHskB,EAAYjpB,KAAKkb,EAAeqD,IAC5B5f,GAAYsqB,EAAYjpB,KAAK,IAAKoZ,GAAUza,IAChD,MACF,IAAK,SACHsqB,EAAYjpB,KAAKsY,EAAQiG,IACzB,MACF,IAAK,QACH0K,EAAYjpB,KAAKsY,EAAQiG,GAAzB,WAAsC5f,EAAWyO,IAAIgX,IAAuBpxB,KAAK,MAAjF,MAKJ,OAAOi2B,EAAYzQ,OAAOC,GAAQzlB,KAAK,QACtCA,KAAK,MAER,OADAmkB,EAAOnX,KAAK8G,GACLqQ,EAAOnkB,KAAK,MC7EnBk2B,IDKF,SAAkBthB,GAAM,IACd/U,EAAa+U,EAAb/U,KAAMmU,EAAOY,EAAPZ,GACR2W,EAASrF,EAAQzlB,GACjBknB,EAAWV,EAAgBrS,GACjC,gBAAU2W,EAAV,YAAoB5D,ICRpBoP,ODTF,SAAqBvhB,GAAM,IACjB/U,EAAgB+U,EAAhB/U,KAAMwS,EAAUuC,EAAVvC,MACRmV,EAAU,GACV+D,EAAS,GAAH,OAAM1rB,GAAQA,EAAKJ,cAAnB,UACZ,GAAI4S,EAAO,YACYA,GADZ,IACT,2BAA4B,KACpB+jB,EADoB,QACAhc,IAAI0M,GAC9BU,EAAQxa,KAAKopB,EAAWp2B,KAAK,UAHtB,+BAMX,gBAAUurB,EAAV,YAAoB/D,EAAQxnB,KAAK,QCAjCtE,KDUF,SAAmBkZ,GACjB,IACMyhB,EAAmBjQ,GAAUxR,EAAK9C,MACxC,gBAFa,OAEb,YAAkBukB,ICZlB7E,IDeF,SAAqB5c,GAAM,IAGnBgX,EAAMxF,GAFKxR,EAAT9C,MAGR,gBAFe,MAEf,YAAoB8Z,IClBpB0K,KAAWxE,GACXyE,OAAWzE,IAGb,SAASY,GAAW9d,GAIlB,IAHA,IAAM4hB,EAAM5D,GAAYhe,EAAK/U,MACvBuP,EAAM,CAAConB,EAAI5hB,IAFO,EAGKA,EAArB6hB,EAHgB,EAGhBA,SAAUC,EAHM,EAGNA,OACX9hB,EAAKrE,OAAO,CACjB,IAAMomB,GAAgB/hB,EAAKpE,OAAS,SAAS/Q,cAC7C2P,EAAIpC,KAAK2pB,EAAcH,EAAI5hB,EAAKrE,QAChCqE,EAAOA,EAAKrE,MAGd,OADAnB,EAAIpC,KAAKmgB,GAAwBsJ,EAAU,YAAa7I,GAAW8I,IAC5DtnB,EAAIoW,OAAOC,GAAQzlB,KAAK,KE9CjC,IAAM42B,GAAiB,CAAC,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,WAAY,OAAQ,MAAO,QAAS,MAAO,SAAU,OAAQ,SAAU,WAAY,WAErK,SAASC,GAAe/kB,GACtB,IAAMhE,EAAMgE,GAAQA,EAAKhE,IAAMgE,EAAKhE,IAAMgE,EAC1C,IAAK8kB,GAAeE,SAAShpB,EAAIjO,MAAO,MAAM,IAAI/B,MAAJ,UAAagQ,EAAIjO,KAAjB,4CAGjC,SAASk3B,GAAMjpB,GAC5B,OAAIhP,MAAM+U,QAAQ/F,IAChBA,EAAIqE,QAAQ0kB,IFgDhB,SAAuBjiB,GAErB,IADA,IAAMxF,EAAM,GACH7T,EAAI,EAAGyvB,EAAMpW,EAAK/V,OAAQtD,EAAIyvB,IAAOzvB,EAAG,CAC/C,IAAIy7B,EAAUpiB,EAAKrZ,IAAMqZ,EAAKrZ,GAAGuS,IAC5BkpB,IAASA,EAAUpiB,EAAKrZ,IAC7B6T,EAAIpC,KAAK0lB,GAAWsE,IAEtB,OAAO5nB,EAAIpP,KAAK,OEtDPi3B,CAAcnpB,KAEvB+oB,GAAe/oB,GAEF,aADIA,EAATjO,MFqCMmuB,GADOpZ,EEnCyB9G,GFmCnB,KACH+B,EAAwC+E,EAAxC/E,YAAaH,EAA2BkF,EAA3BlF,OAAQC,EAAmBiF,EAAnBjF,QAASC,EAAUgF,EAAVhF,OAChDuU,EAAS,CAAC4J,GAAUC,GAAWne,GAAe,IAAK6iB,GAAWhjB,GAASG,GAAe,MAErF7C,KAAKmgB,GAAwBxd,EAAS,YAAaie,GAAWhe,IAC9DuU,EAAOqB,QAAO,SAAAoG,GAAG,OAAIA,KAAK5rB,KAAK,MEvC/B0yB,GAAW5kB,IARe,IF0CZ8G,EACPoZ,EAAUne,EAAaH,EAAQC,EAASC,EAChDuU,E,gsCGOO+S,G,oLAvDNtP,GAAwB,IAAnBgD,EAAmB,uDAAbH,EACVuM,EAAUn5B,KAAKuC,MAAMwnB,EAAKgD,GAChC,OAAOoM,GAAWA,EAAQlpB,M,6BAGrBA,GAAwB,IAAnB8c,EAAmB,uDAAbH,EAEhB,OADAW,EAAaR,GACNuM,GAASrpB,K,4BAGZ8Z,GAAwB,IAAnBgD,EAAmB,uDAAbH,EAAa,EACoBG,EAAxC7D,gBADoB,MACRpC,WADQ,EAE5ByG,EAAaR,GACb,IAAMwM,EAAWrQ,EAASjY,cAC1B,GAAIuoB,EAAQD,GAAW,OAAOC,EAAQD,GAAUxP,EAAI0P,QACpD,MAAM,IAAIx5B,MAAJ,UAAaipB,EAAb,kC,qCAGOa,EAAK2P,GAA8B,IAAnB3M,EAAmB,uDAAbH,EACnC,GAAK8M,GAAkC,IAArBA,EAAU14B,OAA5B,CADgD,MAErB+rB,EAAnB/qB,YAFwC,MAEjC,QAFiC,EAGhD,IAAKhC,KAAK,GAAL,OAAQgC,EAAR,UAAsD,mBAAxBhC,KAAK,GAAL,OAAQgC,EAAR,SAAoC,MAAM,IAAI/B,MAAJ,UAAa+B,EAAb,6BAC7E,IAJgD,EAI1C23B,EAAW35B,KAAK,GAAL,OAAQgC,EAAR,SAAoB9C,KAAKc,MACpC45B,EAAgBD,EAAS5P,EAAKgD,GAChC8M,GAAe,EACfC,EAAW,GAPiC,KAQxBF,GARwB,IAQhD,2BAAuC,OAA5BG,EAA4B,QACjCC,GAA4B,EADK,KAERN,GAFQ,IAErC,2BAAwC,KAA7BO,EAA6B,QAChCC,EAAQ,IAAIC,OAAOF,EAAgB,KACzC,GAAIC,EAAMlZ,KAAK+Y,GAAY,CACzBC,GAA4B,EAC5B,QANiC,8BASrC,IAAKA,EAA2B,CAC9BF,EAAWC,EACXF,GAAe,EACf,QApB4C,8BAuBhD,IAAKA,EAAc,MAAM,IAAI55B,MAAJ,uBAA0B65B,EAA1B,4BAAsD93B,EAAtD,wCAA0F+nB,EAA1F,S,gCAGjBA,EAAKgD,GACb,IAAMoM,EAAUn5B,KAAKuC,MAAMwnB,EAAKgD,GAChC,OAAOoM,GAAWA,EAAQjpB,Y,iCAGjB6Z,EAAKgD,GACd,IAAMoM,EAAUn5B,KAAKuC,MAAMwnB,EAAKgD,GAChC,OAAOoM,GAAWA,EAAQ/oB,gB,kCChD1BgqB,QAAUA,OAAOzjB,SACnByjB,OAAOzjB,OAAO0jB,cAAgB,CAC5BhB,UACAiB","file":"bigquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n            return { name, stmt };\n          },\n      peg$c19 = function(sv, d, c, f, fs, w, g, h, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                groupby: g,\n                having: h,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, l) {\n          return `${n}[offset(${l.value})]`\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`);\n            if (pro) tbl = `${tbl}.${pro[0]}`\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c38 = function(i) { return i; },\n      peg$c39 = \"unnest\",\n      peg$c40 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c41 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c42 = function(l) { return l; },\n      peg$c43 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c44 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c45 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n            })\n            return tail;\n          },\n      peg$c46 = function(t) { return t; },\n      peg$c47 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c48 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c49 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c50 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c51 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c52 = function() { return 'LEFT JOIN'; },\n      peg$c53 = function() { return 'RIGHT JOIN'; },\n      peg$c54 = function() { return 'FULL JOIN'; },\n      peg$c55 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c56 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c57 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c58 = function(e) { return e; },\n      peg$c59 = function(e) { return e.value; },\n      peg$c60 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c61 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c62 = function(n) { return n },\n      peg$c63 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c64 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c65 = \"range\",\n      peg$c66 = peg$literalExpectation(\"RANGE\", true),\n      peg$c67 = \"unbounded\",\n      peg$c68 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c69 = \"preceding\",\n      peg$c70 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c71 = \"current\",\n      peg$c72 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c73 = \"ROW\",\n      peg$c74 = peg$literalExpectation(\"ROW\", false),\n      peg$c75 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c76 = \"rows\",\n      peg$c77 = peg$literalExpectation(\"ROWS\", true),\n      peg$c78 = \"following\",\n      peg$c79 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c80 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c81 = function(bc) { return bc; },\n      peg$c82 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c83 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c84 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c85 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c86 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c87 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c88 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c90 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c91 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c92 = \"!\",\n      peg$c93 = peg$literalExpectation(\"!\", false),\n      peg$c94 = \"=\",\n      peg$c95 = peg$literalExpectation(\"=\", false),\n      peg$c96 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c97 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c98 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c99 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c100 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c101 = \">=\",\n      peg$c102 = peg$literalExpectation(\">=\", false),\n      peg$c103 = \">\",\n      peg$c104 = peg$literalExpectation(\">\", false),\n      peg$c105 = \"<=\",\n      peg$c106 = peg$literalExpectation(\"<=\", false),\n      peg$c107 = \"<>\",\n      peg$c108 = peg$literalExpectation(\"<>\", false),\n      peg$c109 = \"<\",\n      peg$c110 = peg$literalExpectation(\"<\", false),\n      peg$c111 = \"!=\",\n      peg$c112 = peg$literalExpectation(\"!=\", false),\n      peg$c113 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c114 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c115 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c116 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c117 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c118 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c119 = \"+\",\n      peg$c120 = peg$literalExpectation(\"+\", false),\n      peg$c121 = \"-\",\n      peg$c122 = peg$literalExpectation(\"-\", false),\n      peg$c123 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c124 = \"*\",\n      peg$c125 = peg$literalExpectation(\"*\", false),\n      peg$c126 = \"/\",\n      peg$c127 = peg$literalExpectation(\"/\", false),\n      peg$c128 = \"%\",\n      peg$c129 = peg$literalExpectation(\"%\", false),\n      peg$c130 = function(e) {\n            e.parentheses = true;\n            return e;\n          },\n      peg$c131 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c132 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c133 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c134 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c135 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c136 = function(name) {\n            return name;\n          },\n      peg$c137 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c138 = \"\\\"\",\n      peg$c139 = peg$literalExpectation(\"\\\"\", false),\n      peg$c140 = /^[^\"]/,\n      peg$c141 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c142 = function(chars) { return chars.join(''); },\n      peg$c143 = \"'\",\n      peg$c144 = peg$literalExpectation(\"'\", false),\n      peg$c145 = /^[^']/,\n      peg$c146 = peg$classExpectation([\"'\"], true, false),\n      peg$c147 = \"`\",\n      peg$c148 = peg$literalExpectation(\"`\", false),\n      peg$c149 = /^[^`]/,\n      peg$c150 = peg$classExpectation([\"`\"], true, false),\n      peg$c151 = function(name) {\n          return name;\n        },\n      peg$c152 = function(name) { return name; },\n      peg$c153 = function(start, parts) { return start + parts.join(''); },\n      peg$c154 = /^[A-Za-z_]/,\n      peg$c155 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c156 = /^[A-Za-z0-9_]/,\n      peg$c157 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c158 = /^[A-Za-z0-9_:]/,\n      peg$c159 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c160 = \":\",\n      peg$c161 = peg$literalExpectation(\":\", false),\n      peg$c162 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c163 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c164 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c165 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c166 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c167 = function(e) { return { expr: e }; },\n      peg$c168 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c169 = function() { return { type: 'star', value: '*' }; },\n      peg$c170 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c171 = function(name, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c172 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c173 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c174 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c175 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c176 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c177 = function(ca) {\n            return {\n              type: 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c178 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c179 = function(type, lf, rt) { if (lf && rt) return true },\n      peg$c180 = \"on update current_timestamp\",\n      peg$c181 = peg$literalExpectation(\"ON UPDATE CURRENT_TIMESTAMP\", true),\n      peg$c182 = function(type, lf, rt, up) {\n            return {\n              type: 'origin',\n              value: (up ? `${type} ${up}` : type).toLowerCase()\n            };\n          },\n      peg$c183 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c184 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c185 = /^[^'\\\\]/,\n      peg$c186 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c187 = \"\\\\'\",\n      peg$c188 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c189 = function() { return \"'\";  },\n      peg$c190 = \"\\\\\\\"\",\n      peg$c191 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c192 = function() { return '\"';  },\n      peg$c193 = \"\\\\\\\\\",\n      peg$c194 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c195 = function() { return \"\\\\\"; },\n      peg$c196 = \"\\\\/\",\n      peg$c197 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c198 = function() { return \"/\";  },\n      peg$c199 = \"\\\\b\",\n      peg$c200 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c201 = function() { return \"\\b\"; },\n      peg$c202 = \"\\\\f\",\n      peg$c203 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c204 = function() { return \"\\f\"; },\n      peg$c205 = \"\\\\n\",\n      peg$c206 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c207 = function() { return \"\\n\"; },\n      peg$c208 = \"\\\\r\",\n      peg$c209 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c210 = function() { return \"\\r\"; },\n      peg$c211 = \"\\\\t\",\n      peg$c212 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c213 = function() { return \"\\t\"; },\n      peg$c214 = \"\\\\u\",\n      peg$c215 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c216 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c217 = \"\\\\\",\n      peg$c218 = peg$literalExpectation(\"\\\\\", false),\n      peg$c219 = /^[\\n\\r]/,\n      peg$c220 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c221 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c222 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c223 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c224 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c225 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c226 = function(op, digits) { return \"-\" + digits; },\n      peg$c227 = function(op, digit) { return \"-\" + digit; },\n      peg$c228 = \".\",\n      peg$c229 = peg$literalExpectation(\".\", false),\n      peg$c230 = function(digits) { return \".\" + digits; },\n      peg$c231 = function(e, digits) { return e + digits; },\n      peg$c232 = function(digits) { return digits.join(\"\"); },\n      peg$c233 = /^[0-9]/,\n      peg$c234 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c235 = /^[0-9a-fA-F]/,\n      peg$c236 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c237 = /^[eE]/,\n      peg$c238 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c239 = /^[+\\-]/,\n      peg$c240 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c241 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c242 = \"null\",\n      peg$c243 = peg$literalExpectation(\"NULL\", true),\n      peg$c244 = \"default\",\n      peg$c245 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c246 = \"not null\",\n      peg$c247 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c248 = \"true\",\n      peg$c249 = peg$literalExpectation(\"TRUE\", true),\n      peg$c250 = \"to\",\n      peg$c251 = peg$literalExpectation(\"TO\", true),\n      peg$c252 = \"false\",\n      peg$c253 = peg$literalExpectation(\"FALSE\", true),\n      peg$c254 = \"drop\",\n      peg$c255 = peg$literalExpectation(\"DROP\", true),\n      peg$c256 = function() { return 'DROP'; },\n      peg$c257 = \"use\",\n      peg$c258 = peg$literalExpectation(\"USE\", true),\n      peg$c259 = \"select\",\n      peg$c260 = peg$literalExpectation(\"SELECT\", true),\n      peg$c261 = \"if not exists\",\n      peg$c262 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c263 = \"RECURSIVE\",\n      peg$c264 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c265 = \"ignore\",\n      peg$c266 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c267 = \"explain\",\n      peg$c268 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c269 = \"partition\",\n      peg$c270 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c271 = function() { return 'PARTITION' },\n      peg$c272 = \"into\",\n      peg$c273 = peg$literalExpectation(\"INTO\", true),\n      peg$c274 = \"from\",\n      peg$c275 = peg$literalExpectation(\"FROM\", true),\n      peg$c276 = \"set\",\n      peg$c277 = peg$literalExpectation(\"SET\", true),\n      peg$c278 = \"unlock\",\n      peg$c279 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c280 = \"lock\",\n      peg$c281 = peg$literalExpectation(\"LOCK\", true),\n      peg$c282 = \"table\",\n      peg$c283 = peg$literalExpectation(\"TABLE\", true),\n      peg$c284 = function() { return 'TABLE'; },\n      peg$c285 = \"tables\",\n      peg$c286 = peg$literalExpectation(\"TABLES\", true),\n      peg$c287 = function() { return 'TABLES'; },\n      peg$c288 = \"collate\",\n      peg$c289 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c290 = function() { return 'COLLATE'; },\n      peg$c291 = \"on\",\n      peg$c292 = peg$literalExpectation(\"ON\", true),\n      peg$c293 = \"left\",\n      peg$c294 = peg$literalExpectation(\"LEFT\", true),\n      peg$c295 = \"right\",\n      peg$c296 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c297 = \"full\",\n      peg$c298 = peg$literalExpectation(\"FULL\", true),\n      peg$c299 = \"inner\",\n      peg$c300 = peg$literalExpectation(\"INNER\", true),\n      peg$c301 = \"cross\",\n      peg$c302 = peg$literalExpectation(\"CROSS\", true),\n      peg$c303 = \"join\",\n      peg$c304 = peg$literalExpectation(\"JOIN\", true),\n      peg$c305 = \"outer\",\n      peg$c306 = peg$literalExpectation(\"OUTER\", true),\n      peg$c307 = \"over\",\n      peg$c308 = peg$literalExpectation(\"OVER\", true),\n      peg$c309 = \"union\",\n      peg$c310 = peg$literalExpectation(\"UNION\", true),\n      peg$c311 = \"value\",\n      peg$c312 = peg$literalExpectation(\"VALUE\", true),\n      peg$c313 = function() { return 'VALUE' },\n      peg$c314 = \"values\",\n      peg$c315 = peg$literalExpectation(\"VALUES\", true),\n      peg$c316 = \"using\",\n      peg$c317 = peg$literalExpectation(\"USING\", true),\n      peg$c318 = \"where\",\n      peg$c319 = peg$literalExpectation(\"WHERE\", true),\n      peg$c320 = \"with\",\n      peg$c321 = peg$literalExpectation(\"WITH\", true),\n      peg$c322 = \"group\",\n      peg$c323 = peg$literalExpectation(\"GROUP\", true),\n      peg$c324 = \"by\",\n      peg$c325 = peg$literalExpectation(\"BY\", true),\n      peg$c326 = \"order\",\n      peg$c327 = peg$literalExpectation(\"ORDER\", true),\n      peg$c328 = \"having\",\n      peg$c329 = peg$literalExpectation(\"HAVING\", true),\n      peg$c330 = \"window\",\n      peg$c331 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c332 = \"limit\",\n      peg$c333 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c334 = \"offset\",\n      peg$c335 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c336 = function() { return 'OFFSET'; },\n      peg$c337 = \"asc\",\n      peg$c338 = peg$literalExpectation(\"ASC\", true),\n      peg$c339 = function() { return 'ASC'; },\n      peg$c340 = \"desc\",\n      peg$c341 = peg$literalExpectation(\"DESC\", true),\n      peg$c342 = function() { return 'DESC'; },\n      peg$c343 = \"all\",\n      peg$c344 = peg$literalExpectation(\"ALL\", true),\n      peg$c345 = function() { return 'ALL'; },\n      peg$c346 = \"distinct\",\n      peg$c347 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c348 = function() { return 'DISTINCT';},\n      peg$c349 = \"between\",\n      peg$c350 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c351 = function() { return 'BETWEEN'; },\n      peg$c352 = \"in\",\n      peg$c353 = peg$literalExpectation(\"IN\", true),\n      peg$c354 = function() { return 'IN'; },\n      peg$c355 = \"is\",\n      peg$c356 = peg$literalExpectation(\"IS\", true),\n      peg$c357 = function() { return 'IS'; },\n      peg$c358 = \"like\",\n      peg$c359 = peg$literalExpectation(\"LIKE\", true),\n      peg$c360 = function() { return 'LIKE'; },\n      peg$c361 = \"exists\",\n      peg$c362 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c363 = function() { return 'EXISTS'; },\n      peg$c364 = \"not\",\n      peg$c365 = peg$literalExpectation(\"NOT\", true),\n      peg$c366 = function() { return 'NOT'; },\n      peg$c367 = \"and\",\n      peg$c368 = peg$literalExpectation(\"AND\", true),\n      peg$c369 = function() { return 'AND'; },\n      peg$c370 = \"or\",\n      peg$c371 = peg$literalExpectation(\"OR\", true),\n      peg$c372 = function() { return 'OR'; },\n      peg$c373 = \"count\",\n      peg$c374 = peg$literalExpectation(\"COUNT\", true),\n      peg$c375 = function() { return 'COUNT'; },\n      peg$c376 = \"max\",\n      peg$c377 = peg$literalExpectation(\"MAX\", true),\n      peg$c378 = function() { return 'MAX'; },\n      peg$c379 = \"min\",\n      peg$c380 = peg$literalExpectation(\"MIN\", true),\n      peg$c381 = function() { return 'MIN'; },\n      peg$c382 = \"sum\",\n      peg$c383 = peg$literalExpectation(\"SUM\", true),\n      peg$c384 = function() { return 'SUM'; },\n      peg$c385 = \"avg\",\n      peg$c386 = peg$literalExpectation(\"AVG\", true),\n      peg$c387 = function() { return 'AVG'; },\n      peg$c388 = \"call\",\n      peg$c389 = peg$literalExpectation(\"CALL\", true),\n      peg$c390 = function() { return 'CALL'; },\n      peg$c391 = \"case\",\n      peg$c392 = peg$literalExpectation(\"CASE\", true),\n      peg$c393 = \"when\",\n      peg$c394 = peg$literalExpectation(\"WHEN\", true),\n      peg$c395 = \"then\",\n      peg$c396 = peg$literalExpectation(\"THEN\", true),\n      peg$c397 = \"else\",\n      peg$c398 = peg$literalExpectation(\"ELSE\", true),\n      peg$c399 = \"end\",\n      peg$c400 = peg$literalExpectation(\"END\", true),\n      peg$c401 = \"cast\",\n      peg$c402 = peg$literalExpectation(\"CAST\", true),\n      peg$c403 = \"array\",\n      peg$c404 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c405 = function() { return 'ARRAY'; },\n      peg$c406 = \"bytes\",\n      peg$c407 = peg$literalExpectation(\"BYTES\", true),\n      peg$c408 = function() { return 'BYTES'; },\n      peg$c409 = \"bool\",\n      peg$c410 = peg$literalExpectation(\"BOOL\", true),\n      peg$c411 = function() { return 'BOOL'; },\n      peg$c412 = \"char\",\n      peg$c413 = peg$literalExpectation(\"CHAR\", true),\n      peg$c414 = function() { return 'CHAR'; },\n      peg$c415 = \"geography\",\n      peg$c416 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c417 = function() { return 'GEOGRAPHY'; },\n      peg$c418 = \"varchar\",\n      peg$c419 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c420 = function() { return 'VARCHAR';},\n      peg$c421 = \"numeric\",\n      peg$c422 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c423 = function() { return 'NUMERIC'; },\n      peg$c424 = \"decimal\",\n      peg$c425 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c426 = function() { return 'DECIMAL'; },\n      peg$c427 = \"signed\",\n      peg$c428 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c429 = function() { return 'SIGNED'; },\n      peg$c430 = \"unsigned\",\n      peg$c431 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c432 = function() { return 'UNSIGNED'; },\n      peg$c433 = \"int64\",\n      peg$c434 = peg$literalExpectation(\"INT64\", true),\n      peg$c435 = function() { return 'INT64'; },\n      peg$c436 = \"zerofill\",\n      peg$c437 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c438 = function() { return 'ZEROFILL'; },\n      peg$c439 = \"integer\",\n      peg$c440 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c441 = function() { return 'INTEGER'; },\n      peg$c442 = \"json\",\n      peg$c443 = peg$literalExpectation(\"JSON\", true),\n      peg$c444 = function() { return 'JSON'; },\n      peg$c445 = \"smallint\",\n      peg$c446 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c447 = function() { return 'SMALLINT'; },\n      peg$c448 = \"string\",\n      peg$c449 = peg$literalExpectation(\"STRING\", true),\n      peg$c450 = function() { return 'STRING'; },\n      peg$c451 = \"struct\",\n      peg$c452 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c453 = function() { return 'STRUCT'; },\n      peg$c454 = \"tinyint\",\n      peg$c455 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c456 = function() { return 'TINYINT'; },\n      peg$c457 = \"tinytext\",\n      peg$c458 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c459 = function() { return 'TINYTEXT'; },\n      peg$c460 = \"text\",\n      peg$c461 = peg$literalExpectation(\"TEXT\", true),\n      peg$c462 = function() { return 'TEXT'; },\n      peg$c463 = \"mediumtext\",\n      peg$c464 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c465 = function() { return 'MEDIUMTEXT'; },\n      peg$c466 = \"longtext\",\n      peg$c467 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c468 = function() { return 'LONGTEXT'; },\n      peg$c469 = \"bigint\",\n      peg$c470 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c471 = function() { return 'BIGINT'; },\n      peg$c472 = \"float64\",\n      peg$c473 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c474 = function() { return 'FLOAT64'; },\n      peg$c475 = \"double\",\n      peg$c476 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c477 = function() { return 'DOUBLE'; },\n      peg$c478 = \"date\",\n      peg$c479 = peg$literalExpectation(\"DATE\", true),\n      peg$c480 = function() { return 'DATE'; },\n      peg$c481 = \"datetime\",\n      peg$c482 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c483 = function() { return 'DATETIME'; },\n      peg$c484 = \"time\",\n      peg$c485 = peg$literalExpectation(\"TIME\", true),\n      peg$c486 = function() { return 'TIME'; },\n      peg$c487 = \"timestamp\",\n      peg$c488 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c489 = function() { return 'TIMESTAMP'; },\n      peg$c490 = \"truncate\",\n      peg$c491 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c492 = function() { return 'TRUNCATE'; },\n      peg$c493 = \"user\",\n      peg$c494 = peg$literalExpectation(\"USER\", true),\n      peg$c495 = function() { return 'USER'; },\n      peg$c496 = \"current_date\",\n      peg$c497 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c498 = function() { return 'CURRENT_DATE'; },\n      peg$c499 = \"adddate\",\n      peg$c500 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c501 = function() { return 'ADDDATE'; },\n      peg$c502 = \"interval\",\n      peg$c503 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c504 = function() { return 'INTERVAL'; },\n      peg$c505 = \"year\",\n      peg$c506 = peg$literalExpectation(\"YEAR\", true),\n      peg$c507 = function() { return 'YEAR'; },\n      peg$c508 = \"month\",\n      peg$c509 = peg$literalExpectation(\"MONTH\", true),\n      peg$c510 = function() { return 'MONTH'; },\n      peg$c511 = \"day\",\n      peg$c512 = peg$literalExpectation(\"DAY\", true),\n      peg$c513 = function() { return 'DAY'; },\n      peg$c514 = \"hour\",\n      peg$c515 = peg$literalExpectation(\"HOUR\", true),\n      peg$c516 = function() { return 'HOUR'; },\n      peg$c517 = \"minute\",\n      peg$c518 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c519 = function() { return 'MINUTE'; },\n      peg$c520 = \"second\",\n      peg$c521 = peg$literalExpectation(\"SECOND\", true),\n      peg$c522 = function() { return 'SECOND'; },\n      peg$c523 = \"current_time\",\n      peg$c524 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c525 = function() { return 'CURRENT_TIME'; },\n      peg$c526 = \"current_timestamp\",\n      peg$c527 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c528 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c529 = \"global\",\n      peg$c530 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c531 = function() { return 'GLOBAL'; },\n      peg$c532 = \"session\",\n      peg$c533 = peg$literalExpectation(\"SESSION\", true),\n      peg$c534 = function() { return 'SESSION'; },\n      peg$c535 = \"local\",\n      peg$c536 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c537 = function() { return 'LOCAL'; },\n      peg$c538 = \"persist\",\n      peg$c539 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c540 = function() { return 'PERSIST'; },\n      peg$c541 = \"persist_only\",\n      peg$c542 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c543 = function() { return 'PERSIST_ONLY'; },\n      peg$c544 = \"add\",\n      peg$c545 = peg$literalExpectation(\"ADD\", true),\n      peg$c546 = function() { return 'ADD'; },\n      peg$c547 = \"column\",\n      peg$c548 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c549 = function() { return 'COLUMN'; },\n      peg$c550 = \"index\",\n      peg$c551 = peg$literalExpectation(\"INDEX\", true),\n      peg$c552 = function() { return 'INDEX'; },\n      peg$c553 = \"key\",\n      peg$c554 = peg$literalExpectation(\"KEY\", true),\n      peg$c555 = function() { return 'KEY'; },\n      peg$c556 = \"fulltext\",\n      peg$c557 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c558 = function() { return 'FULLTEXT'; },\n      peg$c559 = \"unique\",\n      peg$c560 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c561 = function() { return 'UNIQUE'; },\n      peg$c562 = \"comment\",\n      peg$c563 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c564 = function() { return 'COMMENT'; },\n      peg$c565 = \"constraint\",\n      peg$c566 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c567 = function() { return 'CONSTRAINT'; },\n      peg$c568 = \"references\",\n      peg$c569 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c570 = function() { return 'REFERENCES'; },\n      peg$c571 = \",\",\n      peg$c572 = peg$literalExpectation(\",\", false),\n      peg$c573 = \"[\",\n      peg$c574 = peg$literalExpectation(\"[\", false),\n      peg$c575 = \"]\",\n      peg$c576 = peg$literalExpectation(\"]\", false),\n      peg$c577 = \";\",\n      peg$c578 = peg$literalExpectation(\";\", false),\n      peg$c579 = \"||\",\n      peg$c580 = peg$literalExpectation(\"||\", false),\n      peg$c581 = \"&&\",\n      peg$c582 = peg$literalExpectation(\"&&\", false),\n      peg$c583 = \"/*\",\n      peg$c584 = peg$literalExpectation(\"/*\", false),\n      peg$c585 = \"*/\",\n      peg$c586 = peg$literalExpectation(\"*/\", false),\n      peg$c587 = \"--\",\n      peg$c588 = peg$literalExpectation(\"--\", false),\n      peg$c589 = \"#\",\n      peg$c590 = peg$literalExpectation(\"#\", false),\n      peg$c591 = peg$anyExpectation(),\n      peg$c592 = /^[ \\t\\n\\r]/,\n      peg$c593 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c594 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c595 = function(n) {\n            return n\n          },\n      peg$c596 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c597 = function(t) { return { dataType: t }; },\n      peg$c598 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestruct_value();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ALL();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_DISTINCT();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsefor_sys_time_as_of();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhere_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsegroup_by_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsehaving_clause();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsewindow_clause();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c19(s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_alias();\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c38(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c39) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewith_offset();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c41(s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FROM();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_ref_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c42(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c43(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c45(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c46(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c46(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c47(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c48(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c49(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c51(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c52();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c53();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c54();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_INNER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_CROSS();\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c55(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c59(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c62(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c63(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c64(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c65) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c67) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c68); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c70); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c71) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c73) {\n                            s12 = peg$c73;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c75();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c76) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c78) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c80(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c81(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c42(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parseparentheses_list_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsestruct_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parselogic_operator_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseor_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseselect_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsearray_expr();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c86(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c87(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c89(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c90(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c92;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c93); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c94;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c95); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c96(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseKW_AND();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecomparison_op_right();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c97(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c98(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c100(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c101) {\n      s0 = peg$c101;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c102); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c103;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c104); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c105) {\n          s0 = peg$c105;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c106); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c107) {\n            s0 = peg$c107;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c108); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c109;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c110); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c94;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c95); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c111) {\n                  s0 = peg$c111;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c113(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c114(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c115(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c117(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c118(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c119;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c120); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c121;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c122); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c123(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c124;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c126;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c127); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c128;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_func();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefunc_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinterval_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecolumn_ref();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseparam();\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parseLPAREN();\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse__();\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseexpr();\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse__();\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parseRPAREN();\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c130(s3);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseLPAREN();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse__();\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parseexpr_list();\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse__();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parseRPAREN();\n                          if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c131(s3);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c132(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c133(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c134(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c135(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c137(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c138;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c140.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c140.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c141); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c138;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c139); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c142(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c143;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c144); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c145.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c146); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c145.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c143;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c142(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c147;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c148); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c149.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c150); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c149.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c150); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c147;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c148); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c142(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c151(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c135(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c152(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c153(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c153(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c154.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c155); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c156.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c157); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c158.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c159); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c160;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c162(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c163(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c164(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c165(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c166(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c167(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c168(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c124;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c169();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c170(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsescalar_func();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseover_partition();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c171(s1, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c172(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c173();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c174();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c175();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c176();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c143;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c144); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsesingle_char();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsesingle_char();\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c143;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c177(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c138;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c139); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_quote_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_quote_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c138;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c139); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c177(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c143;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c143;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c144); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c178(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CURRENT_TIMESTAMP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c179(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 27).toLowerCase() === peg$c180) {\n                      s8 = input.substr(peg$currPos, 27);\n                      peg$currPos += 27;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c181); }\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c182(s1, s3, s5, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c183.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c184); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c185.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c187) {\n      s1 = peg$c187;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c189();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c190) {\n        s1 = peg$c190;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c191); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c192();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c193) {\n          s1 = peg$c193;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c194); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c195();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c196) {\n            s1 = peg$c196;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c197); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c198();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c199) {\n              s1 = peg$c199;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c200); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c201();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c202) {\n                s1 = peg$c202;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c203); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c204();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c205) {\n                  s1 = peg$c205;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c207();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c208) {\n                    s1 = peg$c208;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c209); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c210();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c211) {\n                      s1 = peg$c211;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c213();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c214) {\n                        s1 = peg$c214;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c215); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c216(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c217;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c195();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c219.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c220); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c221(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c222(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c223(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c224(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c225(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c121;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c122); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c119;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c120); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c226(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c121;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c122); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c119;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c120); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c227(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c228;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c229); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c230(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c231(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c232(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c233.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c234); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c235.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c237.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c239.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c240); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c241(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c242) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c243); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c244) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c246) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c248) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c249); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c250) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c251); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c252) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c253); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c254) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c255); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c256();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c257) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c258); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c259) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c260); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c261) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c262); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c263) {\n      s1 = peg$c263;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c264); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c265) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c266); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c267) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c268); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c269) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c270); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c271();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c272) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c273); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c274) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c275); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c276) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c277); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c278) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c279); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c280) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c282) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c283); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c284();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c285) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c286); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c287();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c288) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c289); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c290();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c291) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c292); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c293) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c294); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c295) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c296); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c297) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c298); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c299) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c300); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c301) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c302); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c303) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c304); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c305) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c306); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c307) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c308); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c309) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c310); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c311) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c312); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c313();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c314) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c315); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c318) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c320) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c321); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c322) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c326) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c327); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c328) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c330) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c331); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c332) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c333); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c336();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c339();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c340) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c341); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c342();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c343) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c344); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c345();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c346) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c347); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c348();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c349) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c350); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c351();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c354();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c357();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c358) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c359); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c363();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c364) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c365); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c366();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c367) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c368); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c369();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c372();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c375();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c376) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c377); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c378();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c379) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c380); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c381();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c382) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c383); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c384();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c385) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c386); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c387();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c388) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c389); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c390();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c391) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c393) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c394); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c395) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c396); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c397) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c398); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c399) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c400); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c401) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c402); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c403) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c404); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c405();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c406) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c407); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c408();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c409) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c410); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c411();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c412) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c413); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c414();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c415) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c416); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c417();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c418) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c419); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c420();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c421) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c422); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c423();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c424) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c425); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c426();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c427) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c428); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c429();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c430) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c431); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c432();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c433) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c435();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c436) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c437); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c438();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c439) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c440); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c441();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c442) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c443); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c444();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c445) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c446); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c447();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c448) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c450();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c451) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c452); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c453();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c454) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c455); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c456();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c457) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c458); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c459();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c460) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c461); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c462();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c463) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c464); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c465();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c466) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c468();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c469) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c470); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c471();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c472) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c473); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c474();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c475) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c476); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c477();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c478) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c479); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c480();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c481) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c482); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c483();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c484) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c485); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c486();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c487) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c488); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c489();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c490) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c491); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c492();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c493) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c494); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c495();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c496) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c497); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c498();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c499) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c500); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c501();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c502) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c503); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c504();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c505) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c506); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c507();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c508) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c509); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c510();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c511) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c512); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c513();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c514) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c515); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c516();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c517) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c518); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c519();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c520) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c521); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c522();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c523) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c524); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c525();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c526) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c527); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c528();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c529) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c530); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c531();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c532) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c533); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c534();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c535) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c536); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c537();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c538) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c539); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c540();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c541) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c542); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c543();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c544) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c545); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c546();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c547) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c548); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c549();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c550) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c551); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c552();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c553) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c554); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c555();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c556) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c557); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c558();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c559) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c560); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c561();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c562) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c563); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c564();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c565) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c566); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c567();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c568) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c569); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c570();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c228;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c229); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c571;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c572); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c124;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c109;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c110); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c103;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c573;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c574); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c575;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c576); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c577;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c578); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c579) {\n      s0 = peg$c579;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c581) {\n      s0 = peg$c581;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c582); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c583) {\n      s1 = peg$c583;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c584); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c585) {\n        s5 = peg$c585;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c586); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c585) {\n          s5 = peg$c585;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c586); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c585) {\n          s3 = peg$c585;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c586); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c587) {\n      s1 = peg$c587;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c588); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c589;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c590); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c592.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c593); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c219.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c220); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c219.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c220); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c594(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c595(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c596(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c598(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c598(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][3]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const columns = []\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          columns.push(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        columns.push(columnInfo.join(symbolChar))\n      }\n      return columns\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\nimport { exprToSQL } from './expr'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr } = tableInfo\n  const database = identifierToSql(db)\n  const tableName = table ? identifierToSql(table) : exprToSQL(expr)\n  const str = database ? `${database}.${tableName}` : tableName\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, table, parentheses, property,\n  } = expr\n  let str = column === '*' ? '*' : identifierToSql(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale } = definition || {}\n  let result = dataType\n  if (length) {\n    result += `(${[length, scale].filter(hasVal).join(', ')})`\n  }\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr } = column\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (column.as.match(/^[a-z_][0-9a-z_]*$/i)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\nconst escapeMap = {\n  '\\0'   : '\\\\0',\n  '\\''   : '\\\\\\'',\n  '\"'    : '\\\\\"',\n  '\\b'   : '\\\\b',\n  '\\n'   : '\\\\n',\n  '\\r'   : '\\\\r',\n  '\\t'   : '\\\\t',\n  '\\x1a' : '\\\\Z',\n  // '\\\\'   : '\\\\\\\\',\n}\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  const res = []\n  for (let i = 0, len = str.length; i < len; ++i) {\n    let char = str[i]\n    const escaped = escapeMap[char]\n    if (escaped) char = escaped\n    res.push(char)\n  }\n  return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'time':\n    case 'date':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, value } = opt\n  result.push(type.toUpperCase())\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowSpecificationToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { target, expr: expression, symbol } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length) {\n    str = scale ? `${length}, ${scale}` : length\n  }\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  if (!args) return name\n  const { parentheses, over } = expr\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  const overStr = overToSQL(over)\n  return [parentheses ? `(${str})` : str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${name}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  extract     : extractFunToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(expr) {\n  const str = `${expr.operator} ${exprToSQL(expr.expr)}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { columnDefinitionToSQL } from './column'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  const {\n    action, constraint_type: constraintType, if_not_exists: ifNotExists,keyword, resource,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = `= ${expr[resource]}`\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [toUpper(constraintType), ...indexTypeAndOptionToSQL(expr)]\n      break\n    default:\n      break\n  }\n  const alterArray = [toUpper(action), toUpper(keyword), toUpper(ifNotExists), name, dataType.filter(hasVal).join(' ')]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) str = `DISTINCT ${str}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  return [`${fnName}(${str})`, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = `${exprToSQL(expr.left)} ${operator} ${rstr}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    default:\n      throw new Error(`unknow resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns,\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknow create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    let str = ''\n    const { table, column, value } = set\n    str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    if (value) str = `${str} = ${exprToSQL(value)}`\n    clauses.push(str)\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('),(')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const clauses = ['INSERT', toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(onDuplicateUpdate && onDuplicateUpdate.keyword, setToSQL, onDuplicateUpdate && onDuplicateUpdate.set))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n}\n","import { columnDataType } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  commonCmdToSQL,\n  declareToSQL,\n  renameToSQL,\n  useToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { createToSQL } from './create'\nimport { alterToSQL } from './alter'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  commonCmdToSQL,\n  declareToSQL,\n  useToSQL,\n  renameToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}