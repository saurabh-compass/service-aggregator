{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/index.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/learning/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","escapeMap","'","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","toUpperCase","connector","str","createValueExpr","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","res","len","length","char","escaped","push","join","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","literalToSQL","literal","parentheses","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","commonTypeValue","result","toUpper","val","hasVal","onPartitionsToSQL","partitions","partition","start","end","symbol","arrayStructTypeToSQL","dataType","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","kw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","orderby","fnName","overStr","overToSQL","distinct","orderOrPartitionByToSQL","assign","leftVar","rightVal","extract","extractFunToSQL","binary_expr","rstr","isBetween","case","conditions","cond","cast","castToSQL","column_ref","function","funcToSQL","interval","intervalExpr","unit","struct","namedWindowExprListToSQL","exprOrigin","Reflect","deleteProperty","getExprListSQL","expressions","upperPrefix","info","members","varName","select","_next","unionToSQL","selectToSQL","unary_expr","arrow","as","collate","column","table","sql","columnDataType","suffix","scale","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onDelete","on_delete","onUpdate","on_update","tablesToSQL","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","columnOption","tables","baseTable","getDual","star","columnsStr","columnToSQL","tableToSQL","tableInfo","db","tableName","unnestExpr","withOffset","with_offset","unnestToSQL","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","composePrefixValSuffix","stmt","limitToSQL","limit","fetch","offset","seperator","limitOffsetToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","index","asStructVal","as_struct_val","from","for_sys_time_as_of","forSystem","forUpdate","for_update","groupby","having","options","parentheses_symbol","top","windowInfo","withInfo","where","withToSQL","target","expression","symbolChar","castType","cast_type","source","createDefinitionToSQL","resource","setToSQL","sets","set","valuesToSQL","values","partitionToSQL","partitionArr","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","typeToSQLFn","alterToSQL","like","temporary","ifNotExists","if_not_exists","createDefinition","create_definitions","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","execute","for_each","location","when","createTriggerToSQL","extension","schema","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","onKw","on_kw","tablespace","withExpr","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","delete","columnInfo","addition","update","insert","onDuplicateUpdate","on_duplicate_update","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","lock","unlock","fun","_orderby","_limit","unionKeyword","union","bigQueryToSQL","multipleToSQL","astInfo","constraintDefinition","constraintSQL","asWindowSpec","as_window_specification","partitionby","windowSQL","asWindowSpecToSQL","windowSpec","window_specification","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","isRecursive","recursive","withExprStr","cte","surportedTypes","checkSupported","includes","toSQL","Parser","this","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","test","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","replace","j","descriptions","sort","slice","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c40","peg$c66","peg$c68","peg$c70","peg$c72","peg$c74","peg$c77","peg$c79","peg$c91","createBinaryExprChain","peg$c93","peg$c95","peg$c99","nk","peg$c102","peg$c104","peg$c106","peg$c108","peg$c110","peg$c112","peg$c120","peg$c122","peg$c125","peg$c127","peg$c129","peg$c135","reservedMap","peg$c139","peg$c140","peg$c141","peg$classExpectation","peg$c142","chars","peg$c144","peg$c145","peg$c146","peg$c148","peg$c149","peg$c150","peg$c153","peg$c154","peg$c155","peg$c156","peg$c157","peg$c158","peg$c159","peg$c161","peg$c177","ca","peg$c181","peg$c183","peg$c184","peg$c185","peg$c186","peg$c188","peg$c191","peg$c194","peg$c197","peg$c200","peg$c203","peg$c206","peg$c209","peg$c212","peg$c215","peg$c218","peg$c219","peg$c220","peg$c229","peg$c233","peg$c234","peg$c235","peg$c236","peg$c237","peg$c238","peg$c239","peg$c240","peg$c243","peg$c249","peg$c253","peg$c260","peg$c270","peg$c275","peg$c292","peg$c294","peg$c296","peg$c298","peg$c300","peg$c302","peg$c304","peg$c306","peg$c308","peg$c310","peg$c312","peg$c317","peg$c319","peg$c321","peg$c323","peg$c325","peg$c327","peg$c329","peg$c331","peg$c333","peg$c335","peg$c338","peg$c341","peg$c344","peg$c347","peg$c350","peg$c353","peg$c356","peg$c359","peg$c362","peg$c365","peg$c368","peg$c371","peg$c374","peg$c377","peg$c380","peg$c383","peg$c386","peg$c404","peg$c407","peg$c410","peg$c416","peg$c422","peg$c434","peg$c449","peg$c452","peg$c473","peg$c479","peg$c482","peg$c485","peg$c488","peg$c497","peg$c503","peg$c506","peg$c509","peg$c512","peg$c515","peg$c518","peg$c521","peg$c524","peg$c527","peg$c572","peg$c574","peg$c576","peg$c578","peg$c580","peg$c582","peg$c584","peg$c586","peg$c588","peg$c590","peg$c591","peg$c592","peg$c593","peg$c597","peg$c598","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","columnListTableAlias","peg$c1","peg$parsemultiple_stmt","s9","s8","peg$parseKW_WITH","peg$parsecte_definition","peg$parseCOMMA","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","substr","peg$parseident_start","peg$parseKW_LIMIT","peg$parsenumber_or_param","peg$parseKW_OFFSET","i1","peg$c83","peg$parselimit_clause","with","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","peg$c15","s11","s13","s15","s17","s19","peg$parseKW_SELECT","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parseLPAREN","peg$parseexpr","peg$parseRPAREN","peg$parsealias_clause","peg$parsewith_offset","peg$parsetable_base","peg$parsetable_ref","unshift","tableAlias","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","add","peg$parseselect_stmt_nake","peg$parseident_name","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","tbl","pro","peg$parseident","peg$parseDOT","peg$parseLBRAKE","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parsecolumn_offset_expr","peg$parseexpr_alias","peg$c137","peg$parsequoted_ident","peg$parsealias_ident","s10","s12","s14","peg$parsejoin_op","peg$parseKW_USING","op","peg$parseon_clause","peg$c48","alias","peg$c49","peg$parsetable_join","peg$parsetable_name","peg$c51","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","peg$parseKW_CROSS","project","dt","obj","peg$c56","peg$c57","peg$parseKW_ON","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","e","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c82","peg$parseparam","el","peg$c84","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseand_expr","peg$parse___","peg$parseKW_OR","peg$parseor_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","peg$c86","peg$c87","peg$parsearray_expr","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","peg$parseliteral_string","peg$c118","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c114","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_COUNT","peg$parsestar_expr","peg$parsecount_arg","peg$parseover_partition","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$c172","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","bc","peg$c171","peg$parsefunc_call","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c134","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_TIME","peg$parseKW_DATE","peg$parseKW_TIMESTAMP","peg$parsesingle_char","lf","rt","peg$c179","up","peg$c182","peg$parseliteral_datetime","peg$parsesingle_quote_char","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parseint","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c223","exp","peg$c224","peg$c225","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parseKW_DATETIME","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","peg$parsedata_type","peg$c596","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","queryTableAlias","split","Set","global","NodeSQLParser","util","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","or","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","apply","valueOf","neg","out","digit","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\nconst escapeMap = {\n  '\\0'   : '\\\\0',\n  '\\''   : '\\\\\\'',\n  '\"'    : '\\\\\"',\n  '\\b'   : '\\\\b',\n  '\\n'   : '\\\\n',\n  '\\r'   : '\\\\r',\n  '\\t'   : '\\\\t',\n  '\\x1a' : '\\\\Z',\n  // '\\\\'   : '\\\\\\\\',\n}\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  const res = []\n  for (let i = 0, len = str.length; i < len; ++i) {\n    let char = str[i]\n    const escaped = escapeMap[char]\n    if (escaped) char = escaped\n    res.push(char)\n  }\n  return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'time':\n    case 'date':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, value } = opt\n  result.push(type.toUpperCase())\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  extract     : extractFunToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(expr) {\n  const str = `${expr.operator} ${exprToSQL(expr.expr)}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) str = `DISTINCT ${str}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  return [`${fnName}(${str})`, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = `${exprToSQL(expr.left)} ${operator} ${rstr}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, table, parentheses, property,\n  } = expr\n  let str = column === '*' ? '*' : identifierToSql(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale } = definition || {}\n  let result = dataType\n  if (length) {\n    result += `(${[length, scale].filter(hasVal).join(', ')})`\n  }\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr } = column\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (column.as.match(/^[a-z_][0-9a-z_]*$/i)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\nimport { exprToSQL } from './expr'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr } = tableInfo\n  const database = identifierToSql(db)\n  const tableName = table ? identifierToSql(table) : exprToSQL(expr)\n  const str = database ? `${database}.${tableName}` : tableName\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { target, expr: expression, symbol } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length) {\n    str = scale ? `${length}, ${scale}` : length\n  }\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  if (!args) return name\n  const { parentheses, over } = expr\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  const overStr = overToSQL(over)\n  return [parentheses ? `(${str})` : str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    default:\n      throw new Error(`unknow resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns,\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknow create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    let str = ''\n    const { table, column, value } = set\n    str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    if (value) str = `${str} = ${exprToSQL(value)}`\n    clauses.push(str)\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('),(')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const clauses = ['INSERT', toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(onDuplicateUpdate && onDuplicateUpdate.keyword, setToSQL, onDuplicateUpdate && onDuplicateUpdate.set))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n}\n","import { columnDataType } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  commonCmdToSQL,\n  declareToSQL,\n  renameToSQL,\n  useToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { createToSQL } from './create'\nimport { alterToSQL } from './alter'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  commonCmdToSQL,\n  declareToSQL,\n  useToSQL,\n  renameToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { columnDefinitionToSQL } from './column'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  const {\n    action, constraint_type: constraintType, if_not_exists: ifNotExists,keyword, resource,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = `= ${expr[resource]}`\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [toUpper(constraintType), ...indexTypeAndOptionToSQL(expr)]\n      break\n    default:\n      break\n  }\n  const alterArray = [toUpper(action), toUpper(keyword), toUpper(ifNotExists), name, dataType.filter(hasVal).join(' ')]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowSpecificationToSQL,\n}\n","import { exprToSQL } from './expr'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${name}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n            return { name, stmt };\n          },\n      peg$c19 = function(sv, d, c, f, fs, w, g, h, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                groupby: g,\n                having: h,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, l) {\n          return `${n}[offset(${l.value})]`\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`);\n            if (pro) tbl = `${tbl}.${pro[0]}`\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c38 = function(i) { return i; },\n      peg$c39 = \"unnest\",\n      peg$c40 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c41 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c42 = function(l) { return l; },\n      peg$c43 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c44 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c45 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n            })\n            return tail;\n          },\n      peg$c46 = function(t) { return t; },\n      peg$c47 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c48 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c49 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c50 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c51 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c52 = function() { return 'LEFT JOIN'; },\n      peg$c53 = function() { return 'RIGHT JOIN'; },\n      peg$c54 = function() { return 'FULL JOIN'; },\n      peg$c55 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c56 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c57 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c58 = function(e) { return e; },\n      peg$c59 = function(e) { return e.value; },\n      peg$c60 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c61 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c62 = function(n) { return n },\n      peg$c63 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c64 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c65 = \"range\",\n      peg$c66 = peg$literalExpectation(\"RANGE\", true),\n      peg$c67 = \"unbounded\",\n      peg$c68 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c69 = \"preceding\",\n      peg$c70 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c71 = \"current\",\n      peg$c72 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c73 = \"ROW\",\n      peg$c74 = peg$literalExpectation(\"ROW\", false),\n      peg$c75 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c76 = \"rows\",\n      peg$c77 = peg$literalExpectation(\"ROWS\", true),\n      peg$c78 = \"following\",\n      peg$c79 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c80 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c81 = function(bc) { return bc; },\n      peg$c82 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c83 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c84 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c85 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c86 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c87 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c88 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c90 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c91 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c92 = \"!\",\n      peg$c93 = peg$literalExpectation(\"!\", false),\n      peg$c94 = \"=\",\n      peg$c95 = peg$literalExpectation(\"=\", false),\n      peg$c96 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c97 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c98 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c99 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c100 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c101 = \">=\",\n      peg$c102 = peg$literalExpectation(\">=\", false),\n      peg$c103 = \">\",\n      peg$c104 = peg$literalExpectation(\">\", false),\n      peg$c105 = \"<=\",\n      peg$c106 = peg$literalExpectation(\"<=\", false),\n      peg$c107 = \"<>\",\n      peg$c108 = peg$literalExpectation(\"<>\", false),\n      peg$c109 = \"<\",\n      peg$c110 = peg$literalExpectation(\"<\", false),\n      peg$c111 = \"!=\",\n      peg$c112 = peg$literalExpectation(\"!=\", false),\n      peg$c113 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c114 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c115 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c116 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c117 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c118 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c119 = \"+\",\n      peg$c120 = peg$literalExpectation(\"+\", false),\n      peg$c121 = \"-\",\n      peg$c122 = peg$literalExpectation(\"-\", false),\n      peg$c123 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c124 = \"*\",\n      peg$c125 = peg$literalExpectation(\"*\", false),\n      peg$c126 = \"/\",\n      peg$c127 = peg$literalExpectation(\"/\", false),\n      peg$c128 = \"%\",\n      peg$c129 = peg$literalExpectation(\"%\", false),\n      peg$c130 = function(e) {\n            e.parentheses = true;\n            return e;\n          },\n      peg$c131 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c132 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c133 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c134 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c135 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c136 = function(name) {\n            return name;\n          },\n      peg$c137 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c138 = \"\\\"\",\n      peg$c139 = peg$literalExpectation(\"\\\"\", false),\n      peg$c140 = /^[^\"]/,\n      peg$c141 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c142 = function(chars) { return chars.join(''); },\n      peg$c143 = \"'\",\n      peg$c144 = peg$literalExpectation(\"'\", false),\n      peg$c145 = /^[^']/,\n      peg$c146 = peg$classExpectation([\"'\"], true, false),\n      peg$c147 = \"`\",\n      peg$c148 = peg$literalExpectation(\"`\", false),\n      peg$c149 = /^[^`]/,\n      peg$c150 = peg$classExpectation([\"`\"], true, false),\n      peg$c151 = function(name) {\n          return name;\n        },\n      peg$c152 = function(name) { return name; },\n      peg$c153 = function(start, parts) { return start + parts.join(''); },\n      peg$c154 = /^[A-Za-z_]/,\n      peg$c155 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c156 = /^[A-Za-z0-9_]/,\n      peg$c157 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c158 = /^[A-Za-z0-9_:]/,\n      peg$c159 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c160 = \":\",\n      peg$c161 = peg$literalExpectation(\":\", false),\n      peg$c162 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c163 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c164 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c165 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c166 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c167 = function(e) { return { expr: e }; },\n      peg$c168 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c169 = function() { return { type: 'star', value: '*' }; },\n      peg$c170 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c171 = function(name, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c172 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c173 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c174 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c175 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c176 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c177 = function(ca) {\n            return {\n              type: 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c178 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c179 = function(type, lf, rt) { if (lf && rt) return true },\n      peg$c180 = \"on update current_timestamp\",\n      peg$c181 = peg$literalExpectation(\"ON UPDATE CURRENT_TIMESTAMP\", true),\n      peg$c182 = function(type, lf, rt, up) {\n            return {\n              type: 'origin',\n              value: (up ? `${type} ${up}` : type).toLowerCase()\n            };\n          },\n      peg$c183 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c184 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c185 = /^[^'\\\\]/,\n      peg$c186 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c187 = \"\\\\'\",\n      peg$c188 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c189 = function() { return \"'\";  },\n      peg$c190 = \"\\\\\\\"\",\n      peg$c191 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c192 = function() { return '\"';  },\n      peg$c193 = \"\\\\\\\\\",\n      peg$c194 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c195 = function() { return \"\\\\\"; },\n      peg$c196 = \"\\\\/\",\n      peg$c197 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c198 = function() { return \"/\";  },\n      peg$c199 = \"\\\\b\",\n      peg$c200 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c201 = function() { return \"\\b\"; },\n      peg$c202 = \"\\\\f\",\n      peg$c203 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c204 = function() { return \"\\f\"; },\n      peg$c205 = \"\\\\n\",\n      peg$c206 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c207 = function() { return \"\\n\"; },\n      peg$c208 = \"\\\\r\",\n      peg$c209 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c210 = function() { return \"\\r\"; },\n      peg$c211 = \"\\\\t\",\n      peg$c212 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c213 = function() { return \"\\t\"; },\n      peg$c214 = \"\\\\u\",\n      peg$c215 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c216 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c217 = \"\\\\\",\n      peg$c218 = peg$literalExpectation(\"\\\\\", false),\n      peg$c219 = /^[\\n\\r]/,\n      peg$c220 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c221 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c222 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c223 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c224 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c225 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c226 = function(op, digits) { return \"-\" + digits; },\n      peg$c227 = function(op, digit) { return \"-\" + digit; },\n      peg$c228 = \".\",\n      peg$c229 = peg$literalExpectation(\".\", false),\n      peg$c230 = function(digits) { return \".\" + digits; },\n      peg$c231 = function(e, digits) { return e + digits; },\n      peg$c232 = function(digits) { return digits.join(\"\"); },\n      peg$c233 = /^[0-9]/,\n      peg$c234 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c235 = /^[0-9a-fA-F]/,\n      peg$c236 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c237 = /^[eE]/,\n      peg$c238 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c239 = /^[+\\-]/,\n      peg$c240 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c241 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c242 = \"null\",\n      peg$c243 = peg$literalExpectation(\"NULL\", true),\n      peg$c244 = \"default\",\n      peg$c245 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c246 = \"not null\",\n      peg$c247 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c248 = \"true\",\n      peg$c249 = peg$literalExpectation(\"TRUE\", true),\n      peg$c250 = \"to\",\n      peg$c251 = peg$literalExpectation(\"TO\", true),\n      peg$c252 = \"false\",\n      peg$c253 = peg$literalExpectation(\"FALSE\", true),\n      peg$c254 = \"drop\",\n      peg$c255 = peg$literalExpectation(\"DROP\", true),\n      peg$c256 = function() { return 'DROP'; },\n      peg$c257 = \"use\",\n      peg$c258 = peg$literalExpectation(\"USE\", true),\n      peg$c259 = \"select\",\n      peg$c260 = peg$literalExpectation(\"SELECT\", true),\n      peg$c261 = \"if not exists\",\n      peg$c262 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c263 = \"RECURSIVE\",\n      peg$c264 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c265 = \"ignore\",\n      peg$c266 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c267 = \"explain\",\n      peg$c268 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c269 = \"partition\",\n      peg$c270 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c271 = function() { return 'PARTITION' },\n      peg$c272 = \"into\",\n      peg$c273 = peg$literalExpectation(\"INTO\", true),\n      peg$c274 = \"from\",\n      peg$c275 = peg$literalExpectation(\"FROM\", true),\n      peg$c276 = \"set\",\n      peg$c277 = peg$literalExpectation(\"SET\", true),\n      peg$c278 = \"unlock\",\n      peg$c279 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c280 = \"lock\",\n      peg$c281 = peg$literalExpectation(\"LOCK\", true),\n      peg$c282 = \"table\",\n      peg$c283 = peg$literalExpectation(\"TABLE\", true),\n      peg$c284 = function() { return 'TABLE'; },\n      peg$c285 = \"tables\",\n      peg$c286 = peg$literalExpectation(\"TABLES\", true),\n      peg$c287 = function() { return 'TABLES'; },\n      peg$c288 = \"collate\",\n      peg$c289 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c290 = function() { return 'COLLATE'; },\n      peg$c291 = \"on\",\n      peg$c292 = peg$literalExpectation(\"ON\", true),\n      peg$c293 = \"left\",\n      peg$c294 = peg$literalExpectation(\"LEFT\", true),\n      peg$c295 = \"right\",\n      peg$c296 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c297 = \"full\",\n      peg$c298 = peg$literalExpectation(\"FULL\", true),\n      peg$c299 = \"inner\",\n      peg$c300 = peg$literalExpectation(\"INNER\", true),\n      peg$c301 = \"cross\",\n      peg$c302 = peg$literalExpectation(\"CROSS\", true),\n      peg$c303 = \"join\",\n      peg$c304 = peg$literalExpectation(\"JOIN\", true),\n      peg$c305 = \"outer\",\n      peg$c306 = peg$literalExpectation(\"OUTER\", true),\n      peg$c307 = \"over\",\n      peg$c308 = peg$literalExpectation(\"OVER\", true),\n      peg$c309 = \"union\",\n      peg$c310 = peg$literalExpectation(\"UNION\", true),\n      peg$c311 = \"value\",\n      peg$c312 = peg$literalExpectation(\"VALUE\", true),\n      peg$c313 = function() { return 'VALUE' },\n      peg$c314 = \"values\",\n      peg$c315 = peg$literalExpectation(\"VALUES\", true),\n      peg$c316 = \"using\",\n      peg$c317 = peg$literalExpectation(\"USING\", true),\n      peg$c318 = \"where\",\n      peg$c319 = peg$literalExpectation(\"WHERE\", true),\n      peg$c320 = \"with\",\n      peg$c321 = peg$literalExpectation(\"WITH\", true),\n      peg$c322 = \"group\",\n      peg$c323 = peg$literalExpectation(\"GROUP\", true),\n      peg$c324 = \"by\",\n      peg$c325 = peg$literalExpectation(\"BY\", true),\n      peg$c326 = \"order\",\n      peg$c327 = peg$literalExpectation(\"ORDER\", true),\n      peg$c328 = \"having\",\n      peg$c329 = peg$literalExpectation(\"HAVING\", true),\n      peg$c330 = \"window\",\n      peg$c331 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c332 = \"limit\",\n      peg$c333 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c334 = \"offset\",\n      peg$c335 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c336 = function() { return 'OFFSET'; },\n      peg$c337 = \"asc\",\n      peg$c338 = peg$literalExpectation(\"ASC\", true),\n      peg$c339 = function() { return 'ASC'; },\n      peg$c340 = \"desc\",\n      peg$c341 = peg$literalExpectation(\"DESC\", true),\n      peg$c342 = function() { return 'DESC'; },\n      peg$c343 = \"all\",\n      peg$c344 = peg$literalExpectation(\"ALL\", true),\n      peg$c345 = function() { return 'ALL'; },\n      peg$c346 = \"distinct\",\n      peg$c347 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c348 = function() { return 'DISTINCT';},\n      peg$c349 = \"between\",\n      peg$c350 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c351 = function() { return 'BETWEEN'; },\n      peg$c352 = \"in\",\n      peg$c353 = peg$literalExpectation(\"IN\", true),\n      peg$c354 = function() { return 'IN'; },\n      peg$c355 = \"is\",\n      peg$c356 = peg$literalExpectation(\"IS\", true),\n      peg$c357 = function() { return 'IS'; },\n      peg$c358 = \"like\",\n      peg$c359 = peg$literalExpectation(\"LIKE\", true),\n      peg$c360 = function() { return 'LIKE'; },\n      peg$c361 = \"exists\",\n      peg$c362 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c363 = function() { return 'EXISTS'; },\n      peg$c364 = \"not\",\n      peg$c365 = peg$literalExpectation(\"NOT\", true),\n      peg$c366 = function() { return 'NOT'; },\n      peg$c367 = \"and\",\n      peg$c368 = peg$literalExpectation(\"AND\", true),\n      peg$c369 = function() { return 'AND'; },\n      peg$c370 = \"or\",\n      peg$c371 = peg$literalExpectation(\"OR\", true),\n      peg$c372 = function() { return 'OR'; },\n      peg$c373 = \"count\",\n      peg$c374 = peg$literalExpectation(\"COUNT\", true),\n      peg$c375 = function() { return 'COUNT'; },\n      peg$c376 = \"max\",\n      peg$c377 = peg$literalExpectation(\"MAX\", true),\n      peg$c378 = function() { return 'MAX'; },\n      peg$c379 = \"min\",\n      peg$c380 = peg$literalExpectation(\"MIN\", true),\n      peg$c381 = function() { return 'MIN'; },\n      peg$c382 = \"sum\",\n      peg$c383 = peg$literalExpectation(\"SUM\", true),\n      peg$c384 = function() { return 'SUM'; },\n      peg$c385 = \"avg\",\n      peg$c386 = peg$literalExpectation(\"AVG\", true),\n      peg$c387 = function() { return 'AVG'; },\n      peg$c388 = \"call\",\n      peg$c389 = peg$literalExpectation(\"CALL\", true),\n      peg$c390 = function() { return 'CALL'; },\n      peg$c391 = \"case\",\n      peg$c392 = peg$literalExpectation(\"CASE\", true),\n      peg$c393 = \"when\",\n      peg$c394 = peg$literalExpectation(\"WHEN\", true),\n      peg$c395 = \"then\",\n      peg$c396 = peg$literalExpectation(\"THEN\", true),\n      peg$c397 = \"else\",\n      peg$c398 = peg$literalExpectation(\"ELSE\", true),\n      peg$c399 = \"end\",\n      peg$c400 = peg$literalExpectation(\"END\", true),\n      peg$c401 = \"cast\",\n      peg$c402 = peg$literalExpectation(\"CAST\", true),\n      peg$c403 = \"array\",\n      peg$c404 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c405 = function() { return 'ARRAY'; },\n      peg$c406 = \"bytes\",\n      peg$c407 = peg$literalExpectation(\"BYTES\", true),\n      peg$c408 = function() { return 'BYTES'; },\n      peg$c409 = \"bool\",\n      peg$c410 = peg$literalExpectation(\"BOOL\", true),\n      peg$c411 = function() { return 'BOOL'; },\n      peg$c412 = \"char\",\n      peg$c413 = peg$literalExpectation(\"CHAR\", true),\n      peg$c414 = function() { return 'CHAR'; },\n      peg$c415 = \"geography\",\n      peg$c416 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c417 = function() { return 'GEOGRAPHY'; },\n      peg$c418 = \"varchar\",\n      peg$c419 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c420 = function() { return 'VARCHAR';},\n      peg$c421 = \"numeric\",\n      peg$c422 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c423 = function() { return 'NUMERIC'; },\n      peg$c424 = \"decimal\",\n      peg$c425 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c426 = function() { return 'DECIMAL'; },\n      peg$c427 = \"signed\",\n      peg$c428 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c429 = function() { return 'SIGNED'; },\n      peg$c430 = \"unsigned\",\n      peg$c431 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c432 = function() { return 'UNSIGNED'; },\n      peg$c433 = \"int64\",\n      peg$c434 = peg$literalExpectation(\"INT64\", true),\n      peg$c435 = function() { return 'INT64'; },\n      peg$c436 = \"zerofill\",\n      peg$c437 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c438 = function() { return 'ZEROFILL'; },\n      peg$c439 = \"integer\",\n      peg$c440 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c441 = function() { return 'INTEGER'; },\n      peg$c442 = \"json\",\n      peg$c443 = peg$literalExpectation(\"JSON\", true),\n      peg$c444 = function() { return 'JSON'; },\n      peg$c445 = \"smallint\",\n      peg$c446 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c447 = function() { return 'SMALLINT'; },\n      peg$c448 = \"string\",\n      peg$c449 = peg$literalExpectation(\"STRING\", true),\n      peg$c450 = function() { return 'STRING'; },\n      peg$c451 = \"struct\",\n      peg$c452 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c453 = function() { return 'STRUCT'; },\n      peg$c454 = \"tinyint\",\n      peg$c455 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c456 = function() { return 'TINYINT'; },\n      peg$c457 = \"tinytext\",\n      peg$c458 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c459 = function() { return 'TINYTEXT'; },\n      peg$c460 = \"text\",\n      peg$c461 = peg$literalExpectation(\"TEXT\", true),\n      peg$c462 = function() { return 'TEXT'; },\n      peg$c463 = \"mediumtext\",\n      peg$c464 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c465 = function() { return 'MEDIUMTEXT'; },\n      peg$c466 = \"longtext\",\n      peg$c467 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c468 = function() { return 'LONGTEXT'; },\n      peg$c469 = \"bigint\",\n      peg$c470 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c471 = function() { return 'BIGINT'; },\n      peg$c472 = \"float64\",\n      peg$c473 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c474 = function() { return 'FLOAT64'; },\n      peg$c475 = \"double\",\n      peg$c476 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c477 = function() { return 'DOUBLE'; },\n      peg$c478 = \"date\",\n      peg$c479 = peg$literalExpectation(\"DATE\", true),\n      peg$c480 = function() { return 'DATE'; },\n      peg$c481 = \"datetime\",\n      peg$c482 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c483 = function() { return 'DATETIME'; },\n      peg$c484 = \"time\",\n      peg$c485 = peg$literalExpectation(\"TIME\", true),\n      peg$c486 = function() { return 'TIME'; },\n      peg$c487 = \"timestamp\",\n      peg$c488 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c489 = function() { return 'TIMESTAMP'; },\n      peg$c490 = \"truncate\",\n      peg$c491 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c492 = function() { return 'TRUNCATE'; },\n      peg$c493 = \"user\",\n      peg$c494 = peg$literalExpectation(\"USER\", true),\n      peg$c495 = function() { return 'USER'; },\n      peg$c496 = \"current_date\",\n      peg$c497 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c498 = function() { return 'CURRENT_DATE'; },\n      peg$c499 = \"adddate\",\n      peg$c500 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c501 = function() { return 'ADDDATE'; },\n      peg$c502 = \"interval\",\n      peg$c503 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c504 = function() { return 'INTERVAL'; },\n      peg$c505 = \"year\",\n      peg$c506 = peg$literalExpectation(\"YEAR\", true),\n      peg$c507 = function() { return 'YEAR'; },\n      peg$c508 = \"month\",\n      peg$c509 = peg$literalExpectation(\"MONTH\", true),\n      peg$c510 = function() { return 'MONTH'; },\n      peg$c511 = \"day\",\n      peg$c512 = peg$literalExpectation(\"DAY\", true),\n      peg$c513 = function() { return 'DAY'; },\n      peg$c514 = \"hour\",\n      peg$c515 = peg$literalExpectation(\"HOUR\", true),\n      peg$c516 = function() { return 'HOUR'; },\n      peg$c517 = \"minute\",\n      peg$c518 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c519 = function() { return 'MINUTE'; },\n      peg$c520 = \"second\",\n      peg$c521 = peg$literalExpectation(\"SECOND\", true),\n      peg$c522 = function() { return 'SECOND'; },\n      peg$c523 = \"current_time\",\n      peg$c524 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c525 = function() { return 'CURRENT_TIME'; },\n      peg$c526 = \"current_timestamp\",\n      peg$c527 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c528 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c529 = \"global\",\n      peg$c530 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c531 = function() { return 'GLOBAL'; },\n      peg$c532 = \"session\",\n      peg$c533 = peg$literalExpectation(\"SESSION\", true),\n      peg$c534 = function() { return 'SESSION'; },\n      peg$c535 = \"local\",\n      peg$c536 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c537 = function() { return 'LOCAL'; },\n      peg$c538 = \"persist\",\n      peg$c539 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c540 = function() { return 'PERSIST'; },\n      peg$c541 = \"persist_only\",\n      peg$c542 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c543 = function() { return 'PERSIST_ONLY'; },\n      peg$c544 = \"add\",\n      peg$c545 = peg$literalExpectation(\"ADD\", true),\n      peg$c546 = function() { return 'ADD'; },\n      peg$c547 = \"column\",\n      peg$c548 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c549 = function() { return 'COLUMN'; },\n      peg$c550 = \"index\",\n      peg$c551 = peg$literalExpectation(\"INDEX\", true),\n      peg$c552 = function() { return 'INDEX'; },\n      peg$c553 = \"key\",\n      peg$c554 = peg$literalExpectation(\"KEY\", true),\n      peg$c555 = function() { return 'KEY'; },\n      peg$c556 = \"fulltext\",\n      peg$c557 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c558 = function() { return 'FULLTEXT'; },\n      peg$c559 = \"unique\",\n      peg$c560 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c561 = function() { return 'UNIQUE'; },\n      peg$c562 = \"comment\",\n      peg$c563 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c564 = function() { return 'COMMENT'; },\n      peg$c565 = \"constraint\",\n      peg$c566 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c567 = function() { return 'CONSTRAINT'; },\n      peg$c568 = \"references\",\n      peg$c569 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c570 = function() { return 'REFERENCES'; },\n      peg$c571 = \",\",\n      peg$c572 = peg$literalExpectation(\",\", false),\n      peg$c573 = \"[\",\n      peg$c574 = peg$literalExpectation(\"[\", false),\n      peg$c575 = \"]\",\n      peg$c576 = peg$literalExpectation(\"]\", false),\n      peg$c577 = \";\",\n      peg$c578 = peg$literalExpectation(\";\", false),\n      peg$c579 = \"||\",\n      peg$c580 = peg$literalExpectation(\"||\", false),\n      peg$c581 = \"&&\",\n      peg$c582 = peg$literalExpectation(\"&&\", false),\n      peg$c583 = \"/*\",\n      peg$c584 = peg$literalExpectation(\"/*\", false),\n      peg$c585 = \"*/\",\n      peg$c586 = peg$literalExpectation(\"*/\", false),\n      peg$c587 = \"--\",\n      peg$c588 = peg$literalExpectation(\"--\", false),\n      peg$c589 = \"#\",\n      peg$c590 = peg$literalExpectation(\"#\", false),\n      peg$c591 = peg$anyExpectation(),\n      peg$c592 = /^[ \\t\\n\\r]/,\n      peg$c593 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c594 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c595 = function(n) {\n            return n\n          },\n      peg$c596 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c597 = function(t) { return { dataType: t }; },\n      peg$c598 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestruct_value();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ALL();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_DISTINCT();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsefor_sys_time_as_of();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhere_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsegroup_by_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsehaving_clause();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsewindow_clause();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c19(s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_alias();\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c38(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c39) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewith_offset();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c41(s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FROM();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_ref_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c42(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c43(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c45(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c46(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c46(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c47(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c48(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c49(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c51(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c52();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c53();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c54();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_INNER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_CROSS();\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c55(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c59(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c62(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c63(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c64(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c65) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c67) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c68); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c70); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c71) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c73) {\n                            s12 = peg$c73;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c75();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c76) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c78) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c80(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c81(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c42(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parseparentheses_list_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsestruct_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parselogic_operator_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseor_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseselect_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsearray_expr();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c86(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c87(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c89(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c90(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c92;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c93); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c94;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c95); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c96(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseKW_AND();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecomparison_op_right();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c97(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c98(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c100(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c101) {\n      s0 = peg$c101;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c102); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c103;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c104); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c105) {\n          s0 = peg$c105;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c106); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c107) {\n            s0 = peg$c107;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c108); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c109;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c110); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c94;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c95); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c111) {\n                  s0 = peg$c111;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c113(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c114(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c115(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c99(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c117(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c118(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c119;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c120); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c121;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c122); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c123(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c124;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c126;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c127); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c128;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_func();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefunc_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinterval_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecolumn_ref();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseparam();\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parseLPAREN();\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse__();\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseexpr();\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse__();\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parseRPAREN();\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c130(s3);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseLPAREN();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse__();\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parseexpr_list();\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse__();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parseRPAREN();\n                          if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c131(s3);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c132(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c133(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c134(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c135(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c137(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c136(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c138;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c140.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c140.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c141); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c138;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c139); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c142(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c143;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c144); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c145.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c146); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c145.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c143;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c142(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c147;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c148); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c149.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c150); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c149.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c150); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c147;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c148); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c142(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c151(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c135(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c152(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c153(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c153(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c154.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c155); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c156.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c157); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c158.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c159); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c160;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c162(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c163(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c164(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c165(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c166(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c167(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c168(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c124;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c169();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c170(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsescalar_func();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseover_partition();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c171(s1, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c172(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c173();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c174();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c175();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c176();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c143;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c144); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsesingle_char();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsesingle_char();\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c143;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c177(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c138;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c139); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_quote_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_quote_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c138;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c139); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c177(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c143;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c143;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c144); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c178(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CURRENT_TIMESTAMP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c179(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 27).toLowerCase() === peg$c180) {\n                      s8 = input.substr(peg$currPos, 27);\n                      peg$currPos += 27;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c181); }\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c182(s1, s3, s5, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c183.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c184); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c185.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c187) {\n      s1 = peg$c187;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c189();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c190) {\n        s1 = peg$c190;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c191); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c192();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c193) {\n          s1 = peg$c193;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c194); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c195();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c196) {\n            s1 = peg$c196;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c197); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c198();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c199) {\n              s1 = peg$c199;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c200); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c201();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c202) {\n                s1 = peg$c202;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c203); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c204();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c205) {\n                  s1 = peg$c205;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c207();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c208) {\n                    s1 = peg$c208;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c209); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c210();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c211) {\n                      s1 = peg$c211;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c213();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c214) {\n                        s1 = peg$c214;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c215); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c216(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c217;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c195();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c219.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c220); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c221(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c222(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c223(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c224(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c225(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c121;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c122); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c119;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c120); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c226(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c121;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c122); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c119;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c120); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c227(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c228;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c229); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c230(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c231(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c232(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c233.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c234); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c235.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c237.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c239.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c240); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c241(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c242) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c243); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c244) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c246) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c248) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c249); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c250) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c251); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c252) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c253); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c254) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c255); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c256();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c257) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c258); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c259) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c260); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c261) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c262); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c263) {\n      s1 = peg$c263;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c264); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c265) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c266); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c267) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c268); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c269) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c270); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c271();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c272) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c273); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c274) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c275); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c276) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c277); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c278) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c279); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c280) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c282) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c283); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c284();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c285) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c286); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c287();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c288) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c289); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c290();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c291) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c292); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c293) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c294); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c295) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c296); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c297) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c298); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c299) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c300); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c301) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c302); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c303) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c304); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c305) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c306); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c307) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c308); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c309) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c310); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c311) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c312); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c313();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c314) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c315); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c318) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c320) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c321); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c322) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c326) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c327); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c328) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c330) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c331); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c332) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c333); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c336();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c339();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c340) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c341); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c342();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c343) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c344); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c345();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c346) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c347); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c348();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c349) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c350); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c351();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c354();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c357();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c358) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c359); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c363();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c364) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c365); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c366();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c367) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c368); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c369();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c372();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c375();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c376) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c377); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c378();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c379) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c380); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c381();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c382) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c383); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c384();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c385) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c386); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c387();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c388) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c389); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c390();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c391) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c393) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c394); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c395) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c396); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c397) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c398); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c399) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c400); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c401) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c402); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c403) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c404); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c405();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c406) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c407); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c408();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c409) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c410); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c411();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c412) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c413); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c414();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c415) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c416); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c417();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c418) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c419); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c420();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c421) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c422); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c423();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c424) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c425); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c426();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c427) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c428); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c429();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c430) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c431); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c432();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c433) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c435();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c436) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c437); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c438();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c439) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c440); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c441();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c442) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c443); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c444();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c445) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c446); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c447();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c448) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c450();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c451) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c452); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c453();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c454) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c455); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c456();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c457) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c458); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c459();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c460) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c461); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c462();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c463) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c464); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c465();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c466) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c468();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c469) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c470); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c471();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c472) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c473); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c474();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c475) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c476); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c477();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c478) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c479); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c480();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c481) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c482); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c483();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c484) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c485); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c486();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c487) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c488); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c489();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c490) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c491); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c492();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c493) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c494); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c495();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c496) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c497); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c498();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c499) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c500); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c501();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c502) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c503); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c504();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c505) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c506); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c507();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c508) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c509); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c510();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c511) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c512); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c513();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c514) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c515); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c516();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c517) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c518); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c519();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c520) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c521); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c522();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c523) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c524); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c525();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c526) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c527); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c528();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c529) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c530); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c531();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c532) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c533); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c534();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c535) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c536); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c537();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c538) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c539); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c540();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c541) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c542); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c543();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c544) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c545); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c546();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c547) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c548); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c549();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c550) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c551); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c552();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c553) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c554); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c555();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c556) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c557); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c558();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c559) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c560); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c561();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c562) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c563); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c564();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c565) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c566); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c567();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c568) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c569); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c570();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c228;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c229); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c571;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c572); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c124;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c109;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c110); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c103;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c573;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c574); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c575;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c576); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c577;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c578); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c579) {\n      s0 = peg$c579;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c581) {\n      s0 = peg$c581;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c582); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c583) {\n      s1 = peg$c583;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c584); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c585) {\n        s5 = peg$c585;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c586); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c585) {\n          s5 = peg$c585;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c586); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c585) {\n          s3 = peg$c585;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c586); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c587) {\n      s1 = peg$c587;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c588); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c589;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c590); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c592.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c593); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c219.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c220); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c219.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c220); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c594(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c595(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c596(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c597(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c598(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c598(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][3]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const columns = []\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          columns.push(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        columns.push(columnInfo.join(symbolChar))\n      }\n      return columns\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}